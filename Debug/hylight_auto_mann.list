
hylight_auto_mann.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c70  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08009e00  08009e00  0000ae00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a118  0800a118  0000c060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a118  0800a118  0000b118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a120  0800a120  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a120  0800a120  0000b120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a124  0800a124  0000b124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800a128  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000140c  20000060  0800a188  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000146c  0800a188  0000c46c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c401  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004105  00000000  00000000  00028491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  0002c598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001036  00000000  00000000  0002daa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a22  00000000  00000000  0002eade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001973b  00000000  00000000  00052500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf1a9  00000000  00000000  0006bc3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ade4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b70  00000000  00000000  0013ae28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00140998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009de8 	.word	0x08009de8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08009de8 	.word	0x08009de8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800028e:	f000 b9d3 	b.w	8000638 <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f84d 	bl	8000340 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f840 	bl	8000340 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f82f 	bl	8000340 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f821 	bl	8000340 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2203      	movs	r2, #3
 8000648:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2200      	movs	r2, #0
 800064e:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2203      	movs	r2, #3
 8000654:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2203      	movs	r2, #3
 800065a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2203      	movs	r2, #3
 8000660:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2203      	movs	r2, #3
 8000666:	715a      	strb	r2, [r3, #5]
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af04      	add	r7, sp, #16
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	460b      	mov	r3, r1
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800068e:	7afb      	ldrb	r3, [r7, #11]
 8000690:	b29a      	uxth	r2, r3
 8000692:	8af9      	ldrh	r1, [r7, #22]
 8000694:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	2302      	movs	r3, #2
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2301      	movs	r3, #1
 80006a6:	f004 faa5 	bl	8004bf4 <HAL_I2C_Mem_Read>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d10c      	bne.n	80006ca <read_register16+0x56>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80006b0:	7d7b      	ldrb	r3, [r7, #21]
 80006b2:	b21b      	sxth	r3, r3
 80006b4:	021b      	lsls	r3, r3, #8
 80006b6:	b21a      	sxth	r2, r3
 80006b8:	7d3b      	ldrb	r3, [r7, #20]
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	4313      	orrs	r3, r2
 80006be:	b21b      	sxth	r3, r3
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	801a      	strh	r2, [r3, #0]
		return true;
 80006c6:	2301      	movs	r3, #1
 80006c8:	e000      	b.n	80006cc <read_register16+0x58>
	} else
		return false;
 80006ca:	2300      	movs	r3, #0

}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b08b      	sub	sp, #44	@ 0x2c
 80006d8:	af04      	add	r7, sp, #16
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	607a      	str	r2, [r7, #4]
 80006de:	461a      	mov	r2, r3
 80006e0:	460b      	mov	r3, r1
 80006e2:	72fb      	strb	r3, [r7, #11]
 80006e4:	4613      	mov	r3, r2
 80006e6:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80006f4:	7afb      	ldrb	r3, [r7, #11]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	7abb      	ldrb	r3, [r7, #10]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	8af9      	ldrh	r1, [r7, #22]
 80006fe:	f241 3488 	movw	r4, #5000	@ 0x1388
 8000702:	9402      	str	r4, [sp, #8]
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	2301      	movs	r3, #1
 800070c:	f004 fa72 	bl	8004bf4 <HAL_I2C_Mem_Read>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d101      	bne.n	800071a <read_data+0x46>
		return 0;
 8000716:	2300      	movs	r3, #0
 8000718:	e000      	b.n	800071c <read_data+0x48>
	else
		return 1;
 800071a:	2301      	movs	r3, #1

}
 800071c:	4618      	mov	r0, r3
 800071e:	371c      	adds	r7, #28
 8000720:	46bd      	mov	sp, r7
 8000722:	bd90      	pop	{r4, r7, pc}

08000724 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	461a      	mov	r2, r3
 8000730:	2188      	movs	r1, #136	@ 0x88
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff ff9e 	bl	8000674 <read_register16>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d06f      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	3302      	adds	r3, #2
 8000742:	461a      	mov	r2, r3
 8000744:	218a      	movs	r1, #138	@ 0x8a
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ff94 	bl	8000674 <read_register16>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d065      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	3304      	adds	r3, #4
 8000756:	461a      	mov	r2, r3
 8000758:	218c      	movs	r1, #140	@ 0x8c
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff ff8a 	bl	8000674 <read_register16>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d05b      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3306      	adds	r3, #6
 800076a:	461a      	mov	r2, r3
 800076c:	218e      	movs	r1, #142	@ 0x8e
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff80 	bl	8000674 <read_register16>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d051      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3308      	adds	r3, #8
 800077e:	461a      	mov	r2, r3
 8000780:	2190      	movs	r1, #144	@ 0x90
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff ff76 	bl	8000674 <read_register16>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d047      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	330a      	adds	r3, #10
 8000792:	461a      	mov	r2, r3
 8000794:	2192      	movs	r1, #146	@ 0x92
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ff6c 	bl	8000674 <read_register16>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d03d      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	330c      	adds	r3, #12
 80007a6:	461a      	mov	r2, r3
 80007a8:	2194      	movs	r1, #148	@ 0x94
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ff62 	bl	8000674 <read_register16>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d033      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	330e      	adds	r3, #14
 80007ba:	461a      	mov	r2, r3
 80007bc:	2196      	movs	r1, #150	@ 0x96
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ff58 	bl	8000674 <read_register16>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d029      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3310      	adds	r3, #16
 80007ce:	461a      	mov	r2, r3
 80007d0:	2198      	movs	r1, #152	@ 0x98
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ff4e 	bl	8000674 <read_register16>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d01f      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3312      	adds	r3, #18
 80007e2:	461a      	mov	r2, r3
 80007e4:	219a      	movs	r1, #154	@ 0x9a
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ff44 	bl	8000674 <read_register16>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d015      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3314      	adds	r3, #20
 80007f6:	461a      	mov	r2, r3
 80007f8:	219c      	movs	r1, #156	@ 0x9c
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff3a 	bl	8000674 <read_register16>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d00b      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 800080a:	461a      	mov	r2, r3
 800080c:	219e      	movs	r1, #158	@ 0x9e
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ff30 	bl	8000674 <read_register16>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <read_calibration_data+0xfa>

		return true;
 800081a:	2301      	movs	r3, #1
 800081c:	e000      	b.n	8000820 <read_calibration_data+0xfc>
	}

	return false;
 800081e:	2300      	movs	r3, #0
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f103 0218 	add.w	r2, r3, #24
 8000836:	2301      	movs	r3, #1
 8000838:	21a1      	movs	r1, #161	@ 0xa1
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff ff4a 	bl	80006d4 <read_data>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d14c      	bne.n	80008e0 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	331a      	adds	r3, #26
 800084a:	461a      	mov	r2, r3
 800084c:	21e1      	movs	r1, #225	@ 0xe1
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff ff10 	bl	8000674 <read_register16>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d042      	beq.n	80008e0 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f103 021c 	add.w	r2, r3, #28
 8000860:	2301      	movs	r3, #1
 8000862:	21e3      	movs	r1, #227	@ 0xe3
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ff35 	bl	80006d4 <read_data>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d137      	bne.n	80008e0 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe4, &h4)
 8000870:	f107 030e 	add.w	r3, r7, #14
 8000874:	461a      	mov	r2, r3
 8000876:	21e4      	movs	r1, #228	@ 0xe4
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff fefb 	bl	8000674 <read_register16>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d02d      	beq.n	80008e0 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe5, &h5)
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	461a      	mov	r2, r3
 800088a:	21e5      	movs	r1, #229	@ 0xe5
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff fef1 	bl	8000674 <read_register16>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d023      	beq.n	80008e0 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 800089e:	2301      	movs	r3, #1
 80008a0:	21e7      	movs	r1, #231	@ 0xe7
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff ff16 	bl	80006d4 <read_data>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d118      	bne.n	80008e0 <read_hum_calibration_data+0xb8>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80008ae:	89fb      	ldrh	r3, [r7, #14]
 80008b0:	b21b      	sxth	r3, r3
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80008ba:	b21a      	sxth	r2, r3
 80008bc:	89fb      	ldrh	r3, [r7, #14]
 80008be:	121b      	asrs	r3, r3, #8
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	f003 030f 	and.w	r3, r3, #15
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	4313      	orrs	r3, r2
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80008d0:	89bb      	ldrh	r3, [r7, #12]
 80008d2:	091b      	lsrs	r3, r3, #4
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	841a      	strh	r2, [r3, #32]

		return true;
 80008dc:	2301      	movs	r3, #1
 80008de:	e000      	b.n	80008e2 <read_hum_calibration_data+0xba>
	}

	return false;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b088      	sub	sp, #32
 80008ee:	af04      	add	r7, sp, #16
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	460b      	mov	r3, r1
 80008f4:	70fb      	strb	r3, [r7, #3]
 80008f6:	4613      	mov	r3, r2
 80008f8:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000906:	78fb      	ldrb	r3, [r7, #3]
 8000908:	b29a      	uxth	r2, r3
 800090a:	89f9      	ldrh	r1, [r7, #14]
 800090c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000910:	9302      	str	r3, [sp, #8]
 8000912:	2301      	movs	r3, #1
 8000914:	9301      	str	r3, [sp, #4]
 8000916:	1cbb      	adds	r3, r7, #2
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	2301      	movs	r3, #1
 800091c:	f004 f856 	bl	80049cc <HAL_I2C_Mem_Write>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d101      	bne.n	800092a <write_register8+0x40>
		return false;
 8000926:	2300      	movs	r3, #0
 8000928:	e000      	b.n	800092c <write_register8+0x42>
	else
		return true;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000942:	2b76      	cmp	r3, #118	@ 0x76
 8000944:	d005      	beq.n	8000952 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800094a:	2b77      	cmp	r3, #119	@ 0x77
 800094c:	d001      	beq.n	8000952 <bmp280_init+0x1e>

		return false;
 800094e:	2300      	movs	r3, #0
 8000950:	e09d      	b.n	8000a8e <bmp280_init+0x15a>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8000958:	2301      	movs	r3, #1
 800095a:	21d0      	movs	r1, #208	@ 0xd0
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff feb9 	bl	80006d4 <read_data>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <bmp280_init+0x38>
		return false;
 8000968:	2300      	movs	r3, #0
 800096a:	e090      	b.n	8000a8e <bmp280_init+0x15a>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8000972:	2b58      	cmp	r3, #88	@ 0x58
 8000974:	d006      	beq.n	8000984 <bmp280_init+0x50>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800097c:	2b60      	cmp	r3, #96	@ 0x60
 800097e:	d001      	beq.n	8000984 <bmp280_init+0x50>

		return false;
 8000980:	2300      	movs	r3, #0
 8000982:	e084      	b.n	8000a8e <bmp280_init+0x15a>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8000984:	22b6      	movs	r2, #182	@ 0xb6
 8000986:	21e0      	movs	r1, #224	@ 0xe0
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff ffae 	bl	80008ea <write_register8>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <bmp280_init+0x64>
		return false;
 8000994:	2300      	movs	r3, #0
 8000996:	e07a      	b.n	8000a8e <bmp280_init+0x15a>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8000998:	f107 020c 	add.w	r2, r7, #12
 800099c:	2301      	movs	r3, #1
 800099e:	21f3      	movs	r1, #243	@ 0xf3
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff fe97 	bl	80006d4 <read_data>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1f5      	bne.n	8000998 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80009ac:	7b3b      	ldrb	r3, [r7, #12]
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1f0      	bne.n	8000998 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff feb4 	bl	8000724 <read_calibration_data>
 80009bc:	4603      	mov	r3, r0
 80009be:	f083 0301 	eor.w	r3, r3, #1
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d100      	bne.n	80009ca <bmp280_init+0x96>
 80009c8:	e001      	b.n	80009ce <bmp280_init+0x9a>
		return false;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e05f      	b.n	8000a8e <bmp280_init+0x15a>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80009d4:	2b60      	cmp	r3, #96	@ 0x60
 80009d6:	d10a      	bne.n	80009ee <bmp280_init+0xba>
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ff25 	bl	8000828 <read_hum_calibration_data>
 80009de:	4603      	mov	r3, r0
 80009e0:	f083 0301 	eor.w	r3, r3, #1
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <bmp280_init+0xba>
		return false;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e04f      	b.n	8000a8e <bmp280_init+0x15a>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	795b      	ldrb	r3, [r3, #5]
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	015b      	lsls	r3, r3, #5
 80009f6:	b25a      	sxtb	r2, r3
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	785b      	ldrb	r3, [r3, #1]
 80009fc:	b25b      	sxtb	r3, r3
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b25b      	sxtb	r3, r3
 8000a06:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	21f5      	movs	r1, #245	@ 0xf5
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ff6b 	bl	80008ea <write_register8>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <bmp280_init+0xea>
		return false;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e037      	b.n	8000a8e <bmp280_init+0x15a>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d102      	bne.n	8000a2c <bmp280_init+0xf8>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	78db      	ldrb	r3, [r3, #3]
			| (params->oversampling_pressure << 2) | (params->mode);
 8000a30:	b25b      	sxtb	r3, r3
 8000a32:	015b      	lsls	r3, r3, #5
 8000a34:	b25a      	sxtb	r2, r3
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	789b      	ldrb	r3, [r3, #2]
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	b25b      	sxtb	r3, r3
 8000a40:	4313      	orrs	r3, r2
 8000a42:	b25a      	sxtb	r2, r3
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000a4e:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8000a56:	2b60      	cmp	r3, #96	@ 0x60
 8000a58:	d10d      	bne.n	8000a76 <bmp280_init+0x142>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	791b      	ldrb	r3, [r3, #4]
 8000a5e:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8000a60:	7b7b      	ldrb	r3, [r7, #13]
 8000a62:	461a      	mov	r2, r3
 8000a64:	21f2      	movs	r1, #242	@ 0xf2
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ff3f 	bl	80008ea <write_register8>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <bmp280_init+0x142>
			return false;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e00b      	b.n	8000a8e <bmp280_init+0x15a>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	21f4      	movs	r1, #244	@ 0xf4
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ff34 	bl	80008ea <write_register8>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <bmp280_init+0x158>
		return false;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e000      	b.n	8000a8e <bmp280_init+0x15a>
	}

	return true;
 8000a8c:	2301      	movs	r3, #1
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <bmp280_force_measurement>:

bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b084      	sub	sp, #16
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
	uint8_t ctrl;
	if (read_data(dev, BMP280_REG_CTRL, &ctrl, 1))
 8000a9e:	f107 020f 	add.w	r2, r7, #15
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	21f4      	movs	r1, #244	@ 0xf4
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff fe14 	bl	80006d4 <read_data>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <bmp280_force_measurement+0x20>
		return false;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e015      	b.n	8000ae2 <bmp280_force_measurement+0x4c>
	ctrl &= ~0b11;  // clear two lower bits
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	f023 0303 	bic.w	r3, r3, #3
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	73fb      	strb	r3, [r7, #15]
	ctrl |= BMP280_MODE_FORCED;
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	461a      	mov	r2, r3
 8000ace:	21f4      	movs	r1, #244	@ 0xf4
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ff0a 	bl	80008ea <write_register8>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <bmp280_force_measurement+0x4a>
		return false;
 8000adc:	2300      	movs	r3, #0
 8000ade:	e000      	b.n	8000ae2 <bmp280_force_measurement+0x4c>
	}
	return true;
 8000ae0:	2301      	movs	r3, #1
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <bmp280_is_measuring>:

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b084      	sub	sp, #16
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
	uint8_t status;
	if (read_data(dev, BMP280_REG_STATUS, &status, 1))
 8000af2:	f107 020f 	add.w	r2, r7, #15
 8000af6:	2301      	movs	r3, #1
 8000af8:	21f3      	movs	r1, #243	@ 0xf3
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff fdea 	bl	80006d4 <read_data>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <bmp280_is_measuring+0x20>
		return false;
 8000b06:	2300      	movs	r3, #0
 8000b08:	e007      	b.n	8000b1a <bmp280_is_measuring+0x30>
	if (status & (1 << 3)) {
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <bmp280_is_measuring+0x2e>
		return true;
 8000b14:	2301      	movs	r3, #1
 8000b16:	e000      	b.n	8000b1a <bmp280_is_measuring+0x30>
	}
	return false;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8000b22:	b480      	push	{r7}
 8000b24:	b087      	sub	sp, #28
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	60f8      	str	r0, [r7, #12]
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	10da      	asrs	r2, r3, #3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000b44:	12db      	asrs	r3, r3, #11
 8000b46:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	111b      	asrs	r3, r3, #4
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	8812      	ldrh	r2, [r2, #0]
 8000b50:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	1112      	asrs	r2, r2, #4
 8000b56:	68f9      	ldr	r1, [r7, #12]
 8000b58:	8809      	ldrh	r1, [r1, #0]
 8000b5a:	1a52      	subs	r2, r2, r1
 8000b5c:	fb02 f303 	mul.w	r3, r2, r3
 8000b60:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000b68:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000b6c:	139b      	asrs	r3, r3, #14
 8000b6e:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000b70:	697a      	ldr	r2, [r7, #20]
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	441a      	add	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	3380      	adds	r3, #128	@ 0x80
 8000b86:	121b      	asrs	r3, r3, #8
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	371c      	adds	r7, #28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b98:	b0cc      	sub	sp, #304	@ 0x130
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8000ba0:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8000ba4:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000bac:	17da      	asrs	r2, r3, #31
 8000bae:	461c      	mov	r4, r3
 8000bb0:	4615      	mov	r5, r2
 8000bb2:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000bb6:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 8000bba:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000bbe:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000bc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000bc6:	fb03 f102 	mul.w	r1, r3, r2
 8000bca:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000bce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000bd2:	fb02 f303 	mul.w	r3, r2, r3
 8000bd6:	18ca      	adds	r2, r1, r3
 8000bd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000bdc:	fba3 8903 	umull	r8, r9, r3, r3
 8000be0:	eb02 0309 	add.w	r3, r2, r9
 8000be4:	4699      	mov	r9, r3
 8000be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000bea:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	17da      	asrs	r2, r3, #31
 8000bf2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000bf6:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000bfa:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000bfe:	4603      	mov	r3, r0
 8000c00:	fb03 f209 	mul.w	r2, r3, r9
 8000c04:	460b      	mov	r3, r1
 8000c06:	fb08 f303 	mul.w	r3, r8, r3
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	fba8 1202 	umull	r1, r2, r8, r2
 8000c12:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000c16:	460a      	mov	r2, r1
 8000c18:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000c1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000c20:	4413      	add	r3, r2
 8000c22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000c26:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000c2a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8000c2e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8000c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c36:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	17da      	asrs	r2, r3, #31
 8000c3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000c42:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000c46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000c4a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000c4e:	462a      	mov	r2, r5
 8000c50:	fb02 f203 	mul.w	r2, r2, r3
 8000c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000c58:	4621      	mov	r1, r4
 8000c5a:	fb01 f303 	mul.w	r3, r1, r3
 8000c5e:	441a      	add	r2, r3
 8000c60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000c64:	4621      	mov	r1, r4
 8000c66:	fba3 1301 	umull	r1, r3, r3, r1
 8000c6a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000c6e:	460b      	mov	r3, r1
 8000c70:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000c78:	18d3      	adds	r3, r2, r3
 8000c7a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000c7e:	f04f 0000 	mov.w	r0, #0
 8000c82:	f04f 0100 	mov.w	r1, #0
 8000c86:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000c8a:	462b      	mov	r3, r5
 8000c8c:	0459      	lsls	r1, r3, #17
 8000c8e:	4623      	mov	r3, r4
 8000c90:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000c94:	4623      	mov	r3, r4
 8000c96:	0458      	lsls	r0, r3, #17
 8000c98:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c9c:	1814      	adds	r4, r2, r0
 8000c9e:	643c      	str	r4, [r7, #64]	@ 0x40
 8000ca0:	414b      	adcs	r3, r1
 8000ca2:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ca4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000ca8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8000cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000cb0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	17da      	asrs	r2, r3, #31
 8000cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000cbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	f04f 0100 	mov.w	r1, #0
 8000cc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000ccc:	00d9      	lsls	r1, r3, #3
 8000cce:	2000      	movs	r0, #0
 8000cd0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000cd4:	1814      	adds	r4, r2, r0
 8000cd6:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000cd8:	414b      	adcs	r3, r1
 8000cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000cdc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000ce0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000ce4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000ce8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000cec:	fb03 f102 	mul.w	r1, r3, r2
 8000cf0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000cf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000cf8:	fb02 f303 	mul.w	r3, r2, r3
 8000cfc:	18ca      	adds	r2, r1, r3
 8000cfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000d02:	fba3 1303 	umull	r1, r3, r3, r3
 8000d06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000d14:	18d3      	adds	r3, r2, r3
 8000d16:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d1e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d22:	b21b      	sxth	r3, r3
 8000d24:	17da      	asrs	r2, r3, #31
 8000d26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000d2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000d2e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000d32:	462b      	mov	r3, r5
 8000d34:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000d38:	4642      	mov	r2, r8
 8000d3a:	fb02 f203 	mul.w	r2, r2, r3
 8000d3e:	464b      	mov	r3, r9
 8000d40:	4621      	mov	r1, r4
 8000d42:	fb01 f303 	mul.w	r3, r1, r3
 8000d46:	4413      	add	r3, r2
 8000d48:	4622      	mov	r2, r4
 8000d4a:	4641      	mov	r1, r8
 8000d4c:	fba2 1201 	umull	r1, r2, r2, r1
 8000d50:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000d54:	460a      	mov	r2, r1
 8000d56:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000d5a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000d5e:	4413      	add	r3, r2
 8000d60:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000d64:	f04f 0000 	mov.w	r0, #0
 8000d68:	f04f 0100 	mov.w	r1, #0
 8000d6c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000d70:	4623      	mov	r3, r4
 8000d72:	0a18      	lsrs	r0, r3, #8
 8000d74:	462b      	mov	r3, r5
 8000d76:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000d7a:	462b      	mov	r3, r5
 8000d7c:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8000d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	17da      	asrs	r2, r3, #31
 8000d8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000d8e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000d92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000d96:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000d9a:	464a      	mov	r2, r9
 8000d9c:	fb02 f203 	mul.w	r2, r2, r3
 8000da0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000da4:	4644      	mov	r4, r8
 8000da6:	fb04 f303 	mul.w	r3, r4, r3
 8000daa:	441a      	add	r2, r3
 8000dac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000db0:	4644      	mov	r4, r8
 8000db2:	fba3 4304 	umull	r4, r3, r3, r4
 8000db6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000dba:	4623      	mov	r3, r4
 8000dbc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000dc0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000dc4:	18d3      	adds	r3, r2, r3
 8000dc6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000dd6:	464c      	mov	r4, r9
 8000dd8:	0323      	lsls	r3, r4, #12
 8000dda:	4644      	mov	r4, r8
 8000ddc:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000de0:	4644      	mov	r4, r8
 8000de2:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000de4:	1884      	adds	r4, r0, r2
 8000de6:	633c      	str	r4, [r7, #48]	@ 0x30
 8000de8:	eb41 0303 	adc.w	r3, r1, r3
 8000dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8000dee:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000df2:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8000df6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000dfa:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000dfe:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000e02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e0a:	88db      	ldrh	r3, [r3, #6]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000e14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000e18:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000e1c:	462b      	mov	r3, r5
 8000e1e:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000e22:	4642      	mov	r2, r8
 8000e24:	fb02 f203 	mul.w	r2, r2, r3
 8000e28:	464b      	mov	r3, r9
 8000e2a:	4621      	mov	r1, r4
 8000e2c:	fb01 f303 	mul.w	r3, r1, r3
 8000e30:	4413      	add	r3, r2
 8000e32:	4622      	mov	r2, r4
 8000e34:	4641      	mov	r1, r8
 8000e36:	fba2 1201 	umull	r1, r2, r2, r1
 8000e3a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000e3e:	460a      	mov	r2, r1
 8000e40:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000e44:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000e48:	4413      	add	r3, r2
 8000e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000e5a:	4629      	mov	r1, r5
 8000e5c:	104a      	asrs	r2, r1, #1
 8000e5e:	4629      	mov	r1, r5
 8000e60:	17cb      	asrs	r3, r1, #31
 8000e62:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8000e66:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e148      	b.n	8001104 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8000e72:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e76:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000e7a:	17da      	asrs	r2, r3, #31
 8000e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000e80:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000e84:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8000e88:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000e8c:	105b      	asrs	r3, r3, #1
 8000e8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000e92:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000e96:	07db      	lsls	r3, r3, #31
 8000e98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000e9c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ea0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000ea4:	4621      	mov	r1, r4
 8000ea6:	1a89      	subs	r1, r1, r2
 8000ea8:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000eaa:	4629      	mov	r1, r5
 8000eac:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000eb2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000eb6:	4622      	mov	r2, r4
 8000eb8:	462b      	mov	r3, r5
 8000eba:	1891      	adds	r1, r2, r2
 8000ebc:	6239      	str	r1, [r7, #32]
 8000ebe:	415b      	adcs	r3, r3
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ec2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ec6:	4621      	mov	r1, r4
 8000ec8:	1851      	adds	r1, r2, r1
 8000eca:	61b9      	str	r1, [r7, #24]
 8000ecc:	4629      	mov	r1, r5
 8000ece:	414b      	adcs	r3, r1
 8000ed0:	61fb      	str	r3, [r7, #28]
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	f04f 0300 	mov.w	r3, #0
 8000eda:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000ede:	4649      	mov	r1, r9
 8000ee0:	018b      	lsls	r3, r1, #6
 8000ee2:	4641      	mov	r1, r8
 8000ee4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000ee8:	4641      	mov	r1, r8
 8000eea:	018a      	lsls	r2, r1, #6
 8000eec:	4641      	mov	r1, r8
 8000eee:	1889      	adds	r1, r1, r2
 8000ef0:	6139      	str	r1, [r7, #16]
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	eb43 0101 	adc.w	r1, r3, r1
 8000ef8:	6179      	str	r1, [r7, #20]
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000f06:	4649      	mov	r1, r9
 8000f08:	008b      	lsls	r3, r1, #2
 8000f0a:	4641      	mov	r1, r8
 8000f0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000f10:	4641      	mov	r1, r8
 8000f12:	008a      	lsls	r2, r1, #2
 8000f14:	4610      	mov	r0, r2
 8000f16:	4619      	mov	r1, r3
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4622      	mov	r2, r4
 8000f1c:	189b      	adds	r3, r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	460b      	mov	r3, r1
 8000f22:	462a      	mov	r2, r5
 8000f24:	eb42 0303 	adc.w	r3, r2, r3
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	f04f 0300 	mov.w	r3, #0
 8000f32:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000f36:	4649      	mov	r1, r9
 8000f38:	008b      	lsls	r3, r1, #2
 8000f3a:	4641      	mov	r1, r8
 8000f3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000f40:	4641      	mov	r1, r8
 8000f42:	008a      	lsls	r2, r1, #2
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4622      	mov	r2, r4
 8000f4c:	189b      	adds	r3, r3, r2
 8000f4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8000f50:	462b      	mov	r3, r5
 8000f52:	460a      	mov	r2, r1
 8000f54:	eb42 0303 	adc.w	r3, r2, r3
 8000f58:	677b      	str	r3, [r7, #116]	@ 0x74
 8000f5a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000f5e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000f62:	f7ff f985 	bl	8000270 <__aeabi_ldivmod>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8000f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f72:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	17da      	asrs	r2, r3, #31
 8000f7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000f7c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000f7e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000f82:	f04f 0000 	mov.w	r0, #0
 8000f86:	f04f 0100 	mov.w	r1, #0
 8000f8a:	0b50      	lsrs	r0, r2, #13
 8000f8c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000f90:	1359      	asrs	r1, r3, #13
 8000f92:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000f96:	462b      	mov	r3, r5
 8000f98:	fb00 f203 	mul.w	r2, r0, r3
 8000f9c:	4623      	mov	r3, r4
 8000f9e:	fb03 f301 	mul.w	r3, r3, r1
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4622      	mov	r2, r4
 8000fa6:	fba2 1200 	umull	r1, r2, r2, r0
 8000faa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000fae:	460a      	mov	r2, r1
 8000fb0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000fb4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000fb8:	4413      	add	r3, r2
 8000fba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000fbe:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	f04f 0100 	mov.w	r1, #0
 8000fca:	0b50      	lsrs	r0, r2, #13
 8000fcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000fd0:	1359      	asrs	r1, r3, #13
 8000fd2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000fd6:	462b      	mov	r3, r5
 8000fd8:	fb00 f203 	mul.w	r2, r0, r3
 8000fdc:	4623      	mov	r3, r4
 8000fde:	fb03 f301 	mul.w	r3, r3, r1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4622      	mov	r2, r4
 8000fe6:	fba2 1200 	umull	r1, r2, r2, r0
 8000fea:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000fee:	460a      	mov	r2, r1
 8000ff0:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000ff4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800100a:	4621      	mov	r1, r4
 800100c:	0e4a      	lsrs	r2, r1, #25
 800100e:	4629      	mov	r1, r5
 8001010:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001014:	4629      	mov	r1, r5
 8001016:	164b      	asrs	r3, r1, #25
 8001018:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 800101c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001020:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001024:	b21b      	sxth	r3, r3
 8001026:	17da      	asrs	r2, r3, #31
 8001028:	663b      	str	r3, [r7, #96]	@ 0x60
 800102a:	667a      	str	r2, [r7, #100]	@ 0x64
 800102c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001030:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001034:	462a      	mov	r2, r5
 8001036:	fb02 f203 	mul.w	r2, r2, r3
 800103a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800103e:	4621      	mov	r1, r4
 8001040:	fb01 f303 	mul.w	r3, r1, r3
 8001044:	4413      	add	r3, r2
 8001046:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800104a:	4621      	mov	r1, r4
 800104c:	fba2 1201 	umull	r1, r2, r2, r1
 8001050:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001054:	460a      	mov	r2, r1
 8001056:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800105a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800105e:	4413      	add	r3, r2
 8001060:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001070:	4621      	mov	r1, r4
 8001072:	0cca      	lsrs	r2, r1, #19
 8001074:	4629      	mov	r1, r5
 8001076:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800107a:	4629      	mov	r1, r5
 800107c:	14cb      	asrs	r3, r1, #19
 800107e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001082:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001086:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800108a:	1884      	adds	r4, r0, r2
 800108c:	65bc      	str	r4, [r7, #88]	@ 0x58
 800108e:	eb41 0303 	adc.w	r3, r1, r3
 8001092:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001094:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001098:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800109c:	4621      	mov	r1, r4
 800109e:	1889      	adds	r1, r1, r2
 80010a0:	6539      	str	r1, [r7, #80]	@ 0x50
 80010a2:	4629      	mov	r1, r5
 80010a4:	eb43 0101 	adc.w	r1, r3, r1
 80010a8:	6579      	str	r1, [r7, #84]	@ 0x54
 80010aa:	f04f 0000 	mov.w	r0, #0
 80010ae:	f04f 0100 	mov.w	r1, #0
 80010b2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80010b6:	4623      	mov	r3, r4
 80010b8:	0a18      	lsrs	r0, r3, #8
 80010ba:	462b      	mov	r3, r5
 80010bc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80010c0:	462b      	mov	r3, r5
 80010c2:	1219      	asrs	r1, r3, #8
 80010c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80010c8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	17da      	asrs	r2, r3, #31
 80010d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80010d2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80010e0:	464c      	mov	r4, r9
 80010e2:	0123      	lsls	r3, r4, #4
 80010e4:	4644      	mov	r4, r8
 80010e6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80010ea:	4644      	mov	r4, r8
 80010ec:	0122      	lsls	r2, r4, #4
 80010ee:	1884      	adds	r4, r0, r2
 80010f0:	603c      	str	r4, [r7, #0]
 80010f2:	eb41 0303 	adc.w	r3, r1, r3
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80010fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001100:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8001104:	4618      	mov	r0, r3
 8001106:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800110a:	46bd      	mov	sp, r7
 800110c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001110 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001122:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	039a      	lsls	r2, r3, #14
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800112e:	051b      	lsls	r3, r3, #20
 8001130:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001138:	4619      	mov	r1, r3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	fb01 f303 	mul.w	r3, r1, r3
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001146:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 800114e:	4611      	mov	r1, r2
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	fb01 f202 	mul.w	r2, r1, r2
 8001156:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001158:	68f9      	ldr	r1, [r7, #12]
 800115a:	7f09      	ldrb	r1, [r1, #28]
 800115c:	4608      	mov	r0, r1
 800115e:	6979      	ldr	r1, [r7, #20]
 8001160:	fb00 f101 	mul.w	r1, r0, r1
 8001164:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001166:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800116a:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800116e:	1292      	asrs	r2, r2, #10
 8001170:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001174:	68f9      	ldr	r1, [r7, #12]
 8001176:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800117a:	fb01 f202 	mul.w	r2, r1, r2
 800117e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001182:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	13db      	asrs	r3, r3, #15
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	13d2      	asrs	r2, r2, #15
 8001192:	fb02 f303 	mul.w	r3, r2, r3
 8001196:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	7e12      	ldrb	r2, [r2, #24]
 800119c:	fb02 f303 	mul.w	r3, r2, r3
 80011a0:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80011ae:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 80011b6:	bfa8      	it	ge
 80011b8:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 80011bc:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	131b      	asrs	r3, r3, #12
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	371c      	adds	r7, #28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b08c      	sub	sp, #48	@ 0x30
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80011e2:	2b60      	cmp	r3, #96	@ 0x60
 80011e4:	d007      	beq.n	80011f6 <bmp280_read_fixed+0x28>
		if (humidity)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <bmp280_read_fixed+0x24>
			*humidity = 0;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <bmp280_read_fixed+0x32>
 80011fc:	2308      	movs	r3, #8
 80011fe:	e000      	b.n	8001202 <bmp280_read_fixed+0x34>
 8001200:	2306      	movs	r3, #6
 8001202:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f107 0218 	add.w	r2, r7, #24
 800120c:	21f7      	movs	r1, #247	@ 0xf7
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f7ff fa60 	bl	80006d4 <read_data>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <bmp280_read_fixed+0x50>
		return false;
 800121a:	2300      	movs	r3, #0
 800121c:	e038      	b.n	8001290 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800121e:	7e3b      	ldrb	r3, [r7, #24]
 8001220:	031a      	lsls	r2, r3, #12
 8001222:	7e7b      	ldrb	r3, [r7, #25]
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	4313      	orrs	r3, r2
 8001228:	7eba      	ldrb	r2, [r7, #26]
 800122a:	0912      	lsrs	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	4313      	orrs	r3, r2
 8001230:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001232:	7efb      	ldrb	r3, [r7, #27]
 8001234:	031a      	lsls	r2, r3, #12
 8001236:	7f3b      	ldrb	r3, [r7, #28]
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	4313      	orrs	r3, r2
 800123c:	7f7a      	ldrb	r2, [r7, #29]
 800123e:	0912      	lsrs	r2, r2, #4
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	4313      	orrs	r3, r2
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	461a      	mov	r2, r3
 800124c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f7ff fc67 	bl	8000b22 <compensate_temperature>
 8001254:	4602      	mov	r2, r0
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	461a      	mov	r2, r3
 800125e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f7ff fc97 	bl	8000b94 <compensate_pressure>
 8001266:	4602      	mov	r2, r0
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	601a      	str	r2, [r3, #0]

	if (humidity) {
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00d      	beq.n	800128e <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001272:	7fbb      	ldrb	r3, [r7, #30]
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	7ffa      	ldrb	r2, [r7, #31]
 8001278:	4313      	orrs	r3, r2
 800127a:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	461a      	mov	r2, r3
 8001280:	6a39      	ldr	r1, [r7, #32]
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f7ff ff44 	bl	8001110 <compensate_humidity>
 8001288:	4602      	mov	r2, r0
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	601a      	str	r2, [r3, #0]
	}

	return true;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3730      	adds	r7, #48	@ 0x30
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <calculate_crc16>:
#include <stdio.h>

// CRC16-CCITT polynomial: 0x1021
#define CRC16_POLY 0x1021

uint16_t calculate_crc16(const uint8_t *data, size_t length) {
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 80012a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012a6:	82fb      	strh	r3, [r7, #22]
    
    for (size_t i = 0; i < length; i++) {
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	e029      	b.n	8001302 <calculate_crc16+0x6a>
        crc ^= (uint16_t)data[i] << 8;
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4413      	add	r3, r2
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012c0:	4053      	eors	r3, r2
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	82fb      	strh	r3, [r7, #22]
        
        for (int j = 0; j < 8; j++) {
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	e014      	b.n	80012f6 <calculate_crc16+0x5e>
            if (crc & 0x8000) {
 80012cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	da0a      	bge.n	80012ea <calculate_crc16+0x52>
                crc = (crc << 1) ^ CRC16_POLY;
 80012d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	b21b      	sxth	r3, r3
 80012dc:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 80012e0:	f083 0301 	eor.w	r3, r3, #1
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	82fb      	strh	r3, [r7, #22]
 80012e8:	e002      	b.n	80012f0 <calculate_crc16+0x58>
            } else {
                crc <<= 1;
 80012ea:	8afb      	ldrh	r3, [r7, #22]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	82fb      	strh	r3, [r7, #22]
        for (int j = 0; j < 8; j++) {
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3301      	adds	r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2b07      	cmp	r3, #7
 80012fa:	dde7      	ble.n	80012cc <calculate_crc16+0x34>
    for (size_t i = 0; i < length; i++) {
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	3301      	adds	r3, #1
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	d3d1      	bcc.n	80012ae <calculate_crc16+0x16>
            }
        }
    }
    
    return crc;
 800130a:	8afb      	ldrh	r3, [r7, #22]
}
 800130c:	4618      	mov	r0, r3
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <create_uart_tx_packet>:

uart_tx_logging_t create_uart_tx_packet(const raw_data_t *raw_data) {
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
    uart_tx_logging_t tx_packet;
    
    // Copy raw data
    tx_packet.live_data = *raw_data;
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	6810      	ldr	r0, [r2, #0]
 800132a:	6851      	ldr	r1, [r2, #4]
 800132c:	c303      	stmia	r3!, {r0, r1}
 800132e:	8912      	ldrh	r2, [r2, #8]
 8001330:	801a      	strh	r2, [r3, #0]
    
    // Calculate CRC16 over the raw data portion
    uint8_t *data_ptr = (uint8_t *)&tx_packet.live_data;
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	617b      	str	r3, [r7, #20]
    tx_packet.CRC16 = calculate_crc16(data_ptr, sizeof(raw_data_t));
 8001338:	210a      	movs	r1, #10
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f7ff ffac 	bl	8001298 <calculate_crc16>
 8001340:	4603      	mov	r3, r0
 8001342:	827b      	strh	r3, [r7, #18]
    
    return tx_packet;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	461c      	mov	r4, r3
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800134e:	6020      	str	r0, [r4, #0]
 8001350:	6061      	str	r1, [r4, #4]
 8001352:	60a2      	str	r2, [r4, #8]
}
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	371c      	adds	r7, #28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd90      	pop	{r4, r7, pc}

0800135c <cobs_encode>:

size_t cobs_encode(const uint8_t *input, size_t input_size, uint8_t *output, size_t output_size) {
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	@ 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
    if (input_size == 0 || output_size < input_size + 2) {
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d004      	beq.n	800137a <cobs_encode+0x1e>
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	3302      	adds	r3, #2
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d201      	bcs.n	800137e <cobs_encode+0x22>
        return 0; // Not enough space
 800137a:	2300      	movs	r3, #0
 800137c:	e060      	b.n	8001440 <cobs_encode+0xe4>
    }
    
    size_t read_index = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
    size_t write_index = 1;
 8001382:	2301      	movs	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
    size_t code_index = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
    uint8_t code = 1;
 800138a:	2301      	movs	r3, #1
 800138c:	74fb      	strb	r3, [r7, #19]
    
    while (read_index < input_size) {
 800138e:	e040      	b.n	8001412 <cobs_encode+0xb6>
        if (input[read_index] == 0) {
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	4413      	add	r3, r2
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d110      	bne.n	80013be <cobs_encode+0x62>
            output[code_index] = code;
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	4413      	add	r3, r2
 80013a2:	7cfa      	ldrb	r2, [r7, #19]
 80013a4:	701a      	strb	r2, [r3, #0]
            code = 1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	74fb      	strb	r3, [r7, #19]
            code_index = write_index++;
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	1c5a      	adds	r2, r3, #1
 80013ae:	61ba      	str	r2, [r7, #24]
 80013b0:	617b      	str	r3, [r7, #20]
            if (write_index >= output_size) return 0;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d328      	bcc.n	800140c <cobs_encode+0xb0>
 80013ba:	2300      	movs	r3, #0
 80013bc:	e040      	b.n	8001440 <cobs_encode+0xe4>
        } else {
            output[write_index++] = input[read_index];
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	441a      	add	r2, r3
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	1c59      	adds	r1, r3, #1
 80013c8:	61b9      	str	r1, [r7, #24]
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	440b      	add	r3, r1
 80013ce:	7812      	ldrb	r2, [r2, #0]
 80013d0:	701a      	strb	r2, [r3, #0]
            code++;
 80013d2:	7cfb      	ldrb	r3, [r7, #19]
 80013d4:	3301      	adds	r3, #1
 80013d6:	74fb      	strb	r3, [r7, #19]
            if (write_index >= output_size) return 0;
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d301      	bcc.n	80013e4 <cobs_encode+0x88>
 80013e0:	2300      	movs	r3, #0
 80013e2:	e02d      	b.n	8001440 <cobs_encode+0xe4>
            
            if (code == 0xFF) {
 80013e4:	7cfb      	ldrb	r3, [r7, #19]
 80013e6:	2bff      	cmp	r3, #255	@ 0xff
 80013e8:	d110      	bne.n	800140c <cobs_encode+0xb0>
                output[code_index] = code;
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	4413      	add	r3, r2
 80013f0:	7cfa      	ldrb	r2, [r7, #19]
 80013f2:	701a      	strb	r2, [r3, #0]
                code = 1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	74fb      	strb	r3, [r7, #19]
                code_index = write_index++;
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	61ba      	str	r2, [r7, #24]
 80013fe:	617b      	str	r3, [r7, #20]
                if (write_index >= output_size) return 0;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d301      	bcc.n	800140c <cobs_encode+0xb0>
 8001408:	2300      	movs	r3, #0
 800140a:	e019      	b.n	8001440 <cobs_encode+0xe4>
            }
        }
        read_index++;
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	3301      	adds	r3, #1
 8001410:	61fb      	str	r3, [r7, #28]
    while (read_index < input_size) {
 8001412:	69fa      	ldr	r2, [r7, #28]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	429a      	cmp	r2, r3
 8001418:	d3ba      	bcc.n	8001390 <cobs_encode+0x34>
    }
    
    output[code_index] = code;
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	4413      	add	r3, r2
 8001420:	7cfa      	ldrb	r2, [r7, #19]
 8001422:	701a      	strb	r2, [r3, #0]
    
    // Add delimiter
    if (write_index >= output_size) return 0;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	429a      	cmp	r2, r3
 800142a:	d301      	bcc.n	8001430 <cobs_encode+0xd4>
 800142c:	2300      	movs	r3, #0
 800142e:	e007      	b.n	8001440 <cobs_encode+0xe4>
    output[write_index++] = 0x00;
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	61ba      	str	r2, [r7, #24]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
    
    return write_index;
 800143e:	69bb      	ldr	r3, [r7, #24]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3724      	adds	r7, #36	@ 0x24
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <cobs_decode>:

static size_t cobs_decode(const uint8_t *input, size_t input_size, uint8_t *output, size_t output_size) {
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	@ 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]
    if (input_size < 2 || input[input_size - 1] != 0x00) {
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d906      	bls.n	800146e <cobs_decode+0x22>
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	3b01      	subs	r3, #1
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	4413      	add	r3, r2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <cobs_decode+0x26>
        return 0; // Invalid COBS packet (should end with delimiter)
 800146e:	2300      	movs	r3, #0
 8001470:	e04c      	b.n	800150c <cobs_decode+0xc0>
    }
    
    // Remove delimiter for processing
    input_size--;
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	3b01      	subs	r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
    
    size_t read_index = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
    size_t write_index = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
    
    while (read_index < input_size) {
 8001480:	e03f      	b.n	8001502 <cobs_decode+0xb6>
        uint8_t code = input[read_index++];
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	61fa      	str	r2, [r7, #28]
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	74fb      	strb	r3, [r7, #19]
        
        if (code == 0) {
 8001490:	7cfb      	ldrb	r3, [r7, #19]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <cobs_decode+0x4e>
            return 0; // Invalid: zero found in encoded data
 8001496:	2300      	movs	r3, #0
 8001498:	e038      	b.n	800150c <cobs_decode+0xc0>
        }
        
        for (int i = 1; i < code && read_index < input_size; i++) {
 800149a:	2301      	movs	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	e014      	b.n	80014ca <cobs_decode+0x7e>
            if (write_index >= output_size) return 0;
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d301      	bcc.n	80014ac <cobs_decode+0x60>
 80014a8:	2300      	movs	r3, #0
 80014aa:	e02f      	b.n	800150c <cobs_decode+0xc0>
            output[write_index++] = input[read_index++];
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	61fa      	str	r2, [r7, #28]
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	441a      	add	r2, r3
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	1c59      	adds	r1, r3, #1
 80014ba:	61b9      	str	r1, [r7, #24]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	440b      	add	r3, r1
 80014c0:	7812      	ldrb	r2, [r2, #0]
 80014c2:	701a      	strb	r2, [r3, #0]
        for (int i = 1; i < code && read_index < input_size; i++) {
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3301      	adds	r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	7cfb      	ldrb	r3, [r7, #19]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	da03      	bge.n	80014da <cobs_decode+0x8e>
 80014d2:	69fa      	ldr	r2, [r7, #28]
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d3e2      	bcc.n	80014a0 <cobs_decode+0x54>
        }
        
        if (code < 0xFF && read_index < input_size) {
 80014da:	7cfb      	ldrb	r3, [r7, #19]
 80014dc:	2bff      	cmp	r3, #255	@ 0xff
 80014de:	d010      	beq.n	8001502 <cobs_decode+0xb6>
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d20c      	bcs.n	8001502 <cobs_decode+0xb6>
            if (write_index >= output_size) return 0;
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d301      	bcc.n	80014f4 <cobs_decode+0xa8>
 80014f0:	2300      	movs	r3, #0
 80014f2:	e00b      	b.n	800150c <cobs_decode+0xc0>
            output[write_index++] = 0x00;
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	61ba      	str	r2, [r7, #24]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
    while (read_index < input_size) {
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	429a      	cmp	r2, r3
 8001508:	d3bb      	bcc.n	8001482 <cobs_decode+0x36>
        }
    }
    
    return write_index;
 800150a:	69bb      	ldr	r3, [r7, #24]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3724      	adds	r7, #36	@ 0x24
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <encode_uart_tx_packet>:

size_t encode_uart_tx_packet(const uart_tx_logging_t *tx_packet, uint8_t *encoded_buffer, size_t buffer_size) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b08c      	sub	sp, #48	@ 0x30
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
    // Convert struct to byte array
    uint8_t raw_bytes[sizeof(uart_tx_logging_t)];
    memcpy(raw_bytes, tx_packet, sizeof(uart_tx_logging_t));
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152a:	6810      	ldr	r0, [r2, #0]
 800152c:	6851      	ldr	r1, [r2, #4]
 800152e:	6892      	ldr	r2, [r2, #8]
 8001530:	c307      	stmia	r3!, {r0, r1, r2}
    
    // Calculate CRC for the entire packet
    uint16_t packet_crc = calculate_crc16(raw_bytes, sizeof(uart_tx_logging_t));
 8001532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001536:	210c      	movs	r1, #12
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fead 	bl	8001298 <calculate_crc16>
 800153e:	4603      	mov	r3, r0
 8001540:	847b      	strh	r3, [r7, #34]	@ 0x22
    
    // Create extended packet with CRC
    uint8_t extended_packet[sizeof(uart_tx_logging_t) + sizeof(uint16_t)];
    memcpy(extended_packet, raw_bytes, sizeof(uart_tx_logging_t));
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800154a:	ca07      	ldmia	r2, {r0, r1, r2}
 800154c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    memcpy(extended_packet + sizeof(uart_tx_logging_t), &packet_crc, sizeof(uint16_t));
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	330c      	adds	r3, #12
 8001556:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8001558:	801a      	strh	r2, [r3, #0]
    
    // COBS encode
    return cobs_encode(extended_packet, sizeof(extended_packet), encoded_buffer, buffer_size);
 800155a:	f107 0014 	add.w	r0, r7, #20
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	210e      	movs	r1, #14
 8001564:	f7ff fefa 	bl	800135c <cobs_encode>
 8001568:	4603      	mov	r3, r0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3730      	adds	r7, #48	@ 0x30
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <verify_cobs_encoding>:

bool verify_cobs_encoding(const uint8_t *original_data, size_t original_size, 
                         const uint8_t *encoded_data, size_t encoded_size) {
 8001572:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001576:	b089      	sub	sp, #36	@ 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	466b      	mov	r3, sp
 8001584:	461e      	mov	r6, r3
    uint8_t temp_buffer[original_size * 2 + 10]; // Safe size for re-encoding
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	3305      	adds	r3, #5
 800158a:	0059      	lsls	r1, r3, #1
 800158c:	460b      	mov	r3, r1
 800158e:	3b01      	subs	r3, #1
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	2300      	movs	r3, #0
 8001594:	4688      	mov	r8, r1
 8001596:	4699      	mov	r9, r3
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015ac:	2300      	movs	r3, #0
 80015ae:	460c      	mov	r4, r1
 80015b0:	461d      	mov	r5, r3
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	00eb      	lsls	r3, r5, #3
 80015bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015c0:	00e2      	lsls	r2, r4, #3
 80015c2:	1dcb      	adds	r3, r1, #7
 80015c4:	08db      	lsrs	r3, r3, #3
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	ebad 0d03 	sub.w	sp, sp, r3
 80015cc:	466b      	mov	r3, sp
 80015ce:	3300      	adds	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
    
    size_t re_encoded_size = cobs_encode(original_data, original_size, temp_buffer, sizeof(temp_buffer));
 80015d2:	460b      	mov	r3, r1
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	68b9      	ldr	r1, [r7, #8]
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f7ff febf 	bl	800135c <cobs_encode>
 80015de:	6178      	str	r0, [r7, #20]
    
    if (re_encoded_size != encoded_size) {
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <verify_cobs_encoding+0x7a>
        return false;
 80015e8:	2300      	movs	r3, #0
 80015ea:	e00a      	b.n	8001602 <verify_cobs_encoding+0x90>
    }
    
    return memcmp(temp_buffer, encoded_data, encoded_size) == 0;
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	69b8      	ldr	r0, [r7, #24]
 80015f2:	f007 ff0d 	bl	8009410 <memcmp>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf0c      	ite	eq
 80015fc:	2301      	moveq	r3, #1
 80015fe:	2300      	movne	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	46b5      	mov	sp, r6
}
 8001604:	4618      	mov	r0, r3
 8001606:	3724      	adds	r7, #36	@ 0x24
 8001608:	46bd      	mov	sp, r7
 800160a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800160e <decode_uart_rx_command>:
                       uint8_t *decoded_buffer, size_t buffer_size) {
    return cobs_decode(encoded_data, encoded_size, decoded_buffer, buffer_size);
}

bool decode_uart_rx_command(const uint8_t *encoded_data, size_t encoded_size, 
                           uart_rx_command_t *rx_command) {
 800160e:	b580      	push	{r7, lr}
 8001610:	b08c      	sub	sp, #48	@ 0x30
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
    uint8_t decoded_buffer[sizeof(uart_rx_command_t) + sizeof(uint16_t) + 10];
    
    // Decode COBS data
    size_t decoded_size = cobs_decode(encoded_data, encoded_size, decoded_buffer, sizeof(decoded_buffer));
 800161a:	f107 0218 	add.w	r2, r7, #24
 800161e:	2310      	movs	r3, #16
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f7ff ff12 	bl	800144c <cobs_decode>
 8001628:	62f8      	str	r0, [r7, #44]	@ 0x2c
    
    if (decoded_size < sizeof(uart_rx_command_t)) {
 800162a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162c:	2b03      	cmp	r3, #3
 800162e:	d801      	bhi.n	8001634 <decode_uart_rx_command+0x26>
        return false; // Not enough data
 8001630:	2300      	movs	r3, #0
 8001632:	e02c      	b.n	800168e <decode_uart_rx_command+0x80>
    }
    
    // Extract command structure
    memcpy(rx_command, decoded_buffer, sizeof(uart_rx_command_t));
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	601a      	str	r2, [r3, #0]
    
    // Verify CRC
    uint8_t command_data = rx_command->commandvalue;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	75fb      	strb	r3, [r7, #23]
    uint16_t calculated_crc = calculate_crc16(&command_data, sizeof(uint8_t));
 8001640:	f107 0317 	add.w	r3, r7, #23
 8001644:	2101      	movs	r1, #1
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fe26 	bl	8001298 <calculate_crc16>
 800164c:	4603      	mov	r3, r0
 800164e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    
    if (calculated_crc != rx_command->CRC16) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	885b      	ldrh	r3, [r3, #2]
 8001654:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001656:	429a      	cmp	r2, r3
 8001658:	d001      	beq.n	800165e <decode_uart_rx_command+0x50>
        return false; // CRC mismatch
 800165a:	2300      	movs	r3, #0
 800165c:	e017      	b.n	800168e <decode_uart_rx_command+0x80>
    }
    
    // Additional verification: check if there's a packet CRC after the command structure
    if (decoded_size >= sizeof(uart_rx_command_t) + sizeof(uint16_t)) {
 800165e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001660:	2b05      	cmp	r3, #5
 8001662:	d913      	bls.n	800168c <decode_uart_rx_command+0x7e>
        uint16_t packet_crc;
        memcpy(&packet_crc, decoded_buffer + sizeof(uart_rx_command_t), sizeof(uint16_t));
 8001664:	f107 0318 	add.w	r3, r7, #24
 8001668:	3304      	adds	r3, #4
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	b29b      	uxth	r3, r3
 800166e:	82bb      	strh	r3, [r7, #20]
        
        uint16_t calculated_packet_crc = calculate_crc16(decoded_buffer, sizeof(uart_rx_command_t));
 8001670:	f107 0318 	add.w	r3, r7, #24
 8001674:	2104      	movs	r1, #4
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fe0e 	bl	8001298 <calculate_crc16>
 800167c:	4603      	mov	r3, r0
 800167e:	853b      	strh	r3, [r7, #40]	@ 0x28
        
        if (calculated_packet_crc != packet_crc) {
 8001680:	8abb      	ldrh	r3, [r7, #20]
 8001682:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <decode_uart_rx_command+0x7e>
            return false; // Packet CRC mismatch
 8001688:	2300      	movs	r3, #0
 800168a:	e000      	b.n	800168e <decode_uart_rx_command+0x80>
        }
    }
    
    return true;
 800168c:	2301      	movs	r3, #1
}
 800168e:	4618      	mov	r0, r3
 8001690:	3730      	adds	r7, #48	@ 0x30
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80016a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	4a06      	ldr	r2, [pc, #24]	@ (80016c8 <vApplicationGetIdleTaskMemory+0x30>)
 80016ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2280      	movs	r2, #128	@ 0x80
 80016b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	2000007c 	.word	0x2000007c
 80016c8:	2000011c 	.word	0x2000011c

080016cc <i2c_mux_reset>:
// All times are defined using milliseconds
#define I2C_MUX_TIMEOUT 1		// Depends on bit rate. At 400kHz, 1ms should be fine
#define I2C_MUX_RESET_TIME_LOW 1	// Minimum 6ns reset pulse according to datasheet
#define I2C_MUX_RESET_TIME_HIGH 0	// Start condition can begin immediately after reset

int i2c_mux_reset(i2c_mux_t* mux) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	if (mux->rst_port == NULL || mux->rst_pin == 0) return 1;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <i2c_mux_reset+0x18>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	891b      	ldrh	r3, [r3, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <i2c_mux_reset+0x1c>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e01a      	b.n	800171e <i2c_mux_reset+0x52>
	
	// Pull reset pin low
	HAL_GPIO_WritePin(mux->rst_port, mux->rst_pin, GPIO_PIN_RESET);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6858      	ldr	r0, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	891b      	ldrh	r3, [r3, #8]
 80016f0:	2200      	movs	r2, #0
 80016f2:	4619      	mov	r1, r3
 80016f4:	f002 fea8 	bl	8004448 <HAL_GPIO_WritePin>
	HAL_Delay(I2C_MUX_RESET_TIME_LOW);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f001 ffab 	bl	8003654 <HAL_Delay>

	// Bring multiplexer out of reset
	HAL_GPIO_WritePin(mux->rst_port, mux->rst_pin, GPIO_PIN_SET);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6858      	ldr	r0, [r3, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	891b      	ldrh	r3, [r3, #8]
 8001706:	2201      	movs	r2, #1
 8001708:	4619      	mov	r1, r3
 800170a:	f002 fe9d 	bl	8004448 <HAL_GPIO_WritePin>
	HAL_Delay(I2C_MUX_RESET_TIME_HIGH);
 800170e:	2000      	movs	r0, #0
 8001710:	f001 ffa0 	bl	8003654 <HAL_Delay>

	// Ensure all channels are disabled by default
	return i2c_mux_select_multi(mux, 0);
 8001714:	2100      	movs	r1, #0
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f805 	bl	8001726 <i2c_mux_select_multi>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <i2c_mux_select_multi>:

int i2c_mux_select_multi(i2c_mux_t* mux, uint8_t mask) {
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af02      	add	r7, sp, #8
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	460b      	mov	r3, r1
 8001730:	70fb      	strb	r3, [r7, #3]
	if (mux->hi2c == NULL) return 1;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <i2c_mux_select_multi+0x18>
 800173a:	2301      	movs	r3, #1
 800173c:	e02f      	b.n	800179e <i2c_mux_select_multi+0x78>

	// Transmit bitmask to multiplexer
	uint8_t addr = (I2C_MUX_BASE_ADDR + mux->addr_offset) << 1;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7a9b      	ldrb	r3, [r3, #10]
 8001742:	3370      	adds	r3, #112	@ 0x70
 8001744:	b2db      	uxtb	r3, r3
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef res;
	res = HAL_I2C_Master_Transmit(mux->hi2c, addr, &mask, 1, I2C_MUX_TIMEOUT);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	b299      	uxth	r1, r3
 8001752:	1cfa      	adds	r2, r7, #3
 8001754:	2301      	movs	r3, #1
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2301      	movs	r3, #1
 800175a:	f002 ff29 	bl	80045b0 <HAL_I2C_Master_Transmit>
 800175e:	4603      	mov	r3, r0
 8001760:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK) return 1;
 8001762:	7bbb      	ldrb	r3, [r7, #14]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <i2c_mux_select_multi+0x46>
 8001768:	2301      	movs	r3, #1
 800176a:	e018      	b.n	800179e <i2c_mux_select_multi+0x78>

	// Read back bitmask from multiplexer to verify
	uint8_t mask_check = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	737b      	strb	r3, [r7, #13]
	res = HAL_I2C_Master_Receive(mux->hi2c, addr, &mask_check, 1, I2C_MUX_TIMEOUT);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	b299      	uxth	r1, r3
 8001778:	f107 020d 	add.w	r2, r7, #13
 800177c:	2301      	movs	r3, #1
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	2301      	movs	r3, #1
 8001782:	f003 f82d 	bl	80047e0 <HAL_I2C_Master_Receive>
 8001786:	4603      	mov	r3, r0
 8001788:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK || mask_check != mask) return 1;
 800178a:	7bbb      	ldrb	r3, [r7, #14]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d103      	bne.n	8001798 <i2c_mux_select_multi+0x72>
 8001790:	7b7a      	ldrb	r2, [r7, #13]
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <i2c_mux_select_multi+0x76>
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <i2c_mux_select_multi+0x78>
	return 0;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <i2c_mux_select>:

int i2c_mux_select(i2c_mux_t* mux, int ch) {
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b084      	sub	sp, #16
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]

	// If ch is in range 0-7 then one channel is enabled, else all are disabled
	uint8_t mask = 1 << ch;
 80017b0:	2201      	movs	r2, #1
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	73fb      	strb	r3, [r7, #15]
	return i2c_mux_select_multi(mux, mask);
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	4619      	mov	r1, r3
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ffb1 	bl	8001726 <i2c_mux_select_multi>
 80017c4:	4603      	mov	r3, r0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <MAX6650_Init>:
static bool max6650_write_register(max6650_handle_t *handle, uint8_t reg, uint8_t data);
static bool max6650_read_register(max6650_handle_t *handle, uint8_t reg, uint8_t *data);
static uint16_t calculate_rpm_from_tacho(uint8_t tacho_count, max6650_kscale_t k_scale);

bool MAX6650_Init(max6650_handle_t *handle, max6650_config_t *config)
{
 80017ce:	b590      	push	{r4, r7, lr}
 80017d0:	b085      	sub	sp, #20
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
    if (handle == NULL || config == NULL || config->hi2c == NULL) {
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d006      	beq.n	80017ec <MAX6650_Init+0x1e>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <MAX6650_Init+0x1e>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <MAX6650_Init+0x22>
        return false;
 80017ec:	2300      	movs	r3, #0
 80017ee:	e05f      	b.n	80018b0 <MAX6650_Init+0xe2>
    }

    // Copy configuration
    handle->config = *config;
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	4614      	mov	r4, r2
 80017f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    handle->i2c_address = get_i2c_address(config->add_line_connection);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	791b      	ldrb	r3, [r3, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	f000 f903 	bl	8001a0c <get_i2c_address>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	741a      	strb	r2, [r3, #16]
    handle->initialized = false;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	745a      	strb	r2, [r3, #17]

    // Set default timeout if not specified
    if (handle->config.i2c_timeout == 0) {
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d103      	bne.n	8001824 <MAX6650_Init+0x56>
        handle->config.i2c_timeout = MAX6650_DEFAULT_TIMEOUT;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001822:	60da      	str	r2, [r3, #12]
    }

    // Configure the MAX6650
    uint8_t config_byte = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	73fb      	strb	r3, [r7, #15]
    config_byte |= (config->operating_mode & 0x03) << MAX6650_CONFIG_MODE_SHIFT;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	795b      	ldrb	r3, [r3, #5]
 800182c:	b25b      	sxtb	r3, r3
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	b25b      	sxtb	r3, r3
 8001832:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001836:	b25a      	sxtb	r2, r3
 8001838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183c:	4313      	orrs	r3, r2
 800183e:	b25b      	sxtb	r3, r3
 8001840:	73fb      	strb	r3, [r7, #15]
    config_byte |= (config->fan_voltage & 0x01) << MAX6650_CONFIG_VOLTAGE_SHIFT;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	799b      	ldrb	r3, [r3, #6]
 8001846:	b25b      	sxtb	r3, r3
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	b25b      	sxtb	r3, r3
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	b25a      	sxtb	r2, r3
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	4313      	orrs	r3, r2
 8001858:	b25b      	sxtb	r3, r3
 800185a:	73fb      	strb	r3, [r7, #15]
    config_byte |= (config->k_scale & 0x07);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	79db      	ldrb	r3, [r3, #7]
 8001860:	b25b      	sxtb	r3, r3
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	b25a      	sxtb	r2, r3
 8001868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186c:	4313      	orrs	r3, r2
 800186e:	b25b      	sxtb	r3, r3
 8001870:	73fb      	strb	r3, [r7, #15]

    // Write configuration register
    if (!max6650_write_register(handle, MAX6650_CONFIG_REG, config_byte)) {
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	461a      	mov	r2, r3
 8001876:	2102      	movs	r1, #2
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f8eb 	bl	8001a54 <max6650_write_register>
 800187e:	4603      	mov	r3, r0
 8001880:	f083 0301 	eor.w	r3, r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MAX6650_Init+0xc0>
        return false;
 800188a:	2300      	movs	r3, #0
 800188c:	e010      	b.n	80018b0 <MAX6650_Init+0xe2>
    }

    // Set count time register
    if (!max6650_write_register(handle, MAX6650_COUNT_REG, MAX6650_DEFAULT_COUNT_TIME)) {
 800188e:	2202      	movs	r2, #2
 8001890:	2116      	movs	r1, #22
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f8de 	bl	8001a54 <max6650_write_register>
 8001898:	4603      	mov	r3, r0
 800189a:	f083 0301 	eor.w	r3, r3, #1
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MAX6650_Init+0xda>
        return false;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e003      	b.n	80018b0 <MAX6650_Init+0xe2>
    }

    handle->initialized = true;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	745a      	strb	r2, [r3, #17]
    return true;
 80018ae:	2301      	movs	r3, #1
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd90      	pop	{r4, r7, pc}

080018b8 <MAX6650_ReadData>:

bool MAX6650_ReadData(max6650_handle_t *handle, max6650_data_t *data)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
    if (handle == NULL || data == NULL || !handle->initialized) {
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d009      	beq.n	80018dc <MAX6650_ReadData+0x24>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d006      	beq.n	80018dc <MAX6650_ReadData+0x24>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	7c5b      	ldrb	r3, [r3, #17]
 80018d2:	f083 0301 	eor.w	r3, r3, #1
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MAX6650_ReadData+0x28>
        return false;
 80018dc:	2300      	movs	r3, #0
 80018de:	e030      	b.n	8001942 <MAX6650_ReadData+0x8a>
    }

    uint8_t tacho_count = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]
    uint8_t alarm_status = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73bb      	strb	r3, [r7, #14]

    // Read tachometer count
    if (!max6650_read_register(handle, MAX6650_TACHO_0_REG, &tacho_count)) {
 80018e8:	f107 030f 	add.w	r3, r7, #15
 80018ec:	461a      	mov	r2, r3
 80018ee:	210c      	movs	r1, #12
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f8d5 	bl	8001aa0 <max6650_read_register>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f083 0301 	eor.w	r3, r3, #1
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MAX6650_ReadData+0x4e>
        return false;
 8001902:	2300      	movs	r3, #0
 8001904:	e01d      	b.n	8001942 <MAX6650_ReadData+0x8a>
    }

    // Read alarm status
    if (!max6650_read_register(handle, MAX6650_ALARM_REG, &alarm_status)) {
 8001906:	f107 030e 	add.w	r3, r7, #14
 800190a:	461a      	mov	r2, r3
 800190c:	210a      	movs	r1, #10
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f8c6 	bl	8001aa0 <max6650_read_register>
 8001914:	4603      	mov	r3, r0
 8001916:	f083 0301 	eor.w	r3, r3, #1
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MAX6650_ReadData+0x6c>
        return false;
 8001920:	2300      	movs	r3, #0
 8001922:	e00e      	b.n	8001942 <MAX6650_ReadData+0x8a>
    }

    // Calculate RPM from tachometer count
    data->fan_rpm = calculate_rpm_from_tacho(tacho_count, handle->config.k_scale);
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	79db      	ldrb	r3, [r3, #7]
 800192a:	4619      	mov	r1, r3
 800192c:	4610      	mov	r0, r2
 800192e:	f000 f8dc 	bl	8001aea <calculate_rpm_from_tacho>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	801a      	strh	r2, [r3, #0]
    data->status_flag = alarm_status;
 800193a:	7bba      	ldrb	r2, [r7, #14]
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	709a      	strb	r2, [r3, #2]

    return true;
 8001940:	2301      	movs	r3, #1
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <MAX6650_ControlFan>:

bool MAX6650_ControlFan(max6650_handle_t *handle, uint8_t control_flag)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL || !handle->initialized) {
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d006      	beq.n	800196a <MAX6650_ControlFan+0x20>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7c5b      	ldrb	r3, [r3, #17]
 8001960:	f083 0301 	eor.w	r3, r3, #1
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MAX6650_ControlFan+0x24>
        return false;
 800196a:	2300      	movs	r3, #0
 800196c:	e049      	b.n	8001a02 <MAX6650_ControlFan+0xb8>
    }

    uint8_t config_byte = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	73bb      	strb	r3, [r7, #14]
    max6650_operating_mode_t new_mode;

    switch (control_flag) {
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d00c      	beq.n	8001992 <MAX6650_ControlFan+0x48>
 8001978:	2b03      	cmp	r3, #3
 800197a:	dc0d      	bgt.n	8001998 <MAX6650_ControlFan+0x4e>
 800197c:	2b01      	cmp	r3, #1
 800197e:	d002      	beq.n	8001986 <MAX6650_ControlFan+0x3c>
 8001980:	2b02      	cmp	r3, #2
 8001982:	d003      	beq.n	800198c <MAX6650_ControlFan+0x42>
 8001984:	e008      	b.n	8001998 <MAX6650_ControlFan+0x4e>
        case CFF_ON:
            new_mode = MAX6650_MODE_SOFTWARE_FULL_ON;
 8001986:	2300      	movs	r3, #0
 8001988:	73fb      	strb	r3, [r7, #15]
            break;
 800198a:	e007      	b.n	800199c <MAX6650_ControlFan+0x52>
        case CFF_OFF:
            new_mode = MAX6650_MODE_SOFTWARE_OFF;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
            break;
 8001990:	e004      	b.n	800199c <MAX6650_ControlFan+0x52>
        case CFF_AUTO:
            new_mode = MAX6650_MODE_CLOSED_LOOP;
 8001992:	2302      	movs	r3, #2
 8001994:	73fb      	strb	r3, [r7, #15]
            break;
 8001996:	e001      	b.n	800199c <MAX6650_ControlFan+0x52>
        default:
            return false;
 8001998:	2300      	movs	r3, #0
 800199a:	e032      	b.n	8001a02 <MAX6650_ControlFan+0xb8>
    }

    // Read current configuration
    if (!max6650_read_register(handle, MAX6650_CONFIG_REG, &config_byte)) {
 800199c:	f107 030e 	add.w	r3, r7, #14
 80019a0:	461a      	mov	r2, r3
 80019a2:	2102      	movs	r1, #2
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f87b 	bl	8001aa0 <max6650_read_register>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f083 0301 	eor.w	r3, r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MAX6650_ControlFan+0x70>
        return false;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e023      	b.n	8001a02 <MAX6650_ControlFan+0xb8>
    }

    // Update mode bits
    config_byte &= ~MAX6650_CONFIG_MODE_MASK;
 80019ba:	7bbb      	ldrb	r3, [r7, #14]
 80019bc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	73bb      	strb	r3, [r7, #14]
    config_byte |= (new_mode & 0x03) << MAX6650_CONFIG_MODE_SHIFT;
 80019c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	b25b      	sxtb	r3, r3
 80019cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80019d0:	b25a      	sxtb	r2, r3
 80019d2:	7bbb      	ldrb	r3, [r7, #14]
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	4313      	orrs	r3, r2
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	73bb      	strb	r3, [r7, #14]

    // Write updated configuration
    if (!max6650_write_register(handle, MAX6650_CONFIG_REG, config_byte)) {
 80019de:	7bbb      	ldrb	r3, [r7, #14]
 80019e0:	461a      	mov	r2, r3
 80019e2:	2102      	movs	r1, #2
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f835 	bl	8001a54 <max6650_write_register>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f083 0301 	eor.w	r3, r3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MAX6650_ControlFan+0xb0>
        return false;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e003      	b.n	8001a02 <MAX6650_ControlFan+0xb8>
    }

    // Update handle configuration
    handle->config.operating_mode = new_mode;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	7bfa      	ldrb	r2, [r7, #15]
 80019fe:	715a      	strb	r2, [r3, #5]
    return true;
 8001a00:	2301      	movs	r3, #1
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <get_i2c_address>:
}

// Private function implementations

static uint8_t get_i2c_address(max6650_add_line_t add_line)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
    switch (add_line) {
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d813      	bhi.n	8001a44 <get_i2c_address+0x38>
 8001a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a24 <get_i2c_address+0x18>)
 8001a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a22:	bf00      	nop
 8001a24:	08001a35 	.word	0x08001a35
 8001a28:	08001a39 	.word	0x08001a39
 8001a2c:	08001a3d 	.word	0x08001a3d
 8001a30:	08001a41 	.word	0x08001a41
        case MAX6650_ADD_LINE_GND:
            return MAX6650_I2C_ADDR_GND;
 8001a34:	2348      	movs	r3, #72	@ 0x48
 8001a36:	e006      	b.n	8001a46 <get_i2c_address+0x3a>
        case MAX6650_ADD_LINE_VCC:
            return MAX6650_I2C_ADDR_VCC;
 8001a38:	234b      	movs	r3, #75	@ 0x4b
 8001a3a:	e004      	b.n	8001a46 <get_i2c_address+0x3a>
        case MAX6650_ADD_LINE_NOT_CONNECTED:
            return MAX6650_I2C_ADDR_NC;
 8001a3c:	231b      	movs	r3, #27
 8001a3e:	e002      	b.n	8001a46 <get_i2c_address+0x3a>
        case MAX6650_ADD_LINE_RES10K:
            return MAX6650_I2C_ADDR_RES10K;
 8001a40:	231f      	movs	r3, #31
 8001a42:	e000      	b.n	8001a46 <get_i2c_address+0x3a>
        default:
            return MAX6650_I2C_ADDR_GND;
 8001a44:	2348      	movs	r3, #72	@ 0x48
    }
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <max6650_write_register>:
        default:                return 4;
    }
}

static bool max6650_write_register(max6650_handle_t *handle, uint8_t reg, uint8_t data)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af04      	add	r7, sp, #16
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	70fb      	strb	r3, [r7, #3]
 8001a60:	4613      	mov	r3, r2
 8001a62:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Write(handle->config.hi2c, 
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6818      	ldr	r0, [r3, #0]
                               handle->i2c_address << 1, 
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	7c1b      	ldrb	r3, [r3, #16]
    status = HAL_I2C_Mem_Write(handle->config.hi2c, 
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	b299      	uxth	r1, r3
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	9302      	str	r3, [sp, #8]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	1cbb      	adds	r3, r7, #2
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2301      	movs	r3, #1
 8001a84:	f002 ffa2 	bl	80049cc <HAL_I2C_Mem_Write>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	73fb      	strb	r3, [r7, #15]
                               reg, 
                               I2C_MEMADD_SIZE_8BIT, 
                               &data, 
                               1, 
                               handle->config.i2c_timeout);
    return (status == HAL_OK);
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	bf0c      	ite	eq
 8001a92:	2301      	moveq	r3, #1
 8001a94:	2300      	movne	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <max6650_read_register>:

static bool max6650_read_register(max6650_handle_t *handle, uint8_t reg, uint8_t *data)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	@ 0x28
 8001aa4:	af04      	add	r7, sp, #16
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Read(handle->config.hi2c, 
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6818      	ldr	r0, [r3, #0]
                              handle->i2c_address << 1, 
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	7c1b      	ldrb	r3, [r3, #16]
    status = HAL_I2C_Mem_Read(handle->config.hi2c, 
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	b299      	uxth	r1, r3
 8001aba:	7afb      	ldrb	r3, [r7, #11]
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	9302      	str	r3, [sp, #8]
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2301      	movs	r3, #1
 8001ace:	f003 f891 	bl	8004bf4 <HAL_I2C_Mem_Read>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	75fb      	strb	r3, [r7, #23]
                              reg, 
                              I2C_MEMADD_SIZE_8BIT, 
                              data, 
                              1, 
                              handle->config.i2c_timeout);
    return (status == HAL_OK);
 8001ad6:	7dfb      	ldrb	r3, [r7, #23]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <calculate_rpm_from_tacho>:

static uint16_t calculate_rpm_from_tacho(uint8_t tacho_count, max6650_kscale_t k_scale)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	460a      	mov	r2, r1
 8001af4:	71fb      	strb	r3, [r7, #7]
 8001af6:	4613      	mov	r3, r2
 8001af8:	71bb      	strb	r3, [r7, #6]
    if (tacho_count == 0) {
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <calculate_rpm_from_tacho+0x1a>
        return 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	e00a      	b.n	8001b1a <calculate_rpm_from_tacho+0x30>
    }

    // Based on datasheet formula: FanSpeed = (tacho / 2) x count_t
    // Then multiply by 60 to convert from RPS to RPM
    uint16_t rps = (tacho_count / 2) / MAX6650_DEFAULT_COUNT_TIME;
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	089b      	lsrs	r3, r3, #2
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	81fb      	strh	r3, [r7, #14]
    uint16_t rpm = rps * 60;
 8001b0c:	89fb      	ldrh	r3, [r7, #14]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	0112      	lsls	r2, r2, #4
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	81bb      	strh	r3, [r7, #12]

    return rpm;
 8001b18:	89bb      	ldrh	r3, [r7, #12]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <bmp280_multi_init>:
                       GPIO_TypeDef *rst_port,
                       uint16_t rst_pin,
                       uint8_t mux_addr_offset,
                       uint8_t sensor_addresses[NUM_BMP280_SENSORS],
                       uint8_t sensor_channels[NUM_BMP280_SENSORS])
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	807b      	strh	r3, [r7, #2]
    if (system == NULL || hi2c == NULL || sensor_addresses == NULL || sensor_channels == NULL) {
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d008      	beq.n	8001b4c <bmp280_multi_init+0x26>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <bmp280_multi_init+0x26>
 8001b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <bmp280_multi_init+0x26>
 8001b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <bmp280_multi_init+0x2a>
        return false;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	e08f      	b.n	8001c70 <bmp280_multi_init+0x14a>
    }

    // Initialize multiplexer
    system->mux.hi2c = hi2c;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	601a      	str	r2, [r3, #0]
    system->mux.rst_port = rst_port;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	605a      	str	r2, [r3, #4]
    system->mux.rst_pin = rst_pin;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	887a      	ldrh	r2, [r7, #2]
 8001b60:	811a      	strh	r2, [r3, #8]
    system->mux.addr_offset = mux_addr_offset;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b68:	729a      	strb	r2, [r3, #10]

    // Reset multiplexer if reset pin is provided
    if (rst_port != NULL && rst_pin != 0) {
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00b      	beq.n	8001b88 <bmp280_multi_init+0x62>
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d008      	beq.n	8001b88 <bmp280_multi_init+0x62>
        if (i2c_mux_reset(&system->mux) != 0) {
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fda7 	bl	80016cc <i2c_mux_reset>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <bmp280_multi_init+0x62>
            return false;
 8001b84:	2300      	movs	r3, #0
 8001b86:	e073      	b.n	8001c70 <bmp280_multi_init+0x14a>
        }
    }

    // Initialize default parameters for all sensors
    bmp280_init_default_params(&system->sensor_params);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fd54 	bl	800063c <bmp280_init_default_params>
    system->sensor_params.mode = BMP280_MODE_FORCED; // Use forced mode for better control
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144

    // Initialize all sensors
    for (uint8_t i = 0; i < NUM_BMP280_SENSORS; i++) {
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	75fb      	strb	r3, [r7, #23]
 8001ba0:	e05d      	b.n	8001c5e <bmp280_multi_init+0x138>
        // Store channel mapping
        system->sensor_channels[i] = sensor_channels[i];
 8001ba2:	7dfb      	ldrb	r3, [r7, #23]
 8001ba4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ba6:	441a      	add	r2, r3
 8001ba8:	7dfb      	ldrb	r3, [r7, #23]
 8001baa:	7811      	ldrb	r1, [r2, #0]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	460a      	mov	r2, r1
 8001bb2:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a
        
        // Initialize sensor structure
        system->sensors[i].addr = sensor_addresses[i];
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bba:	4413      	add	r3, r2
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	2134      	movs	r1, #52	@ 0x34
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3330      	adds	r3, #48	@ 0x30
 8001bce:	4602      	mov	r2, r0
 8001bd0:	801a      	strh	r2, [r3, #0]
        system->sensors[i].i2c = hi2c;
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	2134      	movs	r1, #52	@ 0x34
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	3334      	adds	r3, #52	@ 0x34
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	601a      	str	r2, [r3, #0]
        
        // Select multiplexer channel
        if (i2c_mux_select(&system->mux, sensor_channels[i]) != 0) {
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	7dfb      	ldrb	r3, [r7, #23]
 8001be8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f7ff fdd9 	bl	80017a6 <i2c_mux_select>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d006      	beq.n	8001c08 <bmp280_multi_init+0xe2>
            system->sensors_initialized[i] = false;
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
            continue;
 8001c06:	e027      	b.n	8001c58 <bmp280_multi_init+0x132>
        }

        // Initialize BMP280 sensor
        if (bmp280_init(&system->sensors[i], &system->sensor_params)) {
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	2234      	movs	r2, #52	@ 0x34
 8001c0c:	fb02 f303 	mul.w	r3, r2, r3
 8001c10:	3308      	adds	r3, #8
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	4413      	add	r3, r2
 8001c16:	1d1a      	adds	r2, r3, #4
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4610      	mov	r0, r2
 8001c22:	f7fe fe87 	bl	8000934 <bmp280_init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00c      	beq.n	8001c46 <bmp280_multi_init+0x120>
            system->sensors_initialized[i] = true;
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4413      	add	r3, r2
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
            system->last_pressures[i] = 0;
 8001c38:	7dfa      	ldrb	r2, [r7, #23]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3254      	adds	r2, #84	@ 0x54
 8001c3e:	2100      	movs	r1, #0
 8001c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001c44:	e005      	b.n	8001c52 <bmp280_multi_init+0x12c>
        } else {
            system->sensors_initialized[i] = false;
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
        }

        // Small delay between sensor initializations
        HAL_Delay(10);
 8001c52:	200a      	movs	r0, #10
 8001c54:	f001 fcfe 	bl	8003654 <HAL_Delay>
    for (uint8_t i = 0; i < NUM_BMP280_SENSORS; i++) {
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	75fb      	strb	r3, [r7, #23]
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d99e      	bls.n	8001ba2 <bmp280_multi_init+0x7c>
    }

    // Disable all multiplexer channels
    i2c_mux_select(&system->mux, 8); // Invalid channel disables all
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2108      	movs	r1, #8
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fd9c 	bl	80017a6 <i2c_mux_select>

    return true;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <bmp280_multi_read_sensor>:

bool bmp280_multi_read_sensor(bmp280_multi_system_t *system, 
                              uint8_t sensor_index, 
                              float *pressure)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	460b      	mov	r3, r1
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	72fb      	strb	r3, [r7, #11]
    if (system == NULL || pressure == NULL || sensor_index >= NUM_BMP280_SENSORS) {
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <bmp280_multi_read_sensor+0x20>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <bmp280_multi_read_sensor+0x20>
 8001c92:	7afb      	ldrb	r3, [r7, #11]
 8001c94:	2b05      	cmp	r3, #5
 8001c96:	d901      	bls.n	8001c9c <bmp280_multi_read_sensor+0x24>
        return false;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e043      	b.n	8001d24 <bmp280_multi_read_sensor+0xac>
    }

    if (!system->sensors_initialized[sensor_index]) {
 8001c9c:	7afb      	ldrb	r3, [r7, #11]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 8001ca6:	f083 0301 	eor.w	r3, r3, #1
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <bmp280_multi_read_sensor+0x3c>
        return false;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e037      	b.n	8001d24 <bmp280_multi_read_sensor+0xac>
    }

    // Select multiplexer channel
    if (i2c_mux_select(&system->mux, system->sensor_channels[sensor_index]) != 0) {
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	7afb      	ldrb	r3, [r7, #11]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f7ff fd70 	bl	80017a6 <i2c_mux_select>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <bmp280_multi_read_sensor+0x58>
        return false;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e029      	b.n	8001d24 <bmp280_multi_read_sensor+0xac>

    // Read sensor data
    int32_t temperature;
    uint32_t pressure_fixed;
    
    if (!bmp280_read_fixed(&system->sensors[sensor_index], &temperature, &pressure_fixed, NULL)) {
 8001cd0:	7afb      	ldrb	r3, [r7, #11]
 8001cd2:	2234      	movs	r2, #52	@ 0x34
 8001cd4:	fb02 f303 	mul.w	r3, r2, r3
 8001cd8:	3308      	adds	r3, #8
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4413      	add	r3, r2
 8001cde:	1d18      	adds	r0, r3, #4
 8001ce0:	f107 0210 	add.w	r2, r7, #16
 8001ce4:	f107 0114 	add.w	r1, r7, #20
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f7ff fa70 	bl	80011ce <bmp280_read_fixed>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f083 0301 	eor.w	r3, r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <bmp280_multi_read_sensor+0x86>
        return false;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e012      	b.n	8001d24 <bmp280_multi_read_sensor+0xac>
    }

    // Convert to float pressure in Pascals
    *pressure = PRESSURE_FIXED_TO_FLOAT(pressure_fixed);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	ee07 3a90 	vmov	s15, r3
 8001d04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d08:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001d2c <bmp280_multi_read_sensor+0xb4>
 8001d0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	edc3 7a00 	vstr	s15, [r3]
    
    // Store for later use
    system->last_pressures[sensor_index] = pressure_fixed;
 8001d16:	7afa      	ldrb	r2, [r7, #11]
 8001d18:	6939      	ldr	r1, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3254      	adds	r2, #84	@ 0x54
 8001d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    return true;
 8001d22:	2301      	movs	r3, #1
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	43800000 	.word	0x43800000

08001d30 <bmp280_multi_force_measurement>:

bool bmp280_multi_force_measurement(bmp280_multi_system_t *system)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
    if (system == NULL) {
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <bmp280_multi_force_measurement+0x12>
        return false;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e041      	b.n	8001dc6 <bmp280_multi_force_measurement+0x96>
    }

    bool success = true;
 8001d42:	2301      	movs	r3, #1
 8001d44:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < NUM_BMP280_SENSORS; i++) {
 8001d46:	2300      	movs	r3, #0
 8001d48:	73bb      	strb	r3, [r7, #14]
 8001d4a:	e033      	b.n	8001db4 <bmp280_multi_force_measurement+0x84>
        if (!system->sensors_initialized[i]) {
 8001d4c:	7bbb      	ldrb	r3, [r7, #14]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 8001d56:	f083 0301 	eor.w	r3, r3, #1
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d125      	bne.n	8001dac <bmp280_multi_force_measurement+0x7c>
            continue;
        }

        // Select multiplexer channel
        if (i2c_mux_select(&system->mux, system->sensor_channels[i]) != 0) {
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	7bbb      	ldrb	r3, [r7, #14]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f7ff fd1a 	bl	80017a6 <i2c_mux_select>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <bmp280_multi_force_measurement+0x4e>
            success = false;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	73fb      	strb	r3, [r7, #15]
            continue;
 8001d7c:	e017      	b.n	8001dae <bmp280_multi_force_measurement+0x7e>
        }

        // Force measurement
        if (!bmp280_force_measurement(&system->sensors[i])) {
 8001d7e:	7bbb      	ldrb	r3, [r7, #14]
 8001d80:	2234      	movs	r2, #52	@ 0x34
 8001d82:	fb02 f303 	mul.w	r3, r2, r3
 8001d86:	3308      	adds	r3, #8
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fe81 	bl	8000a96 <bmp280_force_measurement>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f083 0301 	eor.w	r3, r3, #1
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <bmp280_multi_force_measurement+0x74>
            success = false;
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]
        }

        // Small delay between operations
        HAL_Delay(1);
 8001da4:	2001      	movs	r0, #1
 8001da6:	f001 fc55 	bl	8003654 <HAL_Delay>
 8001daa:	e000      	b.n	8001dae <bmp280_multi_force_measurement+0x7e>
            continue;
 8001dac:	bf00      	nop
    for (uint8_t i = 0; i < NUM_BMP280_SENSORS; i++) {
 8001dae:	7bbb      	ldrb	r3, [r7, #14]
 8001db0:	3301      	adds	r3, #1
 8001db2:	73bb      	strb	r3, [r7, #14]
 8001db4:	7bbb      	ldrb	r3, [r7, #14]
 8001db6:	2b05      	cmp	r3, #5
 8001db8:	d9c8      	bls.n	8001d4c <bmp280_multi_force_measurement+0x1c>
    }

    // Disable all multiplexer channels
    i2c_mux_select(&system->mux, 8);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2108      	movs	r1, #8
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fcf1 	bl	80017a6 <i2c_mux_select>

    return success;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <bmp280_multi_is_measuring>:

bool bmp280_multi_is_measuring(bmp280_multi_system_t *system)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
    if (system == NULL) {
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <bmp280_multi_is_measuring+0x12>
        return false;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	e032      	b.n	8001e46 <bmp280_multi_is_measuring+0x78>
    }

    for (uint8_t i = 0; i < NUM_BMP280_SENSORS; i++) {
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	e02b      	b.n	8001e3e <bmp280_multi_is_measuring+0x70>
        if (!system->sensors_initialized[i]) {
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	4413      	add	r3, r2
 8001dec:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 8001df0:	f083 0301 	eor.w	r3, r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d11b      	bne.n	8001e32 <bmp280_multi_is_measuring+0x64>
            continue;
        }

        // Select multiplexer channel
        if (i2c_mux_select(&system->mux, system->sensor_channels[i]) != 0) {
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001e06:	4619      	mov	r1, r3
 8001e08:	f7ff fccd 	bl	80017a6 <i2c_mux_select>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d111      	bne.n	8001e36 <bmp280_multi_is_measuring+0x68>
            continue;
        }

        // Check if measuring
        if (bmp280_is_measuring(&system->sensors[i])) {
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	2234      	movs	r2, #52	@ 0x34
 8001e16:	fb02 f303 	mul.w	r3, r2, r3
 8001e1a:	3308      	adds	r3, #8
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4413      	add	r3, r2
 8001e20:	3304      	adds	r3, #4
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fe61 	bl	8000aea <bmp280_is_measuring>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <bmp280_multi_is_measuring+0x6a>
            return true;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e009      	b.n	8001e46 <bmp280_multi_is_measuring+0x78>
            continue;
 8001e32:	bf00      	nop
 8001e34:	e000      	b.n	8001e38 <bmp280_multi_is_measuring+0x6a>
            continue;
 8001e36:	bf00      	nop
    for (uint8_t i = 0; i < NUM_BMP280_SENSORS; i++) {
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d9d0      	bls.n	8001de6 <bmp280_multi_is_measuring+0x18>
        }
    }

    return false;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <bmp280_multi_read_differences>:

bool bmp280_multi_read_differences(bmp280_multi_system_t *system, 
                                   bmp280_sensors_data_t *data)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08c      	sub	sp, #48	@ 0x30
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
    if (system == NULL || data == NULL) {
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <bmp280_multi_read_differences+0x16>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <bmp280_multi_read_differences+0x1a>
        return false;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e0e7      	b.n	800203a <bmp280_multi_read_differences+0x1ea>
    }

    float pressures[NUM_BMP280_SENSORS];
    uint8_t valid_readings = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Read all sensors
    for (uint8_t i = 0; i < NUM_BMP280_SENSORS; i++) {
 8001e70:	2300      	movs	r3, #0
 8001e72:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001e76:	e029      	b.n	8001ecc <bmp280_multi_read_differences+0x7c>
        if (bmp280_multi_read_sensor(system, i, &pressures[i])) {
 8001e78:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e7c:	f107 0208 	add.w	r2, r7, #8
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	441a      	add	r2, r3
 8001e84:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e88:	4619      	mov	r1, r3
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fef4 	bl	8001c78 <bmp280_multi_read_sensor>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00c      	beq.n	8001eb0 <bmp280_multi_read_differences+0x60>
            valid_readings |= (1 << i);
 8001e96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	b25a      	sxtb	r2, r3
 8001ea2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	b25b      	sxtb	r3, r3
 8001eaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001eae:	e008      	b.n	8001ec2 <bmp280_multi_read_differences+0x72>
        } else {
            pressures[i] = 0.0f;
 8001eb0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	3330      	adds	r3, #48	@ 0x30
 8001eb8:	443b      	add	r3, r7
 8001eba:	3b28      	subs	r3, #40	@ 0x28
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_BMP280_SENSORS; i++) {
 8001ec2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001ecc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d9d1      	bls.n	8001e78 <bmp280_multi_read_differences+0x28>

    // Calculate differences between sensor pairs
    // Only calculate if both sensors in the pair are valid
    
    // delta_pres_0: difference between sensor1 (index 0) and sensor2 (index 1)
    if ((valid_readings & 0x03) == 0x03) { // Both sensor 0 and 1 are valid
 8001ed4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d128      	bne.n	8001f32 <bmp280_multi_read_differences+0xe2>
        float diff = pressures[0] - pressures[1];
 8001ee0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ee4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eec:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        // Convert to int16_t (Pa), clamp to prevent overflow
        if (diff > 32767.0f) diff = 32767.0f;
 8001ef0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001ef4:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8002044 <bmp280_multi_read_differences+0x1f4>
 8001ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f00:	dd01      	ble.n	8001f06 <bmp280_multi_read_differences+0xb6>
 8001f02:	4b51      	ldr	r3, [pc, #324]	@ (8002048 <bmp280_multi_read_differences+0x1f8>)
 8001f04:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (diff < -32768.0f) diff = -32768.0f;
 8001f06:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001f0a:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800204c <bmp280_multi_read_differences+0x1fc>
 8001f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f16:	d502      	bpl.n	8001f1e <bmp280_multi_read_differences+0xce>
 8001f18:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 8001f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
        data->delta_pres_0 = (int16_t)diff;
 8001f1e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f26:	ee17 3a90 	vmov	r3, s15
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	801a      	strh	r2, [r3, #0]
 8001f30:	e002      	b.n	8001f38 <bmp280_multi_read_differences+0xe8>
    } else {
        data->delta_pres_0 = 0;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2200      	movs	r2, #0
 8001f36:	801a      	strh	r2, [r3, #0]
    }

    // delta_pres_1: difference between sensor3 (index 2) and sensor4 (index 3)
    if ((valid_readings & 0x0C) == 0x0C) { // Both sensor 2 and 3 are valid
 8001f38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b0c      	cmp	r3, #12
 8001f42:	d128      	bne.n	8001f96 <bmp280_multi_read_differences+0x146>
        float diff = pressures[2] - pressures[3];
 8001f44:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f48:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f50:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        if (diff > 32767.0f) diff = 32767.0f;
 8001f54:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f58:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8002044 <bmp280_multi_read_differences+0x1f4>
 8001f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f64:	dd01      	ble.n	8001f6a <bmp280_multi_read_differences+0x11a>
 8001f66:	4b38      	ldr	r3, [pc, #224]	@ (8002048 <bmp280_multi_read_differences+0x1f8>)
 8001f68:	627b      	str	r3, [r7, #36]	@ 0x24
        if (diff < -32768.0f) diff = -32768.0f;
 8001f6a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f6e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800204c <bmp280_multi_read_differences+0x1fc>
 8001f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7a:	d502      	bpl.n	8001f82 <bmp280_multi_read_differences+0x132>
 8001f7c:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
        data->delta_pres_1 = (int16_t)diff;
 8001f82:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f8a:	ee17 3a90 	vmov	r3, s15
 8001f8e:	b21a      	sxth	r2, r3
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	805a      	strh	r2, [r3, #2]
 8001f94:	e002      	b.n	8001f9c <bmp280_multi_read_differences+0x14c>
    } else {
        data->delta_pres_1 = 0;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	805a      	strh	r2, [r3, #2]
    }

    // delta_pres_2: difference between sensor5 (index 4) and sensor6 (index 5)
    if ((valid_readings & 0x30) == 0x30) { // Both sensor 4 and 5 are valid
 8001f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fa0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001fa4:	2b30      	cmp	r3, #48	@ 0x30
 8001fa6:	d128      	bne.n	8001ffa <bmp280_multi_read_differences+0x1aa>
        float diff = pressures[4] - pressures[5];
 8001fa8:	ed97 7a06 	vldr	s14, [r7, #24]
 8001fac:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb4:	edc7 7a08 	vstr	s15, [r7, #32]
        if (diff > 32767.0f) diff = 32767.0f;
 8001fb8:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fbc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002044 <bmp280_multi_read_differences+0x1f4>
 8001fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc8:	dd01      	ble.n	8001fce <bmp280_multi_read_differences+0x17e>
 8001fca:	4b1f      	ldr	r3, [pc, #124]	@ (8002048 <bmp280_multi_read_differences+0x1f8>)
 8001fcc:	623b      	str	r3, [r7, #32]
        if (diff < -32768.0f) diff = -32768.0f;
 8001fce:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fd2:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800204c <bmp280_multi_read_differences+0x1fc>
 8001fd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fde:	d502      	bpl.n	8001fe6 <bmp280_multi_read_differences+0x196>
 8001fe0:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 8001fe4:	623b      	str	r3, [r7, #32]
        data->delta_pres_2 = (int16_t)diff;
 8001fe6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fee:	ee17 3a90 	vmov	r3, s15
 8001ff2:	b21a      	sxth	r2, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	809a      	strh	r2, [r3, #4]
 8001ff8:	e002      	b.n	8002000 <bmp280_multi_read_differences+0x1b0>
    } else {
        data->delta_pres_2 = 0;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	809a      	strh	r2, [r3, #4]
    }

    // Disable all multiplexer channels
    i2c_mux_select(&system->mux, 8);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2108      	movs	r1, #8
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fbce 	bl	80017a6 <i2c_mux_select>

    // Return true if at least one pair was successfully read
    return ((valid_readings & 0x03) == 0x03) || 
 800200a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800200e:	f003 0303 	and.w	r3, r3, #3
           ((valid_readings & 0x0C) == 0x0C) || 
 8002012:	2b03      	cmp	r3, #3
 8002014:	d00b      	beq.n	800202e <bmp280_multi_read_differences+0x1de>
 8002016:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800201a:	f003 030c 	and.w	r3, r3, #12
    return ((valid_readings & 0x03) == 0x03) || 
 800201e:	2b0c      	cmp	r3, #12
 8002020:	d005      	beq.n	800202e <bmp280_multi_read_differences+0x1de>
           ((valid_readings & 0x30) == 0x30);
 8002022:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002026:	f003 0330 	and.w	r3, r3, #48	@ 0x30
           ((valid_readings & 0x0C) == 0x0C) || 
 800202a:	2b30      	cmp	r3, #48	@ 0x30
 800202c:	d101      	bne.n	8002032 <bmp280_multi_read_differences+0x1e2>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <bmp280_multi_read_differences+0x1e4>
 8002032:	2300      	movs	r3, #0
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
}
 800203a:	4618      	mov	r0, r3
 800203c:	3730      	adds	r7, #48	@ 0x30
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	46fffe00 	.word	0x46fffe00
 8002048:	46fffe00 	.word	0x46fffe00
 800204c:	c7000000 	.word	0xc7000000

08002050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002050:	b5b0      	push	{r4, r5, r7, lr}
 8002052:	b0a0      	sub	sp, #128	@ 0x80
 8002054:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002056:	f001 fa88 	bl	800356a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800205a:	f000 f895 	bl	8002188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800205e:	f000 fa15 	bl	800248c <MX_GPIO_Init>
  MX_DMA_Init();
 8002062:	f000 f9ed 	bl	8002440 <MX_DMA_Init>
  MX_CAN1_Init();
 8002066:	f000 f8d5 	bl	8002214 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 800206a:	f000 f989 	bl	8002380 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800206e:	f000 f9b7 	bl	80023e0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002072:	f000 f905 	bl	8002280 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002076:	f000 f943 	bl	8002300 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  can_gpio_verification = (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)==GPIO_PIN_SET);
 800207a:	2140      	movs	r1, #64	@ 0x40
 800207c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002080:	f002 f9ca 	bl	8004418 <HAL_GPIO_ReadPin>
 8002084:	4603      	mov	r3, r0
 8002086:	2b01      	cmp	r3, #1
 8002088:	bf0c      	ite	eq
 800208a:	2301      	moveq	r3, #1
 800208c:	2300      	movne	r3, #0
 800208e:	b2da      	uxtb	r2, r3
 8002090:	4b2d      	ldr	r3, [pc, #180]	@ (8002148 <main+0xf8>)
 8002092:	701a      	strb	r2, [r3, #0]
  perform_setup_threads(&huart1,&huart2,&hi2c1,&hi2c3,&hdma_usart1_rx,USART1,&hcan1);
 8002094:	4b2d      	ldr	r3, [pc, #180]	@ (800214c <main+0xfc>)
 8002096:	9302      	str	r3, [sp, #8]
 8002098:	4b2d      	ldr	r3, [pc, #180]	@ (8002150 <main+0x100>)
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	4b2d      	ldr	r3, [pc, #180]	@ (8002154 <main+0x104>)
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002158 <main+0x108>)
 80020a2:	4a2e      	ldr	r2, [pc, #184]	@ (800215c <main+0x10c>)
 80020a4:	492e      	ldr	r1, [pc, #184]	@ (8002160 <main+0x110>)
 80020a6:	482f      	ldr	r0, [pc, #188]	@ (8002164 <main+0x114>)
 80020a8:	f001 fa06 	bl	80034b8 <perform_setup_threads>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of CAN_Transmit */
  osThreadDef(CAN_Transmit, can_logger_cycle, osPriorityBelowNormal, 0, 128);
 80020ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002168 <main+0x118>)
 80020ae:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80020b2:	461d      	mov	r5, r3
 80020b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CAN_TransmitHandle = osThreadCreate(osThread(CAN_Transmit), NULL);
 80020c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020c4:	2100      	movs	r1, #0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f005 fedd 	bl	8007e86 <osThreadCreate>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4a27      	ldr	r2, [pc, #156]	@ (800216c <main+0x11c>)
 80020d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_Reception */
  osThreadDef(UART_Reception, uart_notifications_cycle, osPriorityBelowNormal, 0, 128);
 80020d2:	4b27      	ldr	r3, [pc, #156]	@ (8002170 <main+0x120>)
 80020d4:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80020d8:	461d      	mov	r5, r3
 80020da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_ReceptionHandle = osThreadCreate(osThread(UART_Reception), NULL);
 80020e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020ea:	2100      	movs	r1, #0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f005 feca 	bl	8007e86 <osThreadCreate>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002174 <main+0x124>)
 80020f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_Transmit */
  osThreadDef(UART_Transmit, uart_logger_cycle, osPriorityBelowNormal, 0, 128);
 80020f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002178 <main+0x128>)
 80020fa:	f107 041c 	add.w	r4, r7, #28
 80020fe:	461d      	mov	r5, r3
 8002100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002104:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002108:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_TransmitHandle = osThreadCreate(osThread(UART_Transmit), NULL);
 800210c:	f107 031c 	add.w	r3, r7, #28
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f005 feb7 	bl	8007e86 <osThreadCreate>
 8002118:	4603      	mov	r3, r0
 800211a:	4a18      	ldr	r2, [pc, #96]	@ (800217c <main+0x12c>)
 800211c:	6013      	str	r3, [r2, #0]

  /* definition and creation of MUX_PRES */
  osThreadDef(MUX_PRES, mux_pres_cycle, osPriorityBelowNormal, 0, 128);
 800211e:	4b18      	ldr	r3, [pc, #96]	@ (8002180 <main+0x130>)
 8002120:	463c      	mov	r4, r7
 8002122:	461d      	mov	r5, r3
 8002124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002128:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800212c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MUX_PRESHandle = osThreadCreate(osThread(MUX_PRES), NULL);
 8002130:	463b      	mov	r3, r7
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f005 fea6 	bl	8007e86 <osThreadCreate>
 800213a:	4603      	mov	r3, r0
 800213c:	4a11      	ldr	r2, [pc, #68]	@ (8002184 <main+0x134>)
 800213e:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002140:	f005 fe9a 	bl	8007e78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002144:	bf00      	nop
 8002146:	e7fd      	b.n	8002144 <main+0xf4>
 8002148:	200005bc 	.word	0x200005bc
 800214c:	2000031c 	.word	0x2000031c
 8002150:	40013800 	.word	0x40013800
 8002154:	200004fc 	.word	0x200004fc
 8002158:	20000398 	.word	0x20000398
 800215c:	20000344 	.word	0x20000344
 8002160:	20000474 	.word	0x20000474
 8002164:	200003ec 	.word	0x200003ec
 8002168:	08009e10 	.word	0x08009e10
 800216c:	2000058c 	.word	0x2000058c
 8002170:	08009e3c 	.word	0x08009e3c
 8002174:	20000590 	.word	0x20000590
 8002178:	08009e68 	.word	0x08009e68
 800217c:	20000594 	.word	0x20000594
 8002180:	08009e90 	.word	0x08009e90
 8002184:	20000598 	.word	0x20000598

08002188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b096      	sub	sp, #88	@ 0x58
 800218c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800218e:	f107 0314 	add.w	r3, r7, #20
 8002192:	2244      	movs	r2, #68	@ 0x44
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f007 f94a 	bl	8009430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800219c:	463b      	mov	r3, r7
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	60da      	str	r2, [r3, #12]
 80021a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80021aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80021ae:	f003 fa2f 	bl	8005610 <HAL_PWREx_ControlVoltageScaling>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80021b8:	f000 f99e 	bl	80024f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80021bc:	2310      	movs	r3, #16
 80021be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80021c0:	2301      	movs	r3, #1
 80021c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80021c8:	2360      	movs	r3, #96	@ 0x60
 80021ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4618      	mov	r0, r3
 80021d6:	f003 fa71 	bl	80056bc <HAL_RCC_OscConfig>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80021e0:	f000 f98a 	bl	80024f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021e4:	230f      	movs	r3, #15
 80021e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80021e8:	2300      	movs	r3, #0
 80021ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021f4:	2300      	movs	r3, #0
 80021f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80021f8:	463b      	mov	r3, r7
 80021fa:	2100      	movs	r1, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 fe71 	bl	8005ee4 <HAL_RCC_ClockConfig>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002208:	f000 f976 	bl	80024f8 <Error_Handler>
  }
}
 800220c:	bf00      	nop
 800220e:	3758      	adds	r7, #88	@ 0x58
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002218:	4b17      	ldr	r3, [pc, #92]	@ (8002278 <MX_CAN1_Init+0x64>)
 800221a:	4a18      	ldr	r2, [pc, #96]	@ (800227c <MX_CAN1_Init+0x68>)
 800221c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800221e:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <MX_CAN1_Init+0x64>)
 8002220:	2210      	movs	r2, #16
 8002222:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002224:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <MX_CAN1_Init+0x64>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800222a:	4b13      	ldr	r3, [pc, #76]	@ (8002278 <MX_CAN1_Init+0x64>)
 800222c:	2200      	movs	r2, #0
 800222e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002230:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <MX_CAN1_Init+0x64>)
 8002232:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002236:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002238:	4b0f      	ldr	r3, [pc, #60]	@ (8002278 <MX_CAN1_Init+0x64>)
 800223a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800223e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002240:	4b0d      	ldr	r3, [pc, #52]	@ (8002278 <MX_CAN1_Init+0x64>)
 8002242:	2200      	movs	r2, #0
 8002244:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002246:	4b0c      	ldr	r3, [pc, #48]	@ (8002278 <MX_CAN1_Init+0x64>)
 8002248:	2200      	movs	r2, #0
 800224a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800224c:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <MX_CAN1_Init+0x64>)
 800224e:	2200      	movs	r2, #0
 8002250:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <MX_CAN1_Init+0x64>)
 8002254:	2200      	movs	r2, #0
 8002256:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002258:	4b07      	ldr	r3, [pc, #28]	@ (8002278 <MX_CAN1_Init+0x64>)
 800225a:	2200      	movs	r2, #0
 800225c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800225e:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <MX_CAN1_Init+0x64>)
 8002260:	2200      	movs	r2, #0
 8002262:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002264:	4804      	ldr	r0, [pc, #16]	@ (8002278 <MX_CAN1_Init+0x64>)
 8002266:	f001 fa19 	bl	800369c <HAL_CAN_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002270:	f000 f942 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	2000031c 	.word	0x2000031c
 800227c:	40006400 	.word	0x40006400

08002280 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002284:	4b1b      	ldr	r3, [pc, #108]	@ (80022f4 <MX_I2C1_Init+0x74>)
 8002286:	4a1c      	ldr	r2, [pc, #112]	@ (80022f8 <MX_I2C1_Init+0x78>)
 8002288:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 800228a:	4b1a      	ldr	r3, [pc, #104]	@ (80022f4 <MX_I2C1_Init+0x74>)
 800228c:	4a1b      	ldr	r2, [pc, #108]	@ (80022fc <MX_I2C1_Init+0x7c>)
 800228e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002290:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <MX_I2C1_Init+0x74>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002296:	4b17      	ldr	r3, [pc, #92]	@ (80022f4 <MX_I2C1_Init+0x74>)
 8002298:	2201      	movs	r2, #1
 800229a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800229c:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <MX_I2C1_Init+0x74>)
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80022a2:	4b14      	ldr	r3, [pc, #80]	@ (80022f4 <MX_I2C1_Init+0x74>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022a8:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <MX_I2C1_Init+0x74>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022ae:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <MX_I2C1_Init+0x74>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022b4:	4b0f      	ldr	r3, [pc, #60]	@ (80022f4 <MX_I2C1_Init+0x74>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022ba:	480e      	ldr	r0, [pc, #56]	@ (80022f4 <MX_I2C1_Init+0x74>)
 80022bc:	f002 f8dc 	bl	8004478 <HAL_I2C_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80022c6:	f000 f917 	bl	80024f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022ca:	2100      	movs	r1, #0
 80022cc:	4809      	ldr	r0, [pc, #36]	@ (80022f4 <MX_I2C1_Init+0x74>)
 80022ce:	f003 f8f9 	bl	80054c4 <HAL_I2CEx_ConfigAnalogFilter>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80022d8:	f000 f90e 	bl	80024f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80022dc:	2100      	movs	r1, #0
 80022de:	4805      	ldr	r0, [pc, #20]	@ (80022f4 <MX_I2C1_Init+0x74>)
 80022e0:	f003 f93b 	bl	800555a <HAL_I2CEx_ConfigDigitalFilter>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80022ea:	f000 f905 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000344 	.word	0x20000344
 80022f8:	40005400 	.word	0x40005400
 80022fc:	00100d14 	.word	0x00100d14

08002300 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002304:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <MX_I2C3_Init+0x74>)
 8002306:	4a1c      	ldr	r2, [pc, #112]	@ (8002378 <MX_I2C3_Init+0x78>)
 8002308:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100D14;
 800230a:	4b1a      	ldr	r3, [pc, #104]	@ (8002374 <MX_I2C3_Init+0x74>)
 800230c:	4a1b      	ldr	r2, [pc, #108]	@ (800237c <MX_I2C3_Init+0x7c>)
 800230e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002310:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <MX_I2C3_Init+0x74>)
 8002312:	2200      	movs	r2, #0
 8002314:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002316:	4b17      	ldr	r3, [pc, #92]	@ (8002374 <MX_I2C3_Init+0x74>)
 8002318:	2201      	movs	r2, #1
 800231a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800231c:	4b15      	ldr	r3, [pc, #84]	@ (8002374 <MX_I2C3_Init+0x74>)
 800231e:	2200      	movs	r2, #0
 8002320:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002322:	4b14      	ldr	r3, [pc, #80]	@ (8002374 <MX_I2C3_Init+0x74>)
 8002324:	2200      	movs	r2, #0
 8002326:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002328:	4b12      	ldr	r3, [pc, #72]	@ (8002374 <MX_I2C3_Init+0x74>)
 800232a:	2200      	movs	r2, #0
 800232c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800232e:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <MX_I2C3_Init+0x74>)
 8002330:	2200      	movs	r2, #0
 8002332:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002334:	4b0f      	ldr	r3, [pc, #60]	@ (8002374 <MX_I2C3_Init+0x74>)
 8002336:	2200      	movs	r2, #0
 8002338:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800233a:	480e      	ldr	r0, [pc, #56]	@ (8002374 <MX_I2C3_Init+0x74>)
 800233c:	f002 f89c 	bl	8004478 <HAL_I2C_Init>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002346:	f000 f8d7 	bl	80024f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800234a:	2100      	movs	r1, #0
 800234c:	4809      	ldr	r0, [pc, #36]	@ (8002374 <MX_I2C3_Init+0x74>)
 800234e:	f003 f8b9 	bl	80054c4 <HAL_I2CEx_ConfigAnalogFilter>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002358:	f000 f8ce 	bl	80024f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800235c:	2100      	movs	r1, #0
 800235e:	4805      	ldr	r0, [pc, #20]	@ (8002374 <MX_I2C3_Init+0x74>)
 8002360:	f003 f8fb 	bl	800555a <HAL_I2CEx_ConfigDigitalFilter>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800236a:	f000 f8c5 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000398 	.word	0x20000398
 8002378:	40005c00 	.word	0x40005c00
 800237c:	00100d14 	.word	0x00100d14

08002380 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002384:	4b14      	ldr	r3, [pc, #80]	@ (80023d8 <MX_USART1_UART_Init+0x58>)
 8002386:	4a15      	ldr	r2, [pc, #84]	@ (80023dc <MX_USART1_UART_Init+0x5c>)
 8002388:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800238a:	4b13      	ldr	r3, [pc, #76]	@ (80023d8 <MX_USART1_UART_Init+0x58>)
 800238c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002390:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002392:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <MX_USART1_UART_Init+0x58>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002398:	4b0f      	ldr	r3, [pc, #60]	@ (80023d8 <MX_USART1_UART_Init+0x58>)
 800239a:	2200      	movs	r2, #0
 800239c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800239e:	4b0e      	ldr	r3, [pc, #56]	@ (80023d8 <MX_USART1_UART_Init+0x58>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	@ (80023d8 <MX_USART1_UART_Init+0x58>)
 80023a6:	220c      	movs	r2, #12
 80023a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023aa:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <MX_USART1_UART_Init+0x58>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b0:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <MX_USART1_UART_Init+0x58>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023b6:	4b08      	ldr	r3, [pc, #32]	@ (80023d8 <MX_USART1_UART_Init+0x58>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023bc:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <MX_USART1_UART_Init+0x58>)
 80023be:	2200      	movs	r2, #0
 80023c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023c2:	4805      	ldr	r0, [pc, #20]	@ (80023d8 <MX_USART1_UART_Init+0x58>)
 80023c4:	f004 fa9a 	bl	80068fc <HAL_UART_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80023ce:	f000 f893 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200003ec 	.word	0x200003ec
 80023dc:	40013800 	.word	0x40013800

080023e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023e4:	4b14      	ldr	r3, [pc, #80]	@ (8002438 <MX_USART2_UART_Init+0x58>)
 80023e6:	4a15      	ldr	r2, [pc, #84]	@ (800243c <MX_USART2_UART_Init+0x5c>)
 80023e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80023ea:	4b13      	ldr	r3, [pc, #76]	@ (8002438 <MX_USART2_UART_Init+0x58>)
 80023ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80023f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023f2:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <MX_USART2_UART_Init+0x58>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <MX_USART2_UART_Init+0x58>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002438 <MX_USART2_UART_Init+0x58>)
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002404:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <MX_USART2_UART_Init+0x58>)
 8002406:	220c      	movs	r2, #12
 8002408:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240a:	4b0b      	ldr	r3, [pc, #44]	@ (8002438 <MX_USART2_UART_Init+0x58>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002410:	4b09      	ldr	r3, [pc, #36]	@ (8002438 <MX_USART2_UART_Init+0x58>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002416:	4b08      	ldr	r3, [pc, #32]	@ (8002438 <MX_USART2_UART_Init+0x58>)
 8002418:	2200      	movs	r2, #0
 800241a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800241c:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <MX_USART2_UART_Init+0x58>)
 800241e:	2200      	movs	r2, #0
 8002420:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002422:	4805      	ldr	r0, [pc, #20]	@ (8002438 <MX_USART2_UART_Init+0x58>)
 8002424:	f004 fa6a 	bl	80068fc <HAL_UART_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800242e:	f000 f863 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000474 	.word	0x20000474
 800243c:	40004400 	.word	0x40004400

08002440 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002446:	4b10      	ldr	r3, [pc, #64]	@ (8002488 <MX_DMA_Init+0x48>)
 8002448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800244a:	4a0f      	ldr	r2, [pc, #60]	@ (8002488 <MX_DMA_Init+0x48>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6493      	str	r3, [r2, #72]	@ 0x48
 8002452:	4b0d      	ldr	r3, [pc, #52]	@ (8002488 <MX_DMA_Init+0x48>)
 8002454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	607b      	str	r3, [r7, #4]
 800245c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	2105      	movs	r1, #5
 8002462:	200f      	movs	r0, #15
 8002464:	f001 fbc1 	bl	8003bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002468:	200f      	movs	r0, #15
 800246a:	f001 fbda 	bl	8003c22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800246e:	2200      	movs	r2, #0
 8002470:	2105      	movs	r1, #5
 8002472:	2010      	movs	r0, #16
 8002474:	f001 fbb9 	bl	8003bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002478:	2010      	movs	r0, #16
 800247a:	f001 fbd2 	bl	8003c22 <HAL_NVIC_EnableIRQ>

}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40021000 	.word	0x40021000

0800248c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002492:	f107 030c 	add.w	r3, r7, #12
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	60da      	str	r2, [r3, #12]
 80024a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a2:	4b14      	ldr	r3, [pc, #80]	@ (80024f4 <MX_GPIO_Init+0x68>)
 80024a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a6:	4a13      	ldr	r2, [pc, #76]	@ (80024f4 <MX_GPIO_Init+0x68>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ae:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <MX_GPIO_Init+0x68>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ba:	4b0e      	ldr	r3, [pc, #56]	@ (80024f4 <MX_GPIO_Init+0x68>)
 80024bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024be:	4a0d      	ldr	r2, [pc, #52]	@ (80024f4 <MX_GPIO_Init+0x68>)
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024c6:	4b0b      	ldr	r3, [pc, #44]	@ (80024f4 <MX_GPIO_Init+0x68>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024d2:	2340      	movs	r3, #64	@ 0x40
 80024d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024de:	f107 030c 	add.w	r3, r7, #12
 80024e2:	4619      	mov	r1, r3
 80024e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024e8:	f001 fe2c 	bl	8004144 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80024ec:	bf00      	nop
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000

080024f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024fc:	b672      	cpsid	i
}
 80024fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <Error_Handler+0x8>

08002504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250a:	4b11      	ldr	r3, [pc, #68]	@ (8002550 <HAL_MspInit+0x4c>)
 800250c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800250e:	4a10      	ldr	r2, [pc, #64]	@ (8002550 <HAL_MspInit+0x4c>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6613      	str	r3, [r2, #96]	@ 0x60
 8002516:	4b0e      	ldr	r3, [pc, #56]	@ (8002550 <HAL_MspInit+0x4c>)
 8002518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002522:	4b0b      	ldr	r3, [pc, #44]	@ (8002550 <HAL_MspInit+0x4c>)
 8002524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002526:	4a0a      	ldr	r2, [pc, #40]	@ (8002550 <HAL_MspInit+0x4c>)
 8002528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800252c:	6593      	str	r3, [r2, #88]	@ 0x58
 800252e:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <HAL_MspInit+0x4c>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	210f      	movs	r1, #15
 800253e:	f06f 0001 	mvn.w	r0, #1
 8002542:	f001 fb52 	bl	8003bea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000

08002554 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	@ 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a18      	ldr	r2, [pc, #96]	@ (80025d4 <HAL_CAN_MspInit+0x80>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d129      	bne.n	80025ca <HAL_CAN_MspInit+0x76>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002576:	4b18      	ldr	r3, [pc, #96]	@ (80025d8 <HAL_CAN_MspInit+0x84>)
 8002578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257a:	4a17      	ldr	r2, [pc, #92]	@ (80025d8 <HAL_CAN_MspInit+0x84>)
 800257c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002580:	6593      	str	r3, [r2, #88]	@ 0x58
 8002582:	4b15      	ldr	r3, [pc, #84]	@ (80025d8 <HAL_CAN_MspInit+0x84>)
 8002584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	4b12      	ldr	r3, [pc, #72]	@ (80025d8 <HAL_CAN_MspInit+0x84>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002592:	4a11      	ldr	r2, [pc, #68]	@ (80025d8 <HAL_CAN_MspInit+0x84>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800259a:	4b0f      	ldr	r3, [pc, #60]	@ (80025d8 <HAL_CAN_MspInit+0x84>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80025a6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80025aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b4:	2303      	movs	r3, #3
 80025b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80025b8:	2309      	movs	r3, #9
 80025ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	4619      	mov	r1, r3
 80025c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025c6:	f001 fdbd 	bl	8004144 <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80025ca:	bf00      	nop
 80025cc:	3728      	adds	r7, #40	@ 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40006400 	.word	0x40006400
 80025d8:	40021000 	.word	0x40021000

080025dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b0a2      	sub	sp, #136	@ 0x88
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025f4:	f107 0320 	add.w	r3, r7, #32
 80025f8:	2254      	movs	r2, #84	@ 0x54
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f006 ff17 	bl	8009430 <memset>
  if(hi2c->Instance==I2C1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a4e      	ldr	r2, [pc, #312]	@ (8002740 <HAL_I2C_MspInit+0x164>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d138      	bne.n	800267e <HAL_I2C_MspInit+0xa2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800260c:	2340      	movs	r3, #64	@ 0x40
 800260e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002610:	2300      	movs	r3, #0
 8002612:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002614:	f107 0320 	add.w	r3, r7, #32
 8002618:	4618      	mov	r0, r3
 800261a:	f003 fe87 	bl	800632c <HAL_RCCEx_PeriphCLKConfig>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002624:	f7ff ff68 	bl	80024f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002628:	4b46      	ldr	r3, [pc, #280]	@ (8002744 <HAL_I2C_MspInit+0x168>)
 800262a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262c:	4a45      	ldr	r2, [pc, #276]	@ (8002744 <HAL_I2C_MspInit+0x168>)
 800262e:	f043 0302 	orr.w	r3, r3, #2
 8002632:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002634:	4b43      	ldr	r3, [pc, #268]	@ (8002744 <HAL_I2C_MspInit+0x168>)
 8002636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002640:	23c0      	movs	r3, #192	@ 0xc0
 8002642:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002644:	2312      	movs	r3, #18
 8002646:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264c:	2303      	movs	r3, #3
 800264e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002652:	2304      	movs	r3, #4
 8002654:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002658:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800265c:	4619      	mov	r1, r3
 800265e:	483a      	ldr	r0, [pc, #232]	@ (8002748 <HAL_I2C_MspInit+0x16c>)
 8002660:	f001 fd70 	bl	8004144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002664:	4b37      	ldr	r3, [pc, #220]	@ (8002744 <HAL_I2C_MspInit+0x168>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002668:	4a36      	ldr	r2, [pc, #216]	@ (8002744 <HAL_I2C_MspInit+0x168>)
 800266a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800266e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002670:	4b34      	ldr	r3, [pc, #208]	@ (8002744 <HAL_I2C_MspInit+0x168>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002674:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	69bb      	ldr	r3, [r7, #24]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800267c:	e05c      	b.n	8002738 <HAL_I2C_MspInit+0x15c>
  else if(hi2c->Instance==I2C3)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a32      	ldr	r2, [pc, #200]	@ (800274c <HAL_I2C_MspInit+0x170>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d157      	bne.n	8002738 <HAL_I2C_MspInit+0x15c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002688:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800268c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800268e:	2300      	movs	r3, #0
 8002690:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002692:	f107 0320 	add.w	r3, r7, #32
 8002696:	4618      	mov	r0, r3
 8002698:	f003 fe48 	bl	800632c <HAL_RCCEx_PeriphCLKConfig>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_MspInit+0xca>
      Error_Handler();
 80026a2:	f7ff ff29 	bl	80024f8 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	4b27      	ldr	r3, [pc, #156]	@ (8002744 <HAL_I2C_MspInit+0x168>)
 80026a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026aa:	4a26      	ldr	r2, [pc, #152]	@ (8002744 <HAL_I2C_MspInit+0x168>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026b2:	4b24      	ldr	r3, [pc, #144]	@ (8002744 <HAL_I2C_MspInit+0x168>)
 80026b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026be:	4b21      	ldr	r3, [pc, #132]	@ (8002744 <HAL_I2C_MspInit+0x168>)
 80026c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c2:	4a20      	ldr	r2, [pc, #128]	@ (8002744 <HAL_I2C_MspInit+0x168>)
 80026c4:	f043 0302 	orr.w	r3, r3, #2
 80026c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002744 <HAL_I2C_MspInit+0x168>)
 80026cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026d6:	2380      	movs	r3, #128	@ 0x80
 80026d8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026da:	2312      	movs	r3, #18
 80026dc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e2:	2303      	movs	r3, #3
 80026e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026e8:	2304      	movs	r3, #4
 80026ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ee:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80026f2:	4619      	mov	r1, r3
 80026f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026f8:	f001 fd24 	bl	8004144 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026fc:	2310      	movs	r3, #16
 80026fe:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002700:	2312      	movs	r3, #18
 8002702:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002708:	2303      	movs	r3, #3
 800270a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800270e:	2304      	movs	r3, #4
 8002710:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002714:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002718:	4619      	mov	r1, r3
 800271a:	480b      	ldr	r0, [pc, #44]	@ (8002748 <HAL_I2C_MspInit+0x16c>)
 800271c:	f001 fd12 	bl	8004144 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002720:	4b08      	ldr	r3, [pc, #32]	@ (8002744 <HAL_I2C_MspInit+0x168>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002724:	4a07      	ldr	r2, [pc, #28]	@ (8002744 <HAL_I2C_MspInit+0x168>)
 8002726:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800272a:	6593      	str	r3, [r2, #88]	@ 0x58
 800272c:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <HAL_I2C_MspInit+0x168>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002730:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]
}
 8002738:	bf00      	nop
 800273a:	3788      	adds	r7, #136	@ 0x88
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40005400 	.word	0x40005400
 8002744:	40021000 	.word	0x40021000
 8002748:	48000400 	.word	0x48000400
 800274c:	40005c00 	.word	0x40005c00

08002750 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b0a0      	sub	sp, #128	@ 0x80
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002768:	f107 0318 	add.w	r3, r7, #24
 800276c:	2254      	movs	r2, #84	@ 0x54
 800276e:	2100      	movs	r1, #0
 8002770:	4618      	mov	r0, r3
 8002772:	f006 fe5d 	bl	8009430 <memset>
  if(huart->Instance==USART1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a6f      	ldr	r2, [pc, #444]	@ (8002938 <HAL_UART_MspInit+0x1e8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d169      	bne.n	8002854 <HAL_UART_MspInit+0x104>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002780:	2301      	movs	r3, #1
 8002782:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002784:	2300      	movs	r3, #0
 8002786:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002788:	f107 0318 	add.w	r3, r7, #24
 800278c:	4618      	mov	r0, r3
 800278e:	f003 fdcd 	bl	800632c <HAL_RCCEx_PeriphCLKConfig>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002798:	f7ff feae 	bl	80024f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800279c:	4b67      	ldr	r3, [pc, #412]	@ (800293c <HAL_UART_MspInit+0x1ec>)
 800279e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a0:	4a66      	ldr	r2, [pc, #408]	@ (800293c <HAL_UART_MspInit+0x1ec>)
 80027a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80027a8:	4b64      	ldr	r3, [pc, #400]	@ (800293c <HAL_UART_MspInit+0x1ec>)
 80027aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b4:	4b61      	ldr	r3, [pc, #388]	@ (800293c <HAL_UART_MspInit+0x1ec>)
 80027b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b8:	4a60      	ldr	r2, [pc, #384]	@ (800293c <HAL_UART_MspInit+0x1ec>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027c0:	4b5e      	ldr	r3, [pc, #376]	@ (800293c <HAL_UART_MspInit+0x1ec>)
 80027c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027cc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80027d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d2:	2302      	movs	r3, #2
 80027d4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027da:	2303      	movs	r3, #3
 80027dc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027de:	2307      	movs	r3, #7
 80027e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80027e6:	4619      	mov	r1, r3
 80027e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027ec:	f001 fcaa 	bl	8004144 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80027f0:	4b53      	ldr	r3, [pc, #332]	@ (8002940 <HAL_UART_MspInit+0x1f0>)
 80027f2:	4a54      	ldr	r2, [pc, #336]	@ (8002944 <HAL_UART_MspInit+0x1f4>)
 80027f4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80027f6:	4b52      	ldr	r3, [pc, #328]	@ (8002940 <HAL_UART_MspInit+0x1f0>)
 80027f8:	2202      	movs	r2, #2
 80027fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027fc:	4b50      	ldr	r3, [pc, #320]	@ (8002940 <HAL_UART_MspInit+0x1f0>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002802:	4b4f      	ldr	r3, [pc, #316]	@ (8002940 <HAL_UART_MspInit+0x1f0>)
 8002804:	2200      	movs	r2, #0
 8002806:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002808:	4b4d      	ldr	r3, [pc, #308]	@ (8002940 <HAL_UART_MspInit+0x1f0>)
 800280a:	2280      	movs	r2, #128	@ 0x80
 800280c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800280e:	4b4c      	ldr	r3, [pc, #304]	@ (8002940 <HAL_UART_MspInit+0x1f0>)
 8002810:	2200      	movs	r2, #0
 8002812:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002814:	4b4a      	ldr	r3, [pc, #296]	@ (8002940 <HAL_UART_MspInit+0x1f0>)
 8002816:	2200      	movs	r2, #0
 8002818:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800281a:	4b49      	ldr	r3, [pc, #292]	@ (8002940 <HAL_UART_MspInit+0x1f0>)
 800281c:	2200      	movs	r2, #0
 800281e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002820:	4b47      	ldr	r3, [pc, #284]	@ (8002940 <HAL_UART_MspInit+0x1f0>)
 8002822:	2200      	movs	r2, #0
 8002824:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002826:	4846      	ldr	r0, [pc, #280]	@ (8002940 <HAL_UART_MspInit+0x1f0>)
 8002828:	f001 fa16 	bl	8003c58 <HAL_DMA_Init>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002832:	f7ff fe61 	bl	80024f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a41      	ldr	r2, [pc, #260]	@ (8002940 <HAL_UART_MspInit+0x1f0>)
 800283a:	675a      	str	r2, [r3, #116]	@ 0x74
 800283c:	4a40      	ldr	r2, [pc, #256]	@ (8002940 <HAL_UART_MspInit+0x1f0>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	2105      	movs	r1, #5
 8002846:	2025      	movs	r0, #37	@ 0x25
 8002848:	f001 f9cf 	bl	8003bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800284c:	2025      	movs	r0, #37	@ 0x25
 800284e:	f001 f9e8 	bl	8003c22 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8002852:	e06c      	b.n	800292e <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART2)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a3b      	ldr	r2, [pc, #236]	@ (8002948 <HAL_UART_MspInit+0x1f8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d167      	bne.n	800292e <HAL_UART_MspInit+0x1de>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800285e:	2302      	movs	r3, #2
 8002860:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002862:	2300      	movs	r3, #0
 8002864:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002866:	f107 0318 	add.w	r3, r7, #24
 800286a:	4618      	mov	r0, r3
 800286c:	f003 fd5e 	bl	800632c <HAL_RCCEx_PeriphCLKConfig>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8002876:	f7ff fe3f 	bl	80024f8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800287a:	4b30      	ldr	r3, [pc, #192]	@ (800293c <HAL_UART_MspInit+0x1ec>)
 800287c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287e:	4a2f      	ldr	r2, [pc, #188]	@ (800293c <HAL_UART_MspInit+0x1ec>)
 8002880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002884:	6593      	str	r3, [r2, #88]	@ 0x58
 8002886:	4b2d      	ldr	r3, [pc, #180]	@ (800293c <HAL_UART_MspInit+0x1ec>)
 8002888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	4b2a      	ldr	r3, [pc, #168]	@ (800293c <HAL_UART_MspInit+0x1ec>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002896:	4a29      	ldr	r2, [pc, #164]	@ (800293c <HAL_UART_MspInit+0x1ec>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800289e:	4b27      	ldr	r3, [pc, #156]	@ (800293c <HAL_UART_MspInit+0x1ec>)
 80028a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028aa:	230c      	movs	r3, #12
 80028ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b6:	2303      	movs	r3, #3
 80028b8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028ba:	2307      	movs	r3, #7
 80028bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028be:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80028c2:	4619      	mov	r1, r3
 80028c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028c8:	f001 fc3c 	bl	8004144 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80028cc:	4b1f      	ldr	r3, [pc, #124]	@ (800294c <HAL_UART_MspInit+0x1fc>)
 80028ce:	4a20      	ldr	r2, [pc, #128]	@ (8002950 <HAL_UART_MspInit+0x200>)
 80028d0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80028d2:	4b1e      	ldr	r3, [pc, #120]	@ (800294c <HAL_UART_MspInit+0x1fc>)
 80028d4:	2202      	movs	r2, #2
 80028d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028d8:	4b1c      	ldr	r3, [pc, #112]	@ (800294c <HAL_UART_MspInit+0x1fc>)
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028de:	4b1b      	ldr	r3, [pc, #108]	@ (800294c <HAL_UART_MspInit+0x1fc>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028e4:	4b19      	ldr	r3, [pc, #100]	@ (800294c <HAL_UART_MspInit+0x1fc>)
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028ea:	4b18      	ldr	r3, [pc, #96]	@ (800294c <HAL_UART_MspInit+0x1fc>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028f0:	4b16      	ldr	r3, [pc, #88]	@ (800294c <HAL_UART_MspInit+0x1fc>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80028f6:	4b15      	ldr	r3, [pc, #84]	@ (800294c <HAL_UART_MspInit+0x1fc>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028fc:	4b13      	ldr	r3, [pc, #76]	@ (800294c <HAL_UART_MspInit+0x1fc>)
 80028fe:	2200      	movs	r2, #0
 8002900:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002902:	4812      	ldr	r0, [pc, #72]	@ (800294c <HAL_UART_MspInit+0x1fc>)
 8002904:	f001 f9a8 	bl	8003c58 <HAL_DMA_Init>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 800290e:	f7ff fdf3 	bl	80024f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a0d      	ldr	r2, [pc, #52]	@ (800294c <HAL_UART_MspInit+0x1fc>)
 8002916:	675a      	str	r2, [r3, #116]	@ 0x74
 8002918:	4a0c      	ldr	r2, [pc, #48]	@ (800294c <HAL_UART_MspInit+0x1fc>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800291e:	2200      	movs	r2, #0
 8002920:	2105      	movs	r1, #5
 8002922:	2026      	movs	r0, #38	@ 0x26
 8002924:	f001 f961 	bl	8003bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002928:	2026      	movs	r0, #38	@ 0x26
 800292a:	f001 f97a 	bl	8003c22 <HAL_NVIC_EnableIRQ>
}
 800292e:	bf00      	nop
 8002930:	3780      	adds	r7, #128	@ 0x80
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40013800 	.word	0x40013800
 800293c:	40021000 	.word	0x40021000
 8002940:	200004fc 	.word	0x200004fc
 8002944:	40020058 	.word	0x40020058
 8002948:	40004400 	.word	0x40004400
 800294c:	20000544 	.word	0x20000544
 8002950:	4002006c 	.word	0x4002006c

08002954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002958:	bf00      	nop
 800295a:	e7fd      	b.n	8002958 <NMI_Handler+0x4>

0800295c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002960:	bf00      	nop
 8002962:	e7fd      	b.n	8002960 <HardFault_Handler+0x4>

08002964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002968:	bf00      	nop
 800296a:	e7fd      	b.n	8002968 <MemManage_Handler+0x4>

0800296c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <BusFault_Handler+0x4>

08002974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002978:	bf00      	nop
 800297a:	e7fd      	b.n	8002978 <UsageFault_Handler+0x4>

0800297c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800298e:	f000 fe41 	bl	8003614 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002992:	f006 f881 	bl	8008a98 <xTaskGetSchedulerState>
 8002996:	4603      	mov	r3, r0
 8002998:	2b01      	cmp	r3, #1
 800299a:	d001      	beq.n	80029a0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800299c:	f006 fac4 	bl	8008f28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80029a8:	4802      	ldr	r0, [pc, #8]	@ (80029b4 <DMA1_Channel5_IRQHandler+0x10>)
 80029aa:	f001 faec 	bl	8003f86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200004fc 	.word	0x200004fc

080029b8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80029bc:	4802      	ldr	r0, [pc, #8]	@ (80029c8 <DMA1_Channel6_IRQHandler+0x10>)
 80029be:	f001 fae2 	bl	8003f86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000544 	.word	0x20000544

080029cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029d0:	4802      	ldr	r0, [pc, #8]	@ (80029dc <USART1_IRQHandler+0x10>)
 80029d2:	f004 f86b 	bl	8006aac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	200003ec 	.word	0x200003ec

080029e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029e4:	4802      	ldr	r0, [pc, #8]	@ (80029f0 <USART2_IRQHandler+0x10>)
 80029e6:	f004 f861 	bl	8006aac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000474 	.word	0x20000474

080029f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029fc:	4a14      	ldr	r2, [pc, #80]	@ (8002a50 <_sbrk+0x5c>)
 80029fe:	4b15      	ldr	r3, [pc, #84]	@ (8002a54 <_sbrk+0x60>)
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a08:	4b13      	ldr	r3, [pc, #76]	@ (8002a58 <_sbrk+0x64>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d102      	bne.n	8002a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a10:	4b11      	ldr	r3, [pc, #68]	@ (8002a58 <_sbrk+0x64>)
 8002a12:	4a12      	ldr	r2, [pc, #72]	@ (8002a5c <_sbrk+0x68>)
 8002a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a16:	4b10      	ldr	r3, [pc, #64]	@ (8002a58 <_sbrk+0x64>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d207      	bcs.n	8002a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a24:	f006 fd6a 	bl	80094fc <__errno>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	220c      	movs	r2, #12
 8002a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a32:	e009      	b.n	8002a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a34:	4b08      	ldr	r3, [pc, #32]	@ (8002a58 <_sbrk+0x64>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a3a:	4b07      	ldr	r3, [pc, #28]	@ (8002a58 <_sbrk+0x64>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	4a05      	ldr	r2, [pc, #20]	@ (8002a58 <_sbrk+0x64>)
 8002a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a46:	68fb      	ldr	r3, [r7, #12]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	2000c000 	.word	0x2000c000
 8002a54:	00000400 	.word	0x00000400
 8002a58:	2000059c 	.word	0x2000059c
 8002a5c:	20001470 	.word	0x20001470

08002a60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a64:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <SystemInit+0x20>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6a:	4a05      	ldr	r2, [pc, #20]	@ (8002a80 <SystemInit+0x20>)
 8002a6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <split_uint16>:
 * @brief Split a 16-bit unsigned integer into high and low bytes
 * @param value The 16-bit value to split
 * @param high_byte Pointer to store the high byte (bits 15-8)
 * @param low_byte Pointer to store the low byte (bits 7-0)
 */
void split_uint16(uint16_t value, uint8_t *high_byte, uint8_t *low_byte) {
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	81fb      	strh	r3, [r7, #14]
    *high_byte = (value >> 8) & 0xFF;  // Extract upper 8 bits
 8002a92:	89fb      	ldrh	r3, [r7, #14]
 8002a94:	0a1b      	lsrs	r3, r3, #8
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	701a      	strb	r2, [r3, #0]
    *low_byte  = value & 0xFF;         // Extract lower 8 bits
 8002a9e:	89fb      	ldrh	r3, [r7, #14]
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	701a      	strb	r2, [r3, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <split_int16>:
 * @brief Split a 16-bit signed integer into high and low bytes
 * @param value The 16-bit signed value to split
 * @param high_byte Pointer to store the high byte (bits 15-8)
 * @param low_byte Pointer to store the low byte (bits 7-0)
 */
void split_int16(int16_t value, uint8_t *high_byte, uint8_t *low_byte) {
 8002ab2:	b480      	push	{r7}
 8002ab4:	b085      	sub	sp, #20
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	4603      	mov	r3, r0
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	81fb      	strh	r3, [r7, #14]
    *high_byte = (value >> 8) & 0xFF;  // Extract upper 8 bits
 8002ac0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ac4:	121b      	asrs	r3, r3, #8
 8002ac6:	b21b      	sxth	r3, r3
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	701a      	strb	r2, [r3, #0]
    *low_byte  = value & 0xFF;         // Extract lower 8 bits
 8002ace:	89fb      	ldrh	r3, [r7, #14]
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	701a      	strb	r2, [r3, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <can_logger_cycle>:
 * 2. Packs pressure sensor data (3 x 16-bit values) into CAN payload
 * 3. Packs fan RPM data (1 x 16-bit value) into CAN payload
 * 4. Transmits CAN message every 5ms
 * 5. Uses mock data if real sensors are not available
 */
void can_logger_cycle(void const *argument){
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b0a8      	sub	sp, #160	@ 0xa0
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  // Configure CAN message ID based on GPIO status
  if (can_gpio_verification){
 8002aec:	4b55      	ldr	r3, [pc, #340]	@ (8002c44 <can_logger_cycle+0x160>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <can_logger_cycle+0x18>
    TxHeader.StdId = CAN_GPIO_TRIGGERED;
 8002af4:	4b54      	ldr	r3, [pc, #336]	@ (8002c48 <can_logger_cycle+0x164>)
 8002af6:	2208      	movs	r2, #8
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	e002      	b.n	8002b02 <can_logger_cycle+0x1e>
  }else {
    TxHeader.StdId = CAN_GPIO_NON_TRIGGERED;
 8002afc:	4b52      	ldr	r3, [pc, #328]	@ (8002c48 <can_logger_cycle+0x164>)
 8002afe:	2209      	movs	r2, #9
 8002b00:	601a      	str	r2, [r3, #0]
  }

  // Configure CAN header parameters
  TxHeader.RTR = CAN_RTR_DATA;           // Data frame (not remote request)
 8002b02:	4b51      	ldr	r3, [pc, #324]	@ (8002c48 <can_logger_cycle+0x164>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;             // Standard 11-bit identifier
 8002b08:	4b4f      	ldr	r3, [pc, #316]	@ (8002c48 <can_logger_cycle+0x164>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 6;                      // Data length: 6 bytes (3 sensors × 2 bytes + fan data)
 8002b0e:	4b4e      	ldr	r3, [pc, #312]	@ (8002c48 <can_logger_cycle+0x164>)
 8002b10:	2206      	movs	r2, #6
 8002b12:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE; // No global time transmission
 8002b14:	4b4c      	ldr	r3, [pc, #304]	@ (8002c48 <can_logger_cycle+0x164>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	751a      	strb	r2, [r3, #20]

  for(;;) {
    // Pack pressure sensor data into CAN payload (bytes 0-5)
    if(g_sensor_data != NULL){
 8002b1a:	4b4c      	ldr	r3, [pc, #304]	@ (8002c4c <can_logger_cycle+0x168>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d01b      	beq.n	8002b5a <can_logger_cycle+0x76>
        // Real sensor data: pack three 16-bit pressure values
        split_int16(g_sensor_data->delta_pres_0, &TxData[0], &TxData[1]);
 8002b22:	4b4a      	ldr	r3, [pc, #296]	@ (8002c4c <can_logger_cycle+0x168>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b2a:	4a49      	ldr	r2, [pc, #292]	@ (8002c50 <can_logger_cycle+0x16c>)
 8002b2c:	4949      	ldr	r1, [pc, #292]	@ (8002c54 <can_logger_cycle+0x170>)
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff ffbf 	bl	8002ab2 <split_int16>
        split_int16(g_sensor_data->delta_pres_1, &TxData[2], &TxData[3]); // Note: original code has bug using delta_pres_0
 8002b34:	4b45      	ldr	r3, [pc, #276]	@ (8002c4c <can_logger_cycle+0x168>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b3c:	4a46      	ldr	r2, [pc, #280]	@ (8002c58 <can_logger_cycle+0x174>)
 8002b3e:	4947      	ldr	r1, [pc, #284]	@ (8002c5c <can_logger_cycle+0x178>)
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ffb6 	bl	8002ab2 <split_int16>
        split_int16(g_sensor_data->delta_pres_2, &TxData[4], &TxData[5]); // Note: original code has bug using delta_pres_0
 8002b46:	4b41      	ldr	r3, [pc, #260]	@ (8002c4c <can_logger_cycle+0x168>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b4e:	4a44      	ldr	r2, [pc, #272]	@ (8002c60 <can_logger_cycle+0x17c>)
 8002b50:	4944      	ldr	r1, [pc, #272]	@ (8002c64 <can_logger_cycle+0x180>)
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff ffad 	bl	8002ab2 <split_int16>
 8002b58:	e01c      	b.n	8002b94 <can_logger_cycle+0xb0>
    }else {
        // Mock sensor data when real sensors unavailable
        bmp280_sensors_data_t tmp_placeholder = {
 8002b5a:	4a43      	ldr	r2, [pc, #268]	@ (8002c68 <can_logger_cycle+0x184>)
 8002b5c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002b60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b64:	6018      	str	r0, [r3, #0]
 8002b66:	3304      	adds	r3, #4
 8002b68:	8019      	strh	r1, [r3, #0]
            .delta_pres_0 = -100,  // Mock pressure differential
            .delta_pres_1 = 100,   // Mock pressure differential
            .delta_pres_2 = 365    // Mock pressure differential
        };
        split_int16(tmp_placeholder.delta_pres_0, &TxData[0], &TxData[1]);
 8002b6a:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 8002b6e:	4a38      	ldr	r2, [pc, #224]	@ (8002c50 <can_logger_cycle+0x16c>)
 8002b70:	4938      	ldr	r1, [pc, #224]	@ (8002c54 <can_logger_cycle+0x170>)
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ff9d 	bl	8002ab2 <split_int16>
        split_int16(tmp_placeholder.delta_pres_1, &TxData[2], &TxData[3]); // Fixed to use correct values
 8002b78:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	@ 0x8e
 8002b7c:	4a36      	ldr	r2, [pc, #216]	@ (8002c58 <can_logger_cycle+0x174>)
 8002b7e:	4937      	ldr	r1, [pc, #220]	@ (8002c5c <can_logger_cycle+0x178>)
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ff96 	bl	8002ab2 <split_int16>
        split_int16(tmp_placeholder.delta_pres_2, &TxData[4], &TxData[5]); // Fixed to use correct values
 8002b86:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	@ 0x90
 8002b8a:	4a35      	ldr	r2, [pc, #212]	@ (8002c60 <can_logger_cycle+0x17c>)
 8002b8c:	4935      	ldr	r1, [pc, #212]	@ (8002c64 <can_logger_cycle+0x180>)
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff ff8f 	bl	8002ab2 <split_int16>
    }

    // Pack fan RPM data into CAN payload (bytes 6-7)
    if(g_driver_data != NULL){
 8002b94:	4b35      	ldr	r3, [pc, #212]	@ (8002c6c <can_logger_cycle+0x188>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <can_logger_cycle+0xca>
        // Real fan data
        split_uint16(g_driver_data->fan_rpm, &TxData[6], &TxData[7]);
 8002b9c:	4b33      	ldr	r3, [pc, #204]	@ (8002c6c <can_logger_cycle+0x188>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	4a33      	ldr	r2, [pc, #204]	@ (8002c70 <can_logger_cycle+0x18c>)
 8002ba4:	4933      	ldr	r1, [pc, #204]	@ (8002c74 <can_logger_cycle+0x190>)
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff ff6c 	bl	8002a84 <split_uint16>
 8002bac:	e00d      	b.n	8002bca <can_logger_cycle+0xe6>
    }else {
        // Mock fan data when driver unavailable
        max6650_data_t tmp_placeholder = {
 8002bae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bb2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
            .fan_rpm = 1000,        // Mock RPM value
            .status_flag = HAL_OK   // Mock status
        };
        split_uint16(tmp_placeholder.fan_rpm, &TxData[6], &TxData[7]);
 8002bbc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002bc0:	4a2b      	ldr	r2, [pc, #172]	@ (8002c70 <can_logger_cycle+0x18c>)
 8002bc2:	492c      	ldr	r1, [pc, #176]	@ (8002c74 <can_logger_cycle+0x190>)
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff5d 	bl	8002a84 <split_uint16>
    }

    // Transmit CAN message
    HAL_StatusTypeDef Current_Action = HAL_CAN_AddTxMessage(g_can_iface, &TxHeader, TxData, &TxMailbox);
 8002bca:	4b2b      	ldr	r3, [pc, #172]	@ (8002c78 <can_logger_cycle+0x194>)
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	4b2b      	ldr	r3, [pc, #172]	@ (8002c7c <can_logger_cycle+0x198>)
 8002bd0:	4a20      	ldr	r2, [pc, #128]	@ (8002c54 <can_logger_cycle+0x170>)
 8002bd2:	491d      	ldr	r1, [pc, #116]	@ (8002c48 <can_logger_cycle+0x164>)
 8002bd4:	f000 fe5d 	bl	8003892 <HAL_CAN_AddTxMessage>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    if (Current_Action == HAL_OK){
 8002bde:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d126      	bne.n	8002c34 <can_logger_cycle+0x150>
        NOTIFY_MESSAGE("Sent CAN Message\n");
 8002be6:	f107 0308 	add.w	r3, r7, #8
 8002bea:	4a25      	ldr	r2, [pc, #148]	@ (8002c80 <can_logger_cycle+0x19c>)
 8002bec:	2180      	movs	r1, #128	@ 0x80
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f006 fbd8 	bl	80093a4 <sniprintf>
 8002bf4:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
 8002bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bfc:	f107 0208 	add.w	r2, r7, #8
 8002c00:	18d0      	adds	r0, r2, r3
 8002c02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c06:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8002c84 <can_logger_cycle+0x1a0>)
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f006 fbc9 	bl	80093a4 <sniprintf>
 8002c12:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 8002c16:	4b1c      	ldr	r3, [pc, #112]	@ (8002c88 <can_logger_cycle+0x1a4>)
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	f107 0108 	add.w	r1, r7, #8
 8002c2e:	2364      	movs	r3, #100	@ 0x64
 8002c30:	f003 feb2 	bl	8006998 <HAL_UART_Transmit>
    }

    HAL_Delay(5);  // 5ms delay between transmissions
 8002c34:	2005      	movs	r0, #5
 8002c36:	f000 fd0d 	bl	8003654 <HAL_Delay>
    osDelay(1);    // Yield to other threads
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	f005 f96f 	bl	8007f1e <osDelay>
  for(;;) {
 8002c40:	e76b      	b.n	8002b1a <can_logger_cycle+0x36>
 8002c42:	bf00      	nop
 8002c44:	200005bc 	.word	0x200005bc
 8002c48:	200005f0 	.word	0x200005f0
 8002c4c:	200005c8 	.word	0x200005c8
 8002c50:	2000060d 	.word	0x2000060d
 8002c54:	2000060c 	.word	0x2000060c
 8002c58:	2000060f 	.word	0x2000060f
 8002c5c:	2000060e 	.word	0x2000060e
 8002c60:	20000611 	.word	0x20000611
 8002c64:	20000610 	.word	0x20000610
 8002c68:	08009ecc 	.word	0x08009ecc
 8002c6c:	200005c4 	.word	0x200005c4
 8002c70:	20000613 	.word	0x20000613
 8002c74:	20000612 	.word	0x20000612
 8002c78:	200005b4 	.word	0x200005b4
 8002c7c:	20000608 	.word	0x20000608
 8002c80:	08009eac 	.word	0x08009eac
 8002c84:	08009eb8 	.word	0x08009eb8
 8002c88:	200005a4 	.word	0x200005a4

08002c8c <mux_pres_cycle>:
 * 2. BMP280 multi-sensor system initialization
 * 3. Periodic pressure measurements from 6 sensors via I2C mux
 * 4. Fan control based on global command flags
 * 5. Data storage in global structures for other threads
 */
void mux_pres_cycle(void const *argument){
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8002c92:	af04      	add	r7, sp, #16
 8002c94:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002c98:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002c9c:	6018      	str	r0, [r3, #0]
  max6650_handle_t fan_controller;
  max6650_config_t fan_config;
  max6650_data_t fan_data;

  // Configure MAX6650 parameters
  fan_config.hi2c = g_driver_iface;                    // I2C interface
 8002c9e:	4bb7      	ldr	r3, [pc, #732]	@ (8002f7c <mux_pres_cycle+0x2f0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
  fan_config.add_line_connection = MAX6650_ADD_LINE_GND; // Address line grounded
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f887 321c 	strb.w	r3, [r7, #540]	@ 0x21c
  fan_config.operating_mode = MAX6650_MODE_CLOSED_LOOP;  // Closed-loop control
 8002cac:	2302      	movs	r3, #2
 8002cae:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
  fan_config.fan_voltage = MAX6650_FAN_VOLTAGE_12V;     // 12V fan
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
  fan_config.k_scale = MAX6650_KSCALE_4;               // K-scale factor
 8002cb8:	2302      	movs	r3, #2
 8002cba:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
  fan_config.rpm_max = 3000;                           // Maximum expected RPM for normal 12V motor
 8002cbe:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002cc2:	f8a7 3220 	strh.w	r3, [r7, #544]	@ 0x220
  fan_config.i2c_timeout = 1000;                       // I2C timeout in ms
 8002cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cca:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224

  bool init_succ = false;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257
  if (MAX6650_Init(&fan_controller, &fan_config)){
 8002cd4:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8002cd8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fd75 	bl	80017ce <MAX6650_Init>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d008      	beq.n	8002cfc <mux_pres_cycle+0x70>
    MAX6650_ControlFan(&fan_controller, CFF_AUTO);  // Start in auto mode
 8002cea:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8002cee:	2103      	movs	r1, #3
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fe fe2a 	bl	800194a <MAX6650_ControlFan>
    init_succ = true;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257
  }

  // Initialize BMP280 multi-sensor system (6 sensors on I2C mux)
  uint8_t sensor_addresses[6] = {0x76, 0x76, 0x76, 0x76, 0x76, 0x76}; // All sensors use same I2C address
 8002cfc:	4aa0      	ldr	r2, [pc, #640]	@ (8002f80 <mux_pres_cycle+0x2f4>)
 8002cfe:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8002d02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d06:	6018      	str	r0, [r3, #0]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	8019      	strh	r1, [r3, #0]
  uint8_t sensor_channels[6] = {0, 1, 2, 3, 4, 5};                    // Different mux channels
 8002d0c:	4a9d      	ldr	r2, [pc, #628]	@ (8002f84 <mux_pres_cycle+0x2f8>)
 8002d0e:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002d12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d16:	6018      	str	r0, [r3, #0]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	8019      	strh	r1, [r3, #0]
  bmp280_multi_system_t sensor_system;
  bmp280_sensors_data_t pressure_data;

  bool init_success = bmp280_multi_init(&sensor_system, g_mux_iface, NULL, 0, 0, sensor_addresses, sensor_channels);
 8002d1c:	4b9a      	ldr	r3, [pc, #616]	@ (8002f88 <mux_pres_cycle+0x2fc>)
 8002d1e:	6819      	ldr	r1, [r3, #0]
 8002d20:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8002d24:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002d28:	9302      	str	r3, [sp, #8]
 8002d2a:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8002d2e:	9301      	str	r3, [sp, #4]
 8002d30:	2300      	movs	r3, #0
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	2300      	movs	r3, #0
 8002d36:	2200      	movs	r2, #0
 8002d38:	f7fe fef5 	bl	8001b26 <bmp280_multi_init>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f887 3256 	strb.w	r3, [r7, #598]	@ 0x256
  if (!init_success) {
 8002d42:	f897 3256 	ldrb.w	r3, [r7, #598]	@ 0x256
 8002d46:	f083 0301 	eor.w	r3, r3, #1
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d026      	beq.n	8002d9e <mux_pres_cycle+0x112>
    NOTIFY_MESSAGE("ERROR: Failed to initialize BMP280 multi-sensor system!");
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	4a8d      	ldr	r2, [pc, #564]	@ (8002f8c <mux_pres_cycle+0x300>)
 8002d56:	2180      	movs	r1, #128	@ 0x80
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f006 fb23 	bl	80093a4 <sniprintf>
 8002d5e:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
 8002d62:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002d66:	f107 020c 	add.w	r2, r7, #12
 8002d6a:	18d0      	adds	r0, r2, r3
 8002d6c:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002d70:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002d74:	4a86      	ldr	r2, [pc, #536]	@ (8002f90 <mux_pres_cycle+0x304>)
 8002d76:	4619      	mov	r1, r3
 8002d78:	f006 fb14 	bl	80093a4 <sniprintf>
 8002d7c:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 8002d80:	4b84      	ldr	r3, [pc, #528]	@ (8002f94 <mux_pres_cycle+0x308>)
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	f107 010c 	add.w	r1, r7, #12
 8002d98:	2364      	movs	r3, #100	@ 0x64
 8002d9a:	f003 fdfd 	bl	8006998 <HAL_UART_Transmit>
  }

  for(;;) {
    // Handle fan control commands
    if(init_success){
 8002d9e:	f897 3256 	ldrb.w	r3, [r7, #598]	@ 0x256
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 80b1 	beq.w	8002f0a <mux_pres_cycle+0x27e>
      if (global_action_flag != 0){
 8002da8:	4b7b      	ldr	r3, [pc, #492]	@ (8002f98 <mux_pres_cycle+0x30c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01e      	beq.n	8002dee <mux_pres_cycle+0x162>
        switch(global_action_flag){
 8002db0:	4b79      	ldr	r3, [pc, #484]	@ (8002f98 <mux_pres_cycle+0x30c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d002      	beq.n	8002dbe <mux_pres_cycle+0x132>
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d007      	beq.n	8002dcc <mux_pres_cycle+0x140>
 8002dbc:	e00d      	b.n	8002dda <mux_pres_cycle+0x14e>
          case 1:
            MAX6650_ControlFan(&fan_controller, CFF_ON);   // Force fan ON
 8002dbe:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe fdc0 	bl	800194a <MAX6650_ControlFan>
            break;
 8002dca:	e00d      	b.n	8002de8 <mux_pres_cycle+0x15c>
          case 2:
            MAX6650_ControlFan(&fan_controller, CFF_OFF);  // Force fan OFF
 8002dcc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe fdb9 	bl	800194a <MAX6650_ControlFan>
            break;
 8002dd8:	e006      	b.n	8002de8 <mux_pres_cycle+0x15c>
          default:
            MAX6650_ControlFan(&fan_controller, CFF_AUTO); // Automatic control
 8002dda:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8002dde:	2103      	movs	r1, #3
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fe fdb2 	bl	800194a <MAX6650_ControlFan>
            break;
 8002de6:	bf00      	nop
        }
        global_action_flag = 0;  // Clear command flag
 8002de8:	4b6b      	ldr	r3, [pc, #428]	@ (8002f98 <mux_pres_cycle+0x30c>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
      }

      // Perform pressure measurements
      if (bmp280_multi_force_measurement(&sensor_system)) {
 8002dee:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe ff9c 	bl	8001d30 <bmp280_multi_force_measurement>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d05d      	beq.n	8002eba <mux_pres_cycle+0x22e>
        HAL_Delay(100);  // Wait for measurement completion
 8002dfe:	2064      	movs	r0, #100	@ 0x64
 8002e00:	f000 fc28 	bl	8003654 <HAL_Delay>

        // Wait for all sensors to complete measurement
        while (bmp280_multi_is_measuring(&sensor_system)) {
 8002e04:	e002      	b.n	8002e0c <mux_pres_cycle+0x180>
          HAL_Delay(10);
 8002e06:	200a      	movs	r0, #10
 8002e08:	f000 fc24 	bl	8003654 <HAL_Delay>
        while (bmp280_multi_is_measuring(&sensor_system)) {
 8002e0c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe ffdc 	bl	8001dce <bmp280_multi_is_measuring>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f4      	bne.n	8002e06 <mux_pres_cycle+0x17a>
        }

        // Read pressure differences from all sensors
        if (bmp280_multi_read_differences(&sensor_system, &pressure_data)) {
 8002e1c:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8002e20:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002e24:	4611      	mov	r1, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff f812 	bl	8001e50 <bmp280_multi_read_differences>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d01b      	beq.n	8002e6a <mux_pres_cycle+0x1de>
          // Store real sensor data
          g_sensor_data->delta_pres_0 = pressure_data.delta_pres_0;
 8002e32:	4b5a      	ldr	r3, [pc, #360]	@ (8002f9c <mux_pres_cycle+0x310>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8002e3a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e3e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e42:	801a      	strh	r2, [r3, #0]
          g_sensor_data->delta_pres_1 = pressure_data.delta_pres_1;
 8002e44:	4b55      	ldr	r3, [pc, #340]	@ (8002f9c <mux_pres_cycle+0x310>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8002e4c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e50:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8002e54:	805a      	strh	r2, [r3, #2]
          g_sensor_data->delta_pres_2 = pressure_data.delta_pres_2;
 8002e56:	4b51      	ldr	r3, [pc, #324]	@ (8002f9c <mux_pres_cycle+0x310>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8002e5e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e62:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002e66:	809a      	strh	r2, [r3, #4]
 8002e68:	e05d      	b.n	8002f26 <mux_pres_cycle+0x29a>
        } else {
          NOTIFY_MESSAGE("ERROR: Failed to read sensor differences");
 8002e6a:	f107 030c 	add.w	r3, r7, #12
 8002e6e:	4a47      	ldr	r2, [pc, #284]	@ (8002f8c <mux_pres_cycle+0x300>)
 8002e70:	2180      	movs	r1, #128	@ 0x80
 8002e72:	4618      	mov	r0, r3
 8002e74:	f006 fa96 	bl	80093a4 <sniprintf>
 8002e78:	f8c7 0240 	str.w	r0, [r7, #576]	@ 0x240
 8002e7c:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8002e80:	f107 020c 	add.w	r2, r7, #12
 8002e84:	18d0      	adds	r0, r2, r3
 8002e86:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8002e8a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002e8e:	4a44      	ldr	r2, [pc, #272]	@ (8002fa0 <mux_pres_cycle+0x314>)
 8002e90:	4619      	mov	r1, r3
 8002e92:	f006 fa87 	bl	80093a4 <sniprintf>
 8002e96:	f8c7 023c 	str.w	r0, [r7, #572]	@ 0x23c
 8002e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f94 <mux_pres_cycle+0x308>)
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	f107 010c 	add.w	r1, r7, #12
 8002eb2:	2364      	movs	r3, #100	@ 0x64
 8002eb4:	f003 fd70 	bl	8006998 <HAL_UART_Transmit>
 8002eb8:	e035      	b.n	8002f26 <mux_pres_cycle+0x29a>
        }
      }else {
        NOTIFY_MESSAGE("ERROR: Failed to force measurements");
 8002eba:	f107 030c 	add.w	r3, r7, #12
 8002ebe:	4a33      	ldr	r2, [pc, #204]	@ (8002f8c <mux_pres_cycle+0x300>)
 8002ec0:	2180      	movs	r1, #128	@ 0x80
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f006 fa6e 	bl	80093a4 <sniprintf>
 8002ec8:	f8c7 0248 	str.w	r0, [r7, #584]	@ 0x248
 8002ecc:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8002ed0:	f107 020c 	add.w	r2, r7, #12
 8002ed4:	18d0      	adds	r0, r2, r3
 8002ed6:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8002eda:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002ede:	4a31      	ldr	r2, [pc, #196]	@ (8002fa4 <mux_pres_cycle+0x318>)
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	f006 fa5f 	bl	80093a4 <sniprintf>
 8002ee6:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
 8002eea:	4b2a      	ldr	r3, [pc, #168]	@ (8002f94 <mux_pres_cycle+0x308>)
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	4413      	add	r3, r2
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	f107 010c 	add.w	r1, r7, #12
 8002f02:	2364      	movs	r3, #100	@ 0x64
 8002f04:	f003 fd48 	bl	8006998 <HAL_UART_Transmit>
 8002f08:	e00d      	b.n	8002f26 <mux_pres_cycle+0x29a>
      }
    }else {
      // Use mock data when sensors are not initialized
      g_sensor_data->delta_pres_0 = -200; // Mock Data
 8002f0a:	4b24      	ldr	r3, [pc, #144]	@ (8002f9c <mux_pres_cycle+0x310>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8002f12:	801a      	strh	r2, [r3, #0]
      g_sensor_data->delta_pres_1 = 200;  // Mock Data
 8002f14:	4b21      	ldr	r3, [pc, #132]	@ (8002f9c <mux_pres_cycle+0x310>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	22c8      	movs	r2, #200	@ 0xc8
 8002f1a:	805a      	strh	r2, [r3, #2]
      g_sensor_data->delta_pres_2 = 730;  // Mock Data
 8002f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f9c <mux_pres_cycle+0x310>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f240 22da 	movw	r2, #730	@ 0x2da
 8002f24:	809a      	strh	r2, [r3, #4]
    }

    // Read fan controller data
    if(init_succ){
 8002f26:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d015      	beq.n	8002f5a <mux_pres_cycle+0x2ce>
      if (MAX6650_ReadData(&fan_controller, &fan_data)) {
 8002f2e:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 8002f32:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8002f36:	4611      	mov	r1, r2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fe fcbd 	bl	80018b8 <MAX6650_ReadData>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d013      	beq.n	8002f6c <mux_pres_cycle+0x2e0>
        // Store real fan data
        g_driver_data->fan_rpm = fan_data.fan_rpm;
 8002f44:	4b18      	ldr	r3, [pc, #96]	@ (8002fa8 <mux_pres_cycle+0x31c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8b7 2214 	ldrh.w	r2, [r7, #532]	@ 0x214
 8002f4c:	801a      	strh	r2, [r3, #0]
        g_driver_data->status_flag = fan_data.status_flag;
 8002f4e:	4b16      	ldr	r3, [pc, #88]	@ (8002fa8 <mux_pres_cycle+0x31c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f897 2216 	ldrb.w	r2, [r7, #534]	@ 0x216
 8002f56:	709a      	strb	r2, [r3, #2]
 8002f58:	e008      	b.n	8002f6c <mux_pres_cycle+0x2e0>
      }
    }else {
      // Use mock data when fan controller not initialized
      g_driver_data->fan_rpm = 1200;         // Mock Data
 8002f5a:	4b13      	ldr	r3, [pc, #76]	@ (8002fa8 <mux_pres_cycle+0x31c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8002f62:	801a      	strh	r2, [r3, #0]
      g_driver_data->status_flag = HAL_OK;   // Mock Data
 8002f64:	4b10      	ldr	r3, [pc, #64]	@ (8002fa8 <mux_pres_cycle+0x31c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	709a      	strb	r2, [r3, #2]
    }

    HAL_Delay(100);  // 100ms cycle time
 8002f6c:	2064      	movs	r0, #100	@ 0x64
 8002f6e:	f000 fb71 	bl	8003654 <HAL_Delay>
    osDelay(1);      // Yield to other threads
 8002f72:	2001      	movs	r0, #1
 8002f74:	f004 ffd3 	bl	8007f1e <osDelay>
    if(init_success){
 8002f78:	e711      	b.n	8002d9e <mux_pres_cycle+0x112>
 8002f7a:	bf00      	nop
 8002f7c:	200005a8 	.word	0x200005a8
 8002f80:	08009f64 	.word	0x08009f64
 8002f84:	08009f6c 	.word	0x08009f6c
 8002f88:	200005ac 	.word	0x200005ac
 8002f8c:	08009eac 	.word	0x08009eac
 8002f90:	08009ed4 	.word	0x08009ed4
 8002f94:	200005a4 	.word	0x200005a4
 8002f98:	200005c0 	.word	0x200005c0
 8002f9c:	200005c8 	.word	0x200005c8
 8002fa0:	08009f10 	.word	0x08009f10
 8002fa4:	08009f3c 	.word	0x08009f3c
 8002fa8:	200005c4 	.word	0x200005c4

08002fac <uart_logger_cycle>:
 * 2. Creates UART transmission packets with CRC
 * 3. Encodes data using COBS (Consistent Overhead Byte Stuffing)
 * 4. Verifies encoding integrity before transmission
 * 5. Transmits encoded data via UART every 500ms
 */
void uart_logger_cycle(void const *argument){
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b0c6      	sub	sp, #280	@ 0x118
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002fb6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002fba:	6018      	str	r0, [r3, #0]
  for(;;) {
    raw_data_t raw_data_placeholder;

    // Collect pressure sensor data
    if(g_sensor_data != NULL){
 8002fbc:	4b71      	ldr	r3, [pc, #452]	@ (8003184 <uart_logger_cycle+0x1d8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d012      	beq.n	8002fea <uart_logger_cycle+0x3e>
        raw_data_placeholder.delta_pres_0 = g_sensor_data->delta_pres_0;
 8002fc4:	4b6f      	ldr	r3, [pc, #444]	@ (8003184 <uart_logger_cycle+0x1d8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fcc:	f8a7 30f4 	strh.w	r3, [r7, #244]	@ 0xf4
        raw_data_placeholder.delta_pres_1 = g_sensor_data->delta_pres_1;
 8002fd0:	4b6c      	ldr	r3, [pc, #432]	@ (8003184 <uart_logger_cycle+0x1d8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002fd8:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
        raw_data_placeholder.delta_pres_2 = g_sensor_data->delta_pres_2;
 8002fdc:	4b69      	ldr	r3, [pc, #420]	@ (8003184 <uart_logger_cycle+0x1d8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002fe4:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
 8002fe8:	e013      	b.n	8003012 <uart_logger_cycle+0x66>
    }else {
        // Use mock data when sensor data unavailable
        bmp280_sensors_data_t tmp_placeholder = {
 8002fea:	4a67      	ldr	r2, [pc, #412]	@ (8003188 <uart_logger_cycle+0x1dc>)
 8002fec:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8002ff0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ff4:	6018      	str	r0, [r3, #0]
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	8019      	strh	r1, [r3, #0]
          .delta_pres_0 = -100, // Mock Data
          .delta_pres_1 = 100,  // Mock Data
          .delta_pres_2 = 365   // Mock Data
        };
        raw_data_placeholder.delta_pres_0 = tmp_placeholder.delta_pres_0;
 8002ffa:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 8002ffe:	f8a7 30f4 	strh.w	r3, [r7, #244]	@ 0xf4
        raw_data_placeholder.delta_pres_1 = tmp_placeholder.delta_pres_1;
 8003002:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	@ 0xd2
 8003006:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
        raw_data_placeholder.delta_pres_2 = tmp_placeholder.delta_pres_2;
 800300a:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	@ 0xd4
 800300e:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
    }

    // Collect fan controller data
    if(g_driver_data != NULL){
 8003012:	4b5e      	ldr	r3, [pc, #376]	@ (800318c <uart_logger_cycle+0x1e0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <uart_logger_cycle+0x84>
        raw_data_placeholder.fan_rpm = g_driver_data->fan_rpm;
 800301a:	4b5c      	ldr	r3, [pc, #368]	@ (800318c <uart_logger_cycle+0x1e0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
        raw_data_placeholder.status_flag = g_driver_data->status_flag;
 8003024:	4b59      	ldr	r3, [pc, #356]	@ (800318c <uart_logger_cycle+0x1e0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	789b      	ldrb	r3, [r3, #2]
 800302a:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc
 800302e:	e00e      	b.n	800304e <uart_logger_cycle+0xa2>
    }else {
        // Use mock data when driver data unavailable
        max6650_data_t tmp_placeholder = {
 8003030:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003034:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
 8003038:	2300      	movs	r3, #0
 800303a:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
            .fan_rpm = 1000,        // Mock Data
            .status_flag = HAL_OK   // Mock Data
        };
        raw_data_placeholder.fan_rpm = tmp_placeholder.fan_rpm;
 800303e:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8003042:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
        raw_data_placeholder.status_flag = tmp_placeholder.status_flag;
 8003046:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 800304a:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc
    }

    // Create UART transmission packet with CRC
    uart_tx_logging_t temp_uart_data_placeholder = create_uart_tx_packet(&raw_data_placeholder);
 800304e:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8003052:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f7fe f95d 	bl	8001318 <create_uart_tx_packet>

    // Encode packet using COBS algorithm
    uint8_t encoded_tx_buffer[64];
    size_t encoded_tx_size = encode_uart_tx_packet(&temp_uart_data_placeholder, encoded_tx_buffer, sizeof(encoded_tx_buffer));
 800305e:	f107 010c 	add.w	r1, r7, #12
 8003062:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8003066:	2240      	movs	r2, #64	@ 0x40
 8003068:	4618      	mov	r0, r3
 800306a:	f7fe fa55 	bl	8001518 <encode_uart_tx_packet>
 800306e:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    // Prepare original data for verification
    uint8_t original_data[sizeof(uart_tx_logging_t) + sizeof(uint16_t)];
    memcpy(original_data, &temp_uart_data_placeholder, sizeof(uart_tx_logging_t));
 8003072:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8003076:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800307a:	220c      	movs	r2, #12
 800307c:	4618      	mov	r0, r3
 800307e:	f006 fa69 	bl	8009554 <memcpy>
    uint16_t packet_crc = calculate_crc16((uint8_t*)&temp_uart_data_placeholder, sizeof(uart_tx_logging_t));
 8003082:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8003086:	210c      	movs	r1, #12
 8003088:	4618      	mov	r0, r3
 800308a:	f7fe f905 	bl	8001298 <calculate_crc16>
 800308e:	4603      	mov	r3, r0
 8003090:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
    memcpy(original_data + sizeof(uart_tx_logging_t), &packet_crc, sizeof(uint16_t));
 8003094:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8003098:	330c      	adds	r3, #12
 800309a:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 800309e:	801a      	strh	r2, [r3, #0]

    // Verify COBS encoding integrity
    bool encoding_valid = verify_cobs_encoding(original_data, sizeof(original_data), encoded_tx_buffer, encoded_tx_size);
 80030a0:	f107 020c 	add.w	r2, r7, #12
 80030a4:	f107 00d8 	add.w	r0, r7, #216	@ 0xd8
 80030a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ac:	210e      	movs	r1, #14
 80030ae:	f7fe fa60 	bl	8001572 <verify_cobs_encoding>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
    if (encoding_valid){
 80030b8:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d031      	beq.n	8003124 <uart_logger_cycle+0x178>
      LOG_DATA_ENCODED(encoded_tx_buffer, encoded_tx_size);
 80030c0:	4b33      	ldr	r3, [pc, #204]	@ (8003190 <uart_logger_cycle+0x1e4>)
 80030c2:	6818      	ldr	r0, [r3, #0]
 80030c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	f107 010c 	add.w	r1, r7, #12
 80030ce:	2364      	movs	r3, #100	@ 0x64
 80030d0:	f003 fc62 	bl	8006998 <HAL_UART_Transmit>
      NOTIFY_MESSAGE("Verificated Encoding Data\n");
 80030d4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80030d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003194 <uart_logger_cycle+0x1e8>)
 80030da:	2180      	movs	r1, #128	@ 0x80
 80030dc:	4618      	mov	r0, r3
 80030de:	f006 f961 	bl	80093a4 <sniprintf>
 80030e2:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
 80030e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030ea:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80030ee:	18d0      	adds	r0, r2, r3
 80030f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030f4:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80030f8:	4a27      	ldr	r2, [pc, #156]	@ (8003198 <uart_logger_cycle+0x1ec>)
 80030fa:	4619      	mov	r1, r3
 80030fc:	f006 f952 	bl	80093a4 <sniprintf>
 8003100:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
 8003104:	4b25      	ldr	r3, [pc, #148]	@ (800319c <uart_logger_cycle+0x1f0>)
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800310c:	b29a      	uxth	r2, r3
 800310e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003112:	b29b      	uxth	r3, r3
 8003114:	4413      	add	r3, r2
 8003116:	b29a      	uxth	r2, r3
 8003118:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800311c:	2364      	movs	r3, #100	@ 0x64
 800311e:	f003 fc3b 	bl	8006998 <HAL_UART_Transmit>
 8003122:	e026      	b.n	8003172 <uart_logger_cycle+0x1c6>
    }else{
      NOTIFY_MESSAGE("Invalid Message Generation, Rejected no verification\n");
 8003124:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003128:	4a1a      	ldr	r2, [pc, #104]	@ (8003194 <uart_logger_cycle+0x1e8>)
 800312a:	2180      	movs	r1, #128	@ 0x80
 800312c:	4618      	mov	r0, r3
 800312e:	f006 f939 	bl	80093a4 <sniprintf>
 8003132:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 8003136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800313a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800313e:	18d0      	adds	r0, r2, r3
 8003140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003144:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8003148:	4a15      	ldr	r2, [pc, #84]	@ (80031a0 <uart_logger_cycle+0x1f4>)
 800314a:	4619      	mov	r1, r3
 800314c:	f006 f92a 	bl	80093a4 <sniprintf>
 8003150:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
 8003154:	4b11      	ldr	r3, [pc, #68]	@ (800319c <uart_logger_cycle+0x1f0>)
 8003156:	6818      	ldr	r0, [r3, #0]
 8003158:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800315c:	b29a      	uxth	r2, r3
 800315e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003162:	b29b      	uxth	r3, r3
 8003164:	4413      	add	r3, r2
 8003166:	b29a      	uxth	r2, r3
 8003168:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800316c:	2364      	movs	r3, #100	@ 0x64
 800316e:	f003 fc13 	bl	8006998 <HAL_UART_Transmit>
    }

    HAL_Delay(500);  // 500ms transmission interval
 8003172:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003176:	f000 fa6d 	bl	8003654 <HAL_Delay>
    osDelay(1);      // Yield to other threads
 800317a:	2001      	movs	r0, #1
 800317c:	f004 fecf 	bl	8007f1e <osDelay>
  for(;;) {
 8003180:	e71c      	b.n	8002fbc <uart_logger_cycle+0x10>
 8003182:	bf00      	nop
 8003184:	200005c8 	.word	0x200005c8
 8003188:	08009ecc 	.word	0x08009ecc
 800318c:	200005c4 	.word	0x200005c4
 8003190:	200005a0 	.word	0x200005a0
 8003194:	08009eac 	.word	0x08009eac
 8003198:	08009f74 	.word	0x08009f74
 800319c:	200005a4 	.word	0x200005a4
 80031a0:	08009f90 	.word	0x08009f90

080031a4 <HAL_UARTEx_RxEventCallback>:
 *
 * This callback is triggered when UART data is received via DMA.
 * It copies received data to main buffer and sets validation flag.
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	807b      	strh	r3, [r7, #2]
    LOG_MESSAGE("Notification\n");
 80031b0:	4b10      	ldr	r3, [pc, #64]	@ (80031f4 <HAL_UARTEx_RxEventCallback+0x50>)
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	2364      	movs	r3, #100	@ 0x64
 80031b6:	220e      	movs	r2, #14
 80031b8:	490f      	ldr	r1, [pc, #60]	@ (80031f8 <HAL_UARTEx_RxEventCallback+0x54>)
 80031ba:	f003 fbed 	bl	8006998 <HAL_UART_Transmit>
    if (huart->Instance == Current_Target)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b0e      	ldr	r3, [pc, #56]	@ (80031fc <HAL_UARTEx_RxEventCallback+0x58>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d10f      	bne.n	80031ea <HAL_UARTEx_RxEventCallback+0x46>
    {
        memcpy(main_buff, rx_buff, Size);  // Copy received data to main buffer
 80031ca:	887b      	ldrh	r3, [r7, #2]
 80031cc:	461a      	mov	r2, r3
 80031ce:	490c      	ldr	r1, [pc, #48]	@ (8003200 <HAL_UARTEx_RxEventCallback+0x5c>)
 80031d0:	480c      	ldr	r0, [pc, #48]	@ (8003204 <HAL_UARTEx_RxEventCallback+0x60>)
 80031d2:	f006 f9bf 	bl	8009554 <memcpy>
        HAL_UARTEx_ReceiveToIdle_DMA(g_data_logger, rx_buff, rx_buff_size);  // Restart DMA reception
 80031d6:	4b07      	ldr	r3, [pc, #28]	@ (80031f4 <HAL_UARTEx_RxEventCallback+0x50>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	220a      	movs	r2, #10
 80031dc:	4908      	ldr	r1, [pc, #32]	@ (8003200 <HAL_UARTEx_RxEventCallback+0x5c>)
 80031de:	4618      	mov	r0, r3
 80031e0:	f004 fdde 	bl	8007da0 <HAL_UARTEx_ReceiveToIdle_DMA>
        rx_validation = 1;  // Set flag for main thread processing
 80031e4:	4b08      	ldr	r3, [pc, #32]	@ (8003208 <HAL_UARTEx_RxEventCallback+0x64>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
    }
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	200005a0 	.word	0x200005a0
 80031f8:	08009fc8 	.word	0x08009fc8
 80031fc:	200005b8 	.word	0x200005b8
 8003200:	200005cc 	.word	0x200005cc
 8003204:	200005d8 	.word	0x200005d8
 8003208:	200005ec 	.word	0x200005ec

0800320c <handle_uart_cmd>:
 * Processes fan control commands and sets global action flags:
 * - CFF_ON: Force fan ON
 * - CFF_OFF: Force fan OFF
 * - Default: Automatic fan control
 */
void handle_uart_cmd(uart_rx_command_t* current_command){
 800320c:	b580      	push	{r7, lr}
 800320e:	b0a8      	sub	sp, #160	@ 0xa0
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  switch(current_command->commandvalue){
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d002      	beq.n	8003222 <handle_uart_cmd+0x16>
 800321c:	2b02      	cmp	r3, #2
 800321e:	d02b      	beq.n	8003278 <handle_uart_cmd+0x6c>
 8003220:	e055      	b.n	80032ce <handle_uart_cmd+0xc2>
    case CFF_ON:
      NOTIFY_MESSAGE("Command Target ON");
 8003222:	f107 0308 	add.w	r3, r7, #8
 8003226:	4a41      	ldr	r2, [pc, #260]	@ (800332c <handle_uart_cmd+0x120>)
 8003228:	2180      	movs	r1, #128	@ 0x80
 800322a:	4618      	mov	r0, r3
 800322c:	f006 f8ba 	bl	80093a4 <sniprintf>
 8003230:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 8003234:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003238:	f107 0208 	add.w	r2, r7, #8
 800323c:	18d0      	adds	r0, r2, r3
 800323e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003242:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8003246:	4a3a      	ldr	r2, [pc, #232]	@ (8003330 <handle_uart_cmd+0x124>)
 8003248:	4619      	mov	r1, r3
 800324a:	f006 f8ab 	bl	80093a4 <sniprintf>
 800324e:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 8003252:	4b38      	ldr	r3, [pc, #224]	@ (8003334 <handle_uart_cmd+0x128>)
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800325a:	b29a      	uxth	r2, r3
 800325c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003260:	b29b      	uxth	r3, r3
 8003262:	4413      	add	r3, r2
 8003264:	b29a      	uxth	r2, r3
 8003266:	f107 0108 	add.w	r1, r7, #8
 800326a:	2364      	movs	r3, #100	@ 0x64
 800326c:	f003 fb94 	bl	8006998 <HAL_UART_Transmit>
      global_action_flag = 1;  // Set flag for fan ON
 8003270:	4b31      	ldr	r3, [pc, #196]	@ (8003338 <handle_uart_cmd+0x12c>)
 8003272:	2201      	movs	r2, #1
 8003274:	601a      	str	r2, [r3, #0]
      break;
 8003276:	e055      	b.n	8003324 <handle_uart_cmd+0x118>
    case CFF_OFF:
      NOTIFY_MESSAGE("Command Target OFF");
 8003278:	f107 0308 	add.w	r3, r7, #8
 800327c:	4a2b      	ldr	r2, [pc, #172]	@ (800332c <handle_uart_cmd+0x120>)
 800327e:	2180      	movs	r1, #128	@ 0x80
 8003280:	4618      	mov	r0, r3
 8003282:	f006 f88f 	bl	80093a4 <sniprintf>
 8003286:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800328a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800328e:	f107 0208 	add.w	r2, r7, #8
 8003292:	18d0      	adds	r0, r2, r3
 8003294:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003298:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800329c:	4a27      	ldr	r2, [pc, #156]	@ (800333c <handle_uart_cmd+0x130>)
 800329e:	4619      	mov	r1, r3
 80032a0:	f006 f880 	bl	80093a4 <sniprintf>
 80032a4:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
 80032a8:	4b22      	ldr	r3, [pc, #136]	@ (8003334 <handle_uart_cmd+0x128>)
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	4413      	add	r3, r2
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	f107 0108 	add.w	r1, r7, #8
 80032c0:	2364      	movs	r3, #100	@ 0x64
 80032c2:	f003 fb69 	bl	8006998 <HAL_UART_Transmit>
      global_action_flag = 2;  // Set flag for fan OFF
 80032c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003338 <handle_uart_cmd+0x12c>)
 80032c8:	2202      	movs	r2, #2
 80032ca:	601a      	str	r2, [r3, #0]
      break;
 80032cc:	e02a      	b.n	8003324 <handle_uart_cmd+0x118>
    default:
      NOTIFY_MESSAGE("Command Target AUTO");
 80032ce:	f107 0308 	add.w	r3, r7, #8
 80032d2:	4a16      	ldr	r2, [pc, #88]	@ (800332c <handle_uart_cmd+0x120>)
 80032d4:	2180      	movs	r1, #128	@ 0x80
 80032d6:	4618      	mov	r0, r3
 80032d8:	f006 f864 	bl	80093a4 <sniprintf>
 80032dc:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 80032e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032e4:	f107 0208 	add.w	r2, r7, #8
 80032e8:	18d0      	adds	r0, r2, r3
 80032ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032ee:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80032f2:	4a13      	ldr	r2, [pc, #76]	@ (8003340 <handle_uart_cmd+0x134>)
 80032f4:	4619      	mov	r1, r3
 80032f6:	f006 f855 	bl	80093a4 <sniprintf>
 80032fa:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
 80032fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003334 <handle_uart_cmd+0x128>)
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003306:	b29a      	uxth	r2, r3
 8003308:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800330c:	b29b      	uxth	r3, r3
 800330e:	4413      	add	r3, r2
 8003310:	b29a      	uxth	r2, r3
 8003312:	f107 0108 	add.w	r1, r7, #8
 8003316:	2364      	movs	r3, #100	@ 0x64
 8003318:	f003 fb3e 	bl	8006998 <HAL_UART_Transmit>
      global_action_flag = 3;  // Set flag for auto control
 800331c:	4b06      	ldr	r3, [pc, #24]	@ (8003338 <handle_uart_cmd+0x12c>)
 800331e:	2203      	movs	r2, #3
 8003320:	601a      	str	r2, [r3, #0]
      break;
 8003322:	bf00      	nop
  }
}
 8003324:	bf00      	nop
 8003326:	37a0      	adds	r7, #160	@ 0xa0
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	08009eac 	.word	0x08009eac
 8003330:	08009fd8 	.word	0x08009fd8
 8003334:	200005a4 	.word	0x200005a4
 8003338:	200005c0 	.word	0x200005c0
 800333c:	08009fec 	.word	0x08009fec
 8003340:	0800a000 	.word	0x0800a000

08003344 <uart_notifications_cycle>:
 * 2. Processes received data when validation flag is set
 * 3. Decodes COBS-encoded command packets
 * 4. Verifies CRC and packet integrity
 * 5. Executes valid fan control commands
 */
void uart_notifications_cycle(void const *argument){
 8003344:	b580      	push	{r7, lr}
 8003346:	b0aa      	sub	sp, #168	@ 0xa8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
    for(;;)
    {
        // Setup DMA reception for incoming commands
        HAL_UARTEx_ReceiveToIdle_DMA(g_data_logger, (uint8_t *)rx_buff, sizeof(rx_buff));
 800334c:	4b50      	ldr	r3, [pc, #320]	@ (8003490 <uart_notifications_cycle+0x14c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	220a      	movs	r2, #10
 8003352:	4950      	ldr	r1, [pc, #320]	@ (8003494 <uart_notifications_cycle+0x150>)
 8003354:	4618      	mov	r0, r3
 8003356:	f004 fd23 	bl	8007da0 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(g_logger_dma, DMA_IT_HT);  // Disable half-transfer interrupt
 800335a:	4b4f      	ldr	r3, [pc, #316]	@ (8003498 <uart_notifications_cycle+0x154>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4b4d      	ldr	r3, [pc, #308]	@ (8003498 <uart_notifications_cycle+0x154>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0204 	bic.w	r2, r2, #4
 800336c:	601a      	str	r2, [r3, #0]

        // Process received data when available
        if (rx_validation){
 800336e:	4b4b      	ldr	r3, [pc, #300]	@ (800349c <uart_notifications_cycle+0x158>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8088 	beq.w	8003488 <uart_notifications_cycle+0x144>
            NOTIFY_MESSAGE("New Message, performing verification...");
 8003378:	f107 030c 	add.w	r3, r7, #12
 800337c:	4a48      	ldr	r2, [pc, #288]	@ (80034a0 <uart_notifications_cycle+0x15c>)
 800337e:	2180      	movs	r1, #128	@ 0x80
 8003380:	4618      	mov	r0, r3
 8003382:	f006 f80f 	bl	80093a4 <sniprintf>
 8003386:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 800338a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800338e:	f107 020c 	add.w	r2, r7, #12
 8003392:	18d0      	adds	r0, r2, r3
 8003394:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003398:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800339c:	4a41      	ldr	r2, [pc, #260]	@ (80034a4 <uart_notifications_cycle+0x160>)
 800339e:	4619      	mov	r1, r3
 80033a0:	f006 f800 	bl	80093a4 <sniprintf>
 80033a4:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
 80033a8:	4b3f      	ldr	r3, [pc, #252]	@ (80034a8 <uart_notifications_cycle+0x164>)
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	4413      	add	r3, r2
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	f107 010c 	add.w	r1, r7, #12
 80033c0:	2364      	movs	r3, #100	@ 0x64
 80033c2:	f003 fae9 	bl	8006998 <HAL_UART_Transmit>
            uart_rx_command_t decoded_rx_command;

            // Attempt to decode COBS-encoded command
            if (decode_uart_rx_command(main_buff, 8, &decoded_rx_command)){
 80033c6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80033ca:	461a      	mov	r2, r3
 80033cc:	2108      	movs	r1, #8
 80033ce:	4837      	ldr	r0, [pc, #220]	@ (80034ac <uart_notifications_cycle+0x168>)
 80033d0:	f7fe f91d 	bl	800160e <decode_uart_rx_command>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d02c      	beq.n	8003434 <uart_notifications_cycle+0xf0>
                NOTIFY_MESSAGE("Captured Valid rx_Command");
 80033da:	f107 030c 	add.w	r3, r7, #12
 80033de:	4a30      	ldr	r2, [pc, #192]	@ (80034a0 <uart_notifications_cycle+0x15c>)
 80033e0:	2180      	movs	r1, #128	@ 0x80
 80033e2:	4618      	mov	r0, r3
 80033e4:	f005 ffde 	bl	80093a4 <sniprintf>
 80033e8:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 80033ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033f0:	f107 020c 	add.w	r2, r7, #12
 80033f4:	18d0      	adds	r0, r2, r3
 80033f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033fa:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80033fe:	4a2c      	ldr	r2, [pc, #176]	@ (80034b0 <uart_notifications_cycle+0x16c>)
 8003400:	4619      	mov	r1, r3
 8003402:	f005 ffcf 	bl	80093a4 <sniprintf>
 8003406:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 800340a:	4b27      	ldr	r3, [pc, #156]	@ (80034a8 <uart_notifications_cycle+0x164>)
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003412:	b29a      	uxth	r2, r3
 8003414:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003418:	b29b      	uxth	r3, r3
 800341a:	4413      	add	r3, r2
 800341c:	b29a      	uxth	r2, r3
 800341e:	f107 010c 	add.w	r1, r7, #12
 8003422:	2364      	movs	r3, #100	@ 0x64
 8003424:	f003 fab8 	bl	8006998 <HAL_UART_Transmit>
                handle_uart_cmd(&decoded_rx_command);  // Execute command
 8003428:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff feed 	bl	800320c <handle_uart_cmd>
 8003432:	e026      	b.n	8003482 <uart_notifications_cycle+0x13e>
            }else {
                NOTIFY_MESSAGE("Invalid Message Captured, Rejected no verification");
 8003434:	f107 030c 	add.w	r3, r7, #12
 8003438:	4a19      	ldr	r2, [pc, #100]	@ (80034a0 <uart_notifications_cycle+0x15c>)
 800343a:	2180      	movs	r1, #128	@ 0x80
 800343c:	4618      	mov	r0, r3
 800343e:	f005 ffb1 	bl	80093a4 <sniprintf>
 8003442:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 8003446:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800344a:	f107 020c 	add.w	r2, r7, #12
 800344e:	18d0      	adds	r0, r2, r3
 8003450:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003454:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8003458:	4a16      	ldr	r2, [pc, #88]	@ (80034b4 <uart_notifications_cycle+0x170>)
 800345a:	4619      	mov	r1, r3
 800345c:	f005 ffa2 	bl	80093a4 <sniprintf>
 8003460:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
 8003464:	4b10      	ldr	r3, [pc, #64]	@ (80034a8 <uart_notifications_cycle+0x164>)
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800346c:	b29a      	uxth	r2, r3
 800346e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003472:	b29b      	uxth	r3, r3
 8003474:	4413      	add	r3, r2
 8003476:	b29a      	uxth	r2, r3
 8003478:	f107 010c 	add.w	r1, r7, #12
 800347c:	2364      	movs	r3, #100	@ 0x64
 800347e:	f003 fa8b 	bl	8006998 <HAL_UART_Transmit>
            }
            rx_validation = 0;  // Clear validation flag
 8003482:	4b06      	ldr	r3, [pc, #24]	@ (800349c <uart_notifications_cycle+0x158>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
        }
        osDelay(1);  // Yield to other threads
 8003488:	2001      	movs	r0, #1
 800348a:	f004 fd48 	bl	8007f1e <osDelay>
        HAL_UARTEx_ReceiveToIdle_DMA(g_data_logger, (uint8_t *)rx_buff, sizeof(rx_buff));
 800348e:	e75d      	b.n	800334c <uart_notifications_cycle+0x8>
 8003490:	200005a0 	.word	0x200005a0
 8003494:	200005cc 	.word	0x200005cc
 8003498:	200005b0 	.word	0x200005b0
 800349c:	200005ec 	.word	0x200005ec
 80034a0:	08009eac 	.word	0x08009eac
 80034a4:	0800a018 	.word	0x0800a018
 80034a8:	200005a4 	.word	0x200005a4
 80034ac:	200005d8 	.word	0x200005d8
 80034b0:	0800a044 	.word	0x0800a044
 80034b4:	0800a060 	.word	0x0800a060

080034b8 <perform_setup_threads>:
                          UART_HandleTypeDef *local_monitor_place_holder,
                          I2C_HandleTypeDef *driver_iface_placeholder,
                          I2C_HandleTypeDef *mux_iface_placeholder,
                          DMA_HandleTypeDef *logger_dma_placeholder,
                          USART_TypeDef *target_placeholder,
                          CAN_HandleTypeDef *can_placeholder){
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
    g_data_logger = data_logger_place_holder;
 80034c6:	4a0d      	ldr	r2, [pc, #52]	@ (80034fc <perform_setup_threads+0x44>)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6013      	str	r3, [r2, #0]
    g_local_monitor = local_monitor_place_holder;
 80034cc:	4a0c      	ldr	r2, [pc, #48]	@ (8003500 <perform_setup_threads+0x48>)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	6013      	str	r3, [r2, #0]
    g_driver_iface = driver_iface_placeholder;
 80034d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003504 <perform_setup_threads+0x4c>)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6013      	str	r3, [r2, #0]
    g_mux_iface = mux_iface_placeholder;
 80034d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003508 <perform_setup_threads+0x50>)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6013      	str	r3, [r2, #0]
    g_logger_dma = logger_dma_placeholder;
 80034de:	4a0b      	ldr	r2, [pc, #44]	@ (800350c <perform_setup_threads+0x54>)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	6013      	str	r3, [r2, #0]
    g_can_iface = can_placeholder;
 80034e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003510 <perform_setup_threads+0x58>)
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	6013      	str	r3, [r2, #0]
    Current_Target = target_placeholder;
 80034ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003514 <perform_setup_threads+0x5c>)
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	6013      	str	r3, [r2, #0]
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	200005a0 	.word	0x200005a0
 8003500:	200005a4 	.word	0x200005a4
 8003504:	200005a8 	.word	0x200005a8
 8003508:	200005ac 	.word	0x200005ac
 800350c:	200005b0 	.word	0x200005b0
 8003510:	200005b4 	.word	0x200005b4
 8003514:	200005b8 	.word	0x200005b8

08003518 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003518:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003550 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800351c:	f7ff faa0 	bl	8002a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003520:	480c      	ldr	r0, [pc, #48]	@ (8003554 <LoopForever+0x6>)
  ldr r1, =_edata
 8003522:	490d      	ldr	r1, [pc, #52]	@ (8003558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003524:	4a0d      	ldr	r2, [pc, #52]	@ (800355c <LoopForever+0xe>)
  movs r3, #0
 8003526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003528:	e002      	b.n	8003530 <LoopCopyDataInit>

0800352a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800352a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800352c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800352e:	3304      	adds	r3, #4

08003530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003534:	d3f9      	bcc.n	800352a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003536:	4a0a      	ldr	r2, [pc, #40]	@ (8003560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003538:	4c0a      	ldr	r4, [pc, #40]	@ (8003564 <LoopForever+0x16>)
  movs r3, #0
 800353a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800353c:	e001      	b.n	8003542 <LoopFillZerobss>

0800353e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800353e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003540:	3204      	adds	r2, #4

08003542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003544:	d3fb      	bcc.n	800353e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003546:	f005 ffdf 	bl	8009508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800354a:	f7fe fd81 	bl	8002050 <main>

0800354e <LoopForever>:

LoopForever:
    b LoopForever
 800354e:	e7fe      	b.n	800354e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003550:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8003554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003558:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800355c:	0800a128 	.word	0x0800a128
  ldr r2, =_sbss
 8003560:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003564:	2000146c 	.word	0x2000146c

08003568 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003568:	e7fe      	b.n	8003568 <ADC1_IRQHandler>

0800356a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003574:	2003      	movs	r0, #3
 8003576:	f000 fb2d 	bl	8003bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800357a:	200f      	movs	r0, #15
 800357c:	f000 f80e 	bl	800359c <HAL_InitTick>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	71fb      	strb	r3, [r7, #7]
 800358a:	e001      	b.n	8003590 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800358c:	f7fe ffba 	bl	8002504 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003590:	79fb      	ldrb	r3, [r7, #7]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80035a8:	4b17      	ldr	r3, [pc, #92]	@ (8003608 <HAL_InitTick+0x6c>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d023      	beq.n	80035f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80035b0:	4b16      	ldr	r3, [pc, #88]	@ (800360c <HAL_InitTick+0x70>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b14      	ldr	r3, [pc, #80]	@ (8003608 <HAL_InitTick+0x6c>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	4619      	mov	r1, r3
 80035ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035be:	fbb3 f3f1 	udiv	r3, r3, r1
 80035c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fb39 	bl	8003c3e <HAL_SYSTICK_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10f      	bne.n	80035f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b0f      	cmp	r3, #15
 80035d6:	d809      	bhi.n	80035ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035d8:	2200      	movs	r2, #0
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035e0:	f000 fb03 	bl	8003bea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003610 <HAL_InitTick+0x74>)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e007      	b.n	80035fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
 80035f0:	e004      	b.n	80035fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
 80035f6:	e001      	b.n	80035fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20000008 	.word	0x20000008
 800360c:	20000000 	.word	0x20000000
 8003610:	20000004 	.word	0x20000004

08003614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003618:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <HAL_IncTick+0x20>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	4b06      	ldr	r3, [pc, #24]	@ (8003638 <HAL_IncTick+0x24>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4413      	add	r3, r2
 8003624:	4a04      	ldr	r2, [pc, #16]	@ (8003638 <HAL_IncTick+0x24>)
 8003626:	6013      	str	r3, [r2, #0]
}
 8003628:	bf00      	nop
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	20000008 	.word	0x20000008
 8003638:	20000614 	.word	0x20000614

0800363c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return uwTick;
 8003640:	4b03      	ldr	r3, [pc, #12]	@ (8003650 <HAL_GetTick+0x14>)
 8003642:	681b      	ldr	r3, [r3, #0]
}
 8003644:	4618      	mov	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	20000614 	.word	0x20000614

08003654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800365c:	f7ff ffee 	bl	800363c <HAL_GetTick>
 8003660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800366c:	d005      	beq.n	800367a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800366e:	4b0a      	ldr	r3, [pc, #40]	@ (8003698 <HAL_Delay+0x44>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4413      	add	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800367a:	bf00      	nop
 800367c:	f7ff ffde 	bl	800363c <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	429a      	cmp	r2, r3
 800368a:	d8f7      	bhi.n	800367c <HAL_Delay+0x28>
  {
  }
}
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000008 	.word	0x20000008

0800369c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e0ed      	b.n	800388a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fe ff4a 	bl	8002554 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036d0:	f7ff ffb4 	bl	800363c <HAL_GetTick>
 80036d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036d6:	e012      	b.n	80036fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036d8:	f7ff ffb0 	bl	800363c <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b0a      	cmp	r3, #10
 80036e4:	d90b      	bls.n	80036fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2205      	movs	r2, #5
 80036f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e0c5      	b.n	800388a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0e5      	beq.n	80036d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0202 	bic.w	r2, r2, #2
 800371a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800371c:	f7ff ff8e 	bl	800363c <HAL_GetTick>
 8003720:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003722:	e012      	b.n	800374a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003724:	f7ff ff8a 	bl	800363c <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b0a      	cmp	r3, #10
 8003730:	d90b      	bls.n	800374a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2205      	movs	r2, #5
 8003742:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e09f      	b.n	800388a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e5      	bne.n	8003724 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	7e1b      	ldrb	r3, [r3, #24]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d108      	bne.n	8003772 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	e007      	b.n	8003782 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003780:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	7e5b      	ldrb	r3, [r3, #25]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d108      	bne.n	800379c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	e007      	b.n	80037ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	7e9b      	ldrb	r3, [r3, #26]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d108      	bne.n	80037c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0220 	orr.w	r2, r2, #32
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e007      	b.n	80037d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0220 	bic.w	r2, r2, #32
 80037d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	7edb      	ldrb	r3, [r3, #27]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d108      	bne.n	80037f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0210 	bic.w	r2, r2, #16
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	e007      	b.n	8003800 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0210 	orr.w	r2, r2, #16
 80037fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	7f1b      	ldrb	r3, [r3, #28]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d108      	bne.n	800381a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0208 	orr.w	r2, r2, #8
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	e007      	b.n	800382a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0208 	bic.w	r2, r2, #8
 8003828:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	7f5b      	ldrb	r3, [r3, #29]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d108      	bne.n	8003844 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0204 	orr.w	r2, r2, #4
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	e007      	b.n	8003854 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0204 	bic.w	r2, r2, #4
 8003852:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	ea42 0103 	orr.w	r1, r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	1e5a      	subs	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003892:	b480      	push	{r7}
 8003894:	b089      	sub	sp, #36	@ 0x24
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	607a      	str	r2, [r7, #4]
 800389e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80038b0:	7ffb      	ldrb	r3, [r7, #31]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d003      	beq.n	80038be <HAL_CAN_AddTxMessage+0x2c>
 80038b6:	7ffb      	ldrb	r3, [r7, #31]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	f040 80ad 	bne.w	8003a18 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d105      	bne.n	80038de <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8095 	beq.w	8003a08 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	0e1b      	lsrs	r3, r3, #24
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80038e8:	2201      	movs	r2, #1
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	409a      	lsls	r2, r3
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10d      	bne.n	8003916 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003904:	68f9      	ldr	r1, [r7, #12]
 8003906:	6809      	ldr	r1, [r1, #0]
 8003908:	431a      	orrs	r2, r3
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	3318      	adds	r3, #24
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	440b      	add	r3, r1
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	e00f      	b.n	8003936 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003920:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003926:	68f9      	ldr	r1, [r7, #12]
 8003928:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800392a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	3318      	adds	r3, #24
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	440b      	add	r3, r1
 8003934:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6819      	ldr	r1, [r3, #0]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	691a      	ldr	r2, [r3, #16]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	3318      	adds	r3, #24
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	440b      	add	r3, r1
 8003946:	3304      	adds	r3, #4
 8003948:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	7d1b      	ldrb	r3, [r3, #20]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d111      	bne.n	8003976 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	3318      	adds	r3, #24
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	4413      	add	r3, r2
 800395e:	3304      	adds	r3, #4
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	6811      	ldr	r1, [r2, #0]
 8003966:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	3318      	adds	r3, #24
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	440b      	add	r3, r1
 8003972:	3304      	adds	r3, #4
 8003974:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3307      	adds	r3, #7
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	061a      	lsls	r2, r3, #24
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3306      	adds	r3, #6
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	041b      	lsls	r3, r3, #16
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3305      	adds	r3, #5
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	021b      	lsls	r3, r3, #8
 8003990:	4313      	orrs	r3, r2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	3204      	adds	r2, #4
 8003996:	7812      	ldrb	r2, [r2, #0]
 8003998:	4610      	mov	r0, r2
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	6811      	ldr	r1, [r2, #0]
 800399e:	ea43 0200 	orr.w	r2, r3, r0
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	440b      	add	r3, r1
 80039a8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80039ac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3303      	adds	r3, #3
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	061a      	lsls	r2, r3, #24
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3302      	adds	r3, #2
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	041b      	lsls	r3, r3, #16
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3301      	adds	r3, #1
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	4313      	orrs	r3, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	7812      	ldrb	r2, [r2, #0]
 80039ce:	4610      	mov	r0, r2
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	6811      	ldr	r1, [r2, #0]
 80039d4:	ea43 0200 	orr.w	r2, r3, r0
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	440b      	add	r3, r1
 80039de:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80039e2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	3318      	adds	r3, #24
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	4413      	add	r3, r2
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	6811      	ldr	r1, [r2, #0]
 80039f6:	f043 0201 	orr.w	r2, r3, #1
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	3318      	adds	r3, #24
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	440b      	add	r3, r1
 8003a02:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e00e      	b.n	8003a26 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e006      	b.n	8003a26 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
  }
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3724      	adds	r7, #36	@ 0x24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a44:	4b0c      	ldr	r3, [pc, #48]	@ (8003a78 <__NVIC_SetPriorityGrouping+0x44>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a50:	4013      	ands	r3, r2
 8003a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a66:	4a04      	ldr	r2, [pc, #16]	@ (8003a78 <__NVIC_SetPriorityGrouping+0x44>)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	60d3      	str	r3, [r2, #12]
}
 8003a6c:	bf00      	nop
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a80:	4b04      	ldr	r3, [pc, #16]	@ (8003a94 <__NVIC_GetPriorityGrouping+0x18>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	0a1b      	lsrs	r3, r3, #8
 8003a86:	f003 0307 	and.w	r3, r3, #7
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	db0b      	blt.n	8003ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	f003 021f 	and.w	r2, r3, #31
 8003ab0:	4907      	ldr	r1, [pc, #28]	@ (8003ad0 <__NVIC_EnableIRQ+0x38>)
 8003ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	2001      	movs	r0, #1
 8003aba:	fa00 f202 	lsl.w	r2, r0, r2
 8003abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	e000e100 	.word	0xe000e100

08003ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	6039      	str	r1, [r7, #0]
 8003ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	db0a      	blt.n	8003afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	490c      	ldr	r1, [pc, #48]	@ (8003b20 <__NVIC_SetPriority+0x4c>)
 8003aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af2:	0112      	lsls	r2, r2, #4
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	440b      	add	r3, r1
 8003af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003afc:	e00a      	b.n	8003b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	4908      	ldr	r1, [pc, #32]	@ (8003b24 <__NVIC_SetPriority+0x50>)
 8003b04:	79fb      	ldrb	r3, [r7, #7]
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	3b04      	subs	r3, #4
 8003b0c:	0112      	lsls	r2, r2, #4
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	440b      	add	r3, r1
 8003b12:	761a      	strb	r2, [r3, #24]
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	e000e100 	.word	0xe000e100
 8003b24:	e000ed00 	.word	0xe000ed00

08003b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b089      	sub	sp, #36	@ 0x24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f1c3 0307 	rsb	r3, r3, #7
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	bf28      	it	cs
 8003b46:	2304      	movcs	r3, #4
 8003b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	2b06      	cmp	r3, #6
 8003b50:	d902      	bls.n	8003b58 <NVIC_EncodePriority+0x30>
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	3b03      	subs	r3, #3
 8003b56:	e000      	b.n	8003b5a <NVIC_EncodePriority+0x32>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	43da      	mvns	r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	401a      	ands	r2, r3
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7a:	43d9      	mvns	r1, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b80:	4313      	orrs	r3, r2
         );
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3724      	adds	r7, #36	@ 0x24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ba0:	d301      	bcc.n	8003ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e00f      	b.n	8003bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd0 <SysTick_Config+0x40>)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bae:	210f      	movs	r1, #15
 8003bb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003bb4:	f7ff ff8e 	bl	8003ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bb8:	4b05      	ldr	r3, [pc, #20]	@ (8003bd0 <SysTick_Config+0x40>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bbe:	4b04      	ldr	r3, [pc, #16]	@ (8003bd0 <SysTick_Config+0x40>)
 8003bc0:	2207      	movs	r2, #7
 8003bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	e000e010 	.word	0xe000e010

08003bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff ff29 	bl	8003a34 <__NVIC_SetPriorityGrouping>
}
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b086      	sub	sp, #24
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	607a      	str	r2, [r7, #4]
 8003bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bfc:	f7ff ff3e 	bl	8003a7c <__NVIC_GetPriorityGrouping>
 8003c00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	6978      	ldr	r0, [r7, #20]
 8003c08:	f7ff ff8e 	bl	8003b28 <NVIC_EncodePriority>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c12:	4611      	mov	r1, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff5d 	bl	8003ad4 <__NVIC_SetPriority>
}
 8003c1a:	bf00      	nop
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	4603      	mov	r3, r0
 8003c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff ff31 	bl	8003a98 <__NVIC_EnableIRQ>
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff ffa2 	bl	8003b90 <SysTick_Config>
 8003c4c:	4603      	mov	r3, r0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e098      	b.n	8003d9c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	4b4d      	ldr	r3, [pc, #308]	@ (8003da8 <HAL_DMA_Init+0x150>)
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d80f      	bhi.n	8003c96 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	4b4b      	ldr	r3, [pc, #300]	@ (8003dac <HAL_DMA_Init+0x154>)
 8003c7e:	4413      	add	r3, r2
 8003c80:	4a4b      	ldr	r2, [pc, #300]	@ (8003db0 <HAL_DMA_Init+0x158>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	091b      	lsrs	r3, r3, #4
 8003c88:	009a      	lsls	r2, r3, #2
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a48      	ldr	r2, [pc, #288]	@ (8003db4 <HAL_DMA_Init+0x15c>)
 8003c92:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c94:	e00e      	b.n	8003cb4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	4b46      	ldr	r3, [pc, #280]	@ (8003db8 <HAL_DMA_Init+0x160>)
 8003c9e:	4413      	add	r3, r2
 8003ca0:	4a43      	ldr	r2, [pc, #268]	@ (8003db0 <HAL_DMA_Init+0x158>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	009a      	lsls	r2, r3, #2
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a42      	ldr	r2, [pc, #264]	@ (8003dbc <HAL_DMA_Init+0x164>)
 8003cb2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d0e:	d039      	beq.n	8003d84 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d14:	4a27      	ldr	r2, [pc, #156]	@ (8003db4 <HAL_DMA_Init+0x15c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d11a      	bne.n	8003d50 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003d1a:	4b29      	ldr	r3, [pc, #164]	@ (8003dc0 <HAL_DMA_Init+0x168>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d22:	f003 031c 	and.w	r3, r3, #28
 8003d26:	210f      	movs	r1, #15
 8003d28:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	4924      	ldr	r1, [pc, #144]	@ (8003dc0 <HAL_DMA_Init+0x168>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003d34:	4b22      	ldr	r3, [pc, #136]	@ (8003dc0 <HAL_DMA_Init+0x168>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6859      	ldr	r1, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d40:	f003 031c 	and.w	r3, r3, #28
 8003d44:	fa01 f303 	lsl.w	r3, r1, r3
 8003d48:	491d      	ldr	r1, [pc, #116]	@ (8003dc0 <HAL_DMA_Init+0x168>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]
 8003d4e:	e019      	b.n	8003d84 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003d50:	4b1c      	ldr	r3, [pc, #112]	@ (8003dc4 <HAL_DMA_Init+0x16c>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d58:	f003 031c 	and.w	r3, r3, #28
 8003d5c:	210f      	movs	r1, #15
 8003d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d62:	43db      	mvns	r3, r3
 8003d64:	4917      	ldr	r1, [pc, #92]	@ (8003dc4 <HAL_DMA_Init+0x16c>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003d6a:	4b16      	ldr	r3, [pc, #88]	@ (8003dc4 <HAL_DMA_Init+0x16c>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6859      	ldr	r1, [r3, #4]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d76:	f003 031c 	and.w	r3, r3, #28
 8003d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7e:	4911      	ldr	r1, [pc, #68]	@ (8003dc4 <HAL_DMA_Init+0x16c>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	40020407 	.word	0x40020407
 8003dac:	bffdfff8 	.word	0xbffdfff8
 8003db0:	cccccccd 	.word	0xcccccccd
 8003db4:	40020000 	.word	0x40020000
 8003db8:	bffdfbf8 	.word	0xbffdfbf8
 8003dbc:	40020400 	.word	0x40020400
 8003dc0:	400200a8 	.word	0x400200a8
 8003dc4:	400204a8 	.word	0x400204a8

08003dc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_DMA_Start_IT+0x20>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e04b      	b.n	8003e80 <HAL_DMA_Start_IT+0xb8>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d13a      	bne.n	8003e72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0201 	bic.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f95f 	bl	80040e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 020e 	orr.w	r2, r2, #14
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	e00f      	b.n	8003e60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0204 	bic.w	r2, r2, #4
 8003e4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 020a 	orr.w	r2, r2, #10
 8003e5e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0201 	orr.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	e005      	b.n	8003e7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d008      	beq.n	8003eb2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2204      	movs	r2, #4
 8003ea4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e022      	b.n	8003ef8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 020e 	bic.w	r2, r2, #14
 8003ec0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0201 	bic.w	r2, r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed6:	f003 021c 	and.w	r2, r3, #28
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ede:	2101      	movs	r1, #1
 8003ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d005      	beq.n	8003f28 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2204      	movs	r2, #4
 8003f20:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
 8003f26:	e029      	b.n	8003f7c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 020e 	bic.w	r2, r2, #14
 8003f36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0201 	bic.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4c:	f003 021c 	and.w	r2, r3, #28
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f54:	2101      	movs	r1, #1
 8003f56:	fa01 f202 	lsl.w	r2, r1, r2
 8003f5a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	4798      	blx	r3
    }
  }
  return status;
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b084      	sub	sp, #16
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	f003 031c 	and.w	r3, r3, #28
 8003fa6:	2204      	movs	r2, #4
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d026      	beq.n	8004000 <HAL_DMA_IRQHandler+0x7a>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d021      	beq.n	8004000 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d107      	bne.n	8003fda <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0204 	bic.w	r2, r2, #4
 8003fd8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fde:	f003 021c 	and.w	r2, r3, #28
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	2104      	movs	r1, #4
 8003fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d071      	beq.n	80040da <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ffe:	e06c      	b.n	80040da <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004004:	f003 031c 	and.w	r3, r3, #28
 8004008:	2202      	movs	r2, #2
 800400a:	409a      	lsls	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4013      	ands	r3, r2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d02e      	beq.n	8004072 <HAL_DMA_IRQHandler+0xec>
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d029      	beq.n	8004072 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10b      	bne.n	8004044 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 020a 	bic.w	r2, r2, #10
 800403a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004048:	f003 021c 	and.w	r2, r3, #28
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004050:	2102      	movs	r1, #2
 8004052:	fa01 f202 	lsl.w	r2, r1, r2
 8004056:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004064:	2b00      	cmp	r3, #0
 8004066:	d038      	beq.n	80040da <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004070:	e033      	b.n	80040da <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004076:	f003 031c 	and.w	r3, r3, #28
 800407a:	2208      	movs	r2, #8
 800407c:	409a      	lsls	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4013      	ands	r3, r2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d02a      	beq.n	80040dc <HAL_DMA_IRQHandler+0x156>
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b00      	cmp	r3, #0
 800408e:	d025      	beq.n	80040dc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 020e 	bic.w	r2, r2, #14
 800409e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a4:	f003 021c 	and.w	r2, r3, #28
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ac:	2101      	movs	r1, #1
 80040ae:	fa01 f202 	lsl.w	r2, r1, r2
 80040b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d004      	beq.n	80040dc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80040da:	bf00      	nop
 80040dc:	bf00      	nop
}
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f6:	f003 021c 	and.w	r2, r3, #28
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	2101      	movs	r1, #1
 8004100:	fa01 f202 	lsl.w	r2, r1, r2
 8004104:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b10      	cmp	r3, #16
 8004114:	d108      	bne.n	8004128 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004126:	e007      	b.n	8004138 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	60da      	str	r2, [r3, #12]
}
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004152:	e148      	b.n	80043e6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	2101      	movs	r1, #1
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	fa01 f303 	lsl.w	r3, r1, r3
 8004160:	4013      	ands	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 813a 	beq.w	80043e0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	2b01      	cmp	r3, #1
 8004176:	d005      	beq.n	8004184 <HAL_GPIO_Init+0x40>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d130      	bne.n	80041e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	2203      	movs	r2, #3
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4013      	ands	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041ba:	2201      	movs	r2, #1
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43db      	mvns	r3, r3
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4013      	ands	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	091b      	lsrs	r3, r3, #4
 80041d0:	f003 0201 	and.w	r2, r3, #1
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d017      	beq.n	8004222 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	2203      	movs	r2, #3
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43db      	mvns	r3, r3
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4013      	ands	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d123      	bne.n	8004276 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	08da      	lsrs	r2, r3, #3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3208      	adds	r2, #8
 8004236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800423a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	220f      	movs	r2, #15
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4013      	ands	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	08da      	lsrs	r2, r3, #3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3208      	adds	r2, #8
 8004270:	6939      	ldr	r1, [r7, #16]
 8004272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	2203      	movs	r2, #3
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4013      	ands	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f003 0203 	and.w	r2, r3, #3
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8094 	beq.w	80043e0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042b8:	4b52      	ldr	r3, [pc, #328]	@ (8004404 <HAL_GPIO_Init+0x2c0>)
 80042ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042bc:	4a51      	ldr	r2, [pc, #324]	@ (8004404 <HAL_GPIO_Init+0x2c0>)
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80042c4:	4b4f      	ldr	r3, [pc, #316]	@ (8004404 <HAL_GPIO_Init+0x2c0>)
 80042c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80042d0:	4a4d      	ldr	r2, [pc, #308]	@ (8004408 <HAL_GPIO_Init+0x2c4>)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	089b      	lsrs	r3, r3, #2
 80042d6:	3302      	adds	r3, #2
 80042d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	220f      	movs	r2, #15
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	43db      	mvns	r3, r3
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4013      	ands	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80042fa:	d00d      	beq.n	8004318 <HAL_GPIO_Init+0x1d4>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a43      	ldr	r2, [pc, #268]	@ (800440c <HAL_GPIO_Init+0x2c8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d007      	beq.n	8004314 <HAL_GPIO_Init+0x1d0>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a42      	ldr	r2, [pc, #264]	@ (8004410 <HAL_GPIO_Init+0x2cc>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d101      	bne.n	8004310 <HAL_GPIO_Init+0x1cc>
 800430c:	2302      	movs	r3, #2
 800430e:	e004      	b.n	800431a <HAL_GPIO_Init+0x1d6>
 8004310:	2307      	movs	r3, #7
 8004312:	e002      	b.n	800431a <HAL_GPIO_Init+0x1d6>
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <HAL_GPIO_Init+0x1d6>
 8004318:	2300      	movs	r3, #0
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	f002 0203 	and.w	r2, r2, #3
 8004320:	0092      	lsls	r2, r2, #2
 8004322:	4093      	lsls	r3, r2
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800432a:	4937      	ldr	r1, [pc, #220]	@ (8004408 <HAL_GPIO_Init+0x2c4>)
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	089b      	lsrs	r3, r3, #2
 8004330:	3302      	adds	r3, #2
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004338:	4b36      	ldr	r3, [pc, #216]	@ (8004414 <HAL_GPIO_Init+0x2d0>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	43db      	mvns	r3, r3
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800435c:	4a2d      	ldr	r2, [pc, #180]	@ (8004414 <HAL_GPIO_Init+0x2d0>)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004362:	4b2c      	ldr	r3, [pc, #176]	@ (8004414 <HAL_GPIO_Init+0x2d0>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	43db      	mvns	r3, r3
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4013      	ands	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004386:	4a23      	ldr	r2, [pc, #140]	@ (8004414 <HAL_GPIO_Init+0x2d0>)
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800438c:	4b21      	ldr	r3, [pc, #132]	@ (8004414 <HAL_GPIO_Init+0x2d0>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	43db      	mvns	r3, r3
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	4013      	ands	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043b0:	4a18      	ldr	r2, [pc, #96]	@ (8004414 <HAL_GPIO_Init+0x2d0>)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80043b6:	4b17      	ldr	r3, [pc, #92]	@ (8004414 <HAL_GPIO_Init+0x2d0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	43db      	mvns	r3, r3
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4013      	ands	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043da:	4a0e      	ldr	r2, [pc, #56]	@ (8004414 <HAL_GPIO_Init+0x2d0>)
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	3301      	adds	r3, #1
 80043e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f47f aeaf 	bne.w	8004154 <HAL_GPIO_Init+0x10>
  }
}
 80043f6:	bf00      	nop
 80043f8:	bf00      	nop
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	40021000 	.word	0x40021000
 8004408:	40010000 	.word	0x40010000
 800440c:	48000400 	.word	0x48000400
 8004410:	48000800 	.word	0x48000800
 8004414:	40010400 	.word	0x40010400

08004418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	887b      	ldrh	r3, [r7, #2]
 800442a:	4013      	ands	r3, r2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004430:	2301      	movs	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
 8004434:	e001      	b.n	800443a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004436:	2300      	movs	r3, #0
 8004438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	807b      	strh	r3, [r7, #2]
 8004454:	4613      	mov	r3, r2
 8004456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004458:	787b      	ldrb	r3, [r7, #1]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800445e:	887a      	ldrh	r2, [r7, #2]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004464:	e002      	b.n	800446c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004466:	887a      	ldrh	r2, [r7, #2]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e08d      	b.n	80045a6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fe f89c 	bl	80025dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2224      	movs	r2, #36	@ 0x24
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0201 	bic.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80044c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d107      	bne.n	80044f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689a      	ldr	r2, [r3, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044ee:	609a      	str	r2, [r3, #8]
 80044f0:	e006      	b.n	8004500 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80044fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d108      	bne.n	800451a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004516:	605a      	str	r2, [r3, #4]
 8004518:	e007      	b.n	800452a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004528:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004538:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800453c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800454c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691a      	ldr	r2, [r3, #16]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69d9      	ldr	r1, [r3, #28]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1a      	ldr	r2, [r3, #32]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0201 	orr.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	461a      	mov	r2, r3
 80045bc:	460b      	mov	r3, r1
 80045be:	817b      	strh	r3, [r7, #10]
 80045c0:	4613      	mov	r3, r2
 80045c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	f040 80fd 	bne.w	80047cc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_I2C_Master_Transmit+0x30>
 80045dc:	2302      	movs	r3, #2
 80045de:	e0f6      	b.n	80047ce <HAL_I2C_Master_Transmit+0x21e>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045e8:	f7ff f828 	bl	800363c <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	2319      	movs	r3, #25
 80045f4:	2201      	movs	r2, #1
 80045f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 fce0 	bl	8004fc0 <I2C_WaitOnFlagUntilTimeout>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e0e1      	b.n	80047ce <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2221      	movs	r2, #33	@ 0x21
 800460e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2210      	movs	r2, #16
 8004616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	893a      	ldrh	r2, [r7, #8]
 800462a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	2bff      	cmp	r3, #255	@ 0xff
 800463a:	d906      	bls.n	800464a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	22ff      	movs	r2, #255	@ 0xff
 8004640:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004642:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	e007      	b.n	800465a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004654:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004658:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800465e:	2b00      	cmp	r3, #0
 8004660:	d024      	beq.n	80046ac <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004666:	781a      	ldrb	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467c:	b29b      	uxth	r3, r3
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004696:	b2db      	uxtb	r3, r3
 8004698:	3301      	adds	r3, #1
 800469a:	b2da      	uxtb	r2, r3
 800469c:	8979      	ldrh	r1, [r7, #10]
 800469e:	4b4e      	ldr	r3, [pc, #312]	@ (80047d8 <HAL_I2C_Master_Transmit+0x228>)
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fedb 	bl	8005460 <I2C_TransferConfig>
 80046aa:	e066      	b.n	800477a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	8979      	ldrh	r1, [r7, #10]
 80046b4:	4b48      	ldr	r3, [pc, #288]	@ (80047d8 <HAL_I2C_Master_Transmit+0x228>)
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 fed0 	bl	8005460 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80046c0:	e05b      	b.n	800477a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	6a39      	ldr	r1, [r7, #32]
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 fcd3 	bl	8005072 <I2C_WaitOnTXISFlagUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e07b      	b.n	80047ce <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	781a      	ldrb	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d034      	beq.n	800477a <HAL_I2C_Master_Transmit+0x1ca>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004714:	2b00      	cmp	r3, #0
 8004716:	d130      	bne.n	800477a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	2200      	movs	r2, #0
 8004720:	2180      	movs	r1, #128	@ 0x80
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 fc4c 	bl	8004fc0 <I2C_WaitOnFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e04d      	b.n	80047ce <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004736:	b29b      	uxth	r3, r3
 8004738:	2bff      	cmp	r3, #255	@ 0xff
 800473a:	d90e      	bls.n	800475a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	22ff      	movs	r2, #255	@ 0xff
 8004740:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004746:	b2da      	uxtb	r2, r3
 8004748:	8979      	ldrh	r1, [r7, #10]
 800474a:	2300      	movs	r3, #0
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 fe84 	bl	8005460 <I2C_TransferConfig>
 8004758:	e00f      	b.n	800477a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004768:	b2da      	uxtb	r2, r3
 800476a:	8979      	ldrh	r1, [r7, #10]
 800476c:	2300      	movs	r3, #0
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 fe73 	bl	8005460 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d19e      	bne.n	80046c2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	6a39      	ldr	r1, [r7, #32]
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 fcb9 	bl	8005100 <I2C_WaitOnSTOPFlagUntilTimeout>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e01a      	b.n	80047ce <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2220      	movs	r2, #32
 800479e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6859      	ldr	r1, [r3, #4]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4b0c      	ldr	r3, [pc, #48]	@ (80047dc <HAL_I2C_Master_Transmit+0x22c>)
 80047ac:	400b      	ands	r3, r1
 80047ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	e000      	b.n	80047ce <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80047cc:	2302      	movs	r3, #2
  }
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	80002000 	.word	0x80002000
 80047dc:	fe00e800 	.word	0xfe00e800

080047e0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af02      	add	r7, sp, #8
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	607a      	str	r2, [r7, #4]
 80047ea:	461a      	mov	r2, r3
 80047ec:	460b      	mov	r3, r1
 80047ee:	817b      	strh	r3, [r7, #10]
 80047f0:	4613      	mov	r3, r2
 80047f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	f040 80db 	bne.w	80049b8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_I2C_Master_Receive+0x30>
 800480c:	2302      	movs	r3, #2
 800480e:	e0d4      	b.n	80049ba <HAL_I2C_Master_Receive+0x1da>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004818:	f7fe ff10 	bl	800363c <HAL_GetTick>
 800481c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	2319      	movs	r3, #25
 8004824:	2201      	movs	r2, #1
 8004826:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 fbc8 	bl	8004fc0 <I2C_WaitOnFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e0bf      	b.n	80049ba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2222      	movs	r2, #34	@ 0x22
 800483e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2210      	movs	r2, #16
 8004846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	893a      	ldrh	r2, [r7, #8]
 800485a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004866:	b29b      	uxth	r3, r3
 8004868:	2bff      	cmp	r3, #255	@ 0xff
 800486a:	d90e      	bls.n	800488a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2201      	movs	r2, #1
 8004870:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004876:	b2da      	uxtb	r2, r3
 8004878:	8979      	ldrh	r1, [r7, #10]
 800487a:	4b52      	ldr	r3, [pc, #328]	@ (80049c4 <HAL_I2C_Master_Receive+0x1e4>)
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 fdec 	bl	8005460 <I2C_TransferConfig>
 8004888:	e06d      	b.n	8004966 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004898:	b2da      	uxtb	r2, r3
 800489a:	8979      	ldrh	r1, [r7, #10]
 800489c:	4b49      	ldr	r3, [pc, #292]	@ (80049c4 <HAL_I2C_Master_Receive+0x1e4>)
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 fddb 	bl	8005460 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80048aa:	e05c      	b.n	8004966 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	6a39      	ldr	r1, [r7, #32]
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 fc69 	bl	8005188 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e07c      	b.n	80049ba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d034      	beq.n	8004966 <HAL_I2C_Master_Receive+0x186>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004900:	2b00      	cmp	r3, #0
 8004902:	d130      	bne.n	8004966 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	2200      	movs	r2, #0
 800490c:	2180      	movs	r1, #128	@ 0x80
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 fb56 	bl	8004fc0 <I2C_WaitOnFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e04d      	b.n	80049ba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004922:	b29b      	uxth	r3, r3
 8004924:	2bff      	cmp	r3, #255	@ 0xff
 8004926:	d90e      	bls.n	8004946 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	22ff      	movs	r2, #255	@ 0xff
 800492c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004932:	b2da      	uxtb	r2, r3
 8004934:	8979      	ldrh	r1, [r7, #10]
 8004936:	2300      	movs	r3, #0
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fd8e 	bl	8005460 <I2C_TransferConfig>
 8004944:	e00f      	b.n	8004966 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004954:	b2da      	uxtb	r2, r3
 8004956:	8979      	ldrh	r1, [r7, #10]
 8004958:	2300      	movs	r3, #0
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fd7d 	bl	8005460 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d19d      	bne.n	80048ac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	6a39      	ldr	r1, [r7, #32]
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 fbc3 	bl	8005100 <I2C_WaitOnSTOPFlagUntilTimeout>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e01a      	b.n	80049ba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2220      	movs	r2, #32
 800498a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6859      	ldr	r1, [r3, #4]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	4b0c      	ldr	r3, [pc, #48]	@ (80049c8 <HAL_I2C_Master_Receive+0x1e8>)
 8004998:	400b      	ands	r3, r1
 800499a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e000      	b.n	80049ba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80049b8:	2302      	movs	r3, #2
  }
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	80002400 	.word	0x80002400
 80049c8:	fe00e800 	.word	0xfe00e800

080049cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	4608      	mov	r0, r1
 80049d6:	4611      	mov	r1, r2
 80049d8:	461a      	mov	r2, r3
 80049da:	4603      	mov	r3, r0
 80049dc:	817b      	strh	r3, [r7, #10]
 80049de:	460b      	mov	r3, r1
 80049e0:	813b      	strh	r3, [r7, #8]
 80049e2:	4613      	mov	r3, r2
 80049e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	f040 80f9 	bne.w	8004be6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_I2C_Mem_Write+0x34>
 80049fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d105      	bne.n	8004a0c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a06:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0ed      	b.n	8004be8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_I2C_Mem_Write+0x4e>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e0e6      	b.n	8004be8 <HAL_I2C_Mem_Write+0x21c>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a22:	f7fe fe0b 	bl	800363c <HAL_GetTick>
 8004a26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	2319      	movs	r3, #25
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 fac3 	bl	8004fc0 <I2C_WaitOnFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0d1      	b.n	8004be8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2221      	movs	r2, #33	@ 0x21
 8004a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2240      	movs	r2, #64	@ 0x40
 8004a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a3a      	ldr	r2, [r7, #32]
 8004a5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004a64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a6c:	88f8      	ldrh	r0, [r7, #6]
 8004a6e:	893a      	ldrh	r2, [r7, #8]
 8004a70:	8979      	ldrh	r1, [r7, #10]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	9301      	str	r3, [sp, #4]
 8004a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f9d3 	bl	8004e28 <I2C_RequestMemoryWrite>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e0a9      	b.n	8004be8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2bff      	cmp	r3, #255	@ 0xff
 8004a9c:	d90e      	bls.n	8004abc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	22ff      	movs	r2, #255	@ 0xff
 8004aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	8979      	ldrh	r1, [r7, #10]
 8004aac:	2300      	movs	r3, #0
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 fcd3 	bl	8005460 <I2C_TransferConfig>
 8004aba:	e00f      	b.n	8004adc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	8979      	ldrh	r1, [r7, #10]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 fcc2 	bl	8005460 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 fac6 	bl	8005072 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e07b      	b.n	8004be8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af4:	781a      	ldrb	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d034      	beq.n	8004b94 <HAL_I2C_Mem_Write+0x1c8>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d130      	bne.n	8004b94 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2180      	movs	r1, #128	@ 0x80
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 fa3f 	bl	8004fc0 <I2C_WaitOnFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e04d      	b.n	8004be8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2bff      	cmp	r3, #255	@ 0xff
 8004b54:	d90e      	bls.n	8004b74 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	22ff      	movs	r2, #255	@ 0xff
 8004b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	8979      	ldrh	r1, [r7, #10]
 8004b64:	2300      	movs	r3, #0
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 fc77 	bl	8005460 <I2C_TransferConfig>
 8004b72:	e00f      	b.n	8004b94 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	8979      	ldrh	r1, [r7, #10]
 8004b86:	2300      	movs	r3, #0
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fc66 	bl	8005460 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d19e      	bne.n	8004adc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 faac 	bl	8005100 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e01a      	b.n	8004be8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6859      	ldr	r1, [r3, #4]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf0 <HAL_I2C_Mem_Write+0x224>)
 8004bc6:	400b      	ands	r3, r1
 8004bc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	e000      	b.n	8004be8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004be6:	2302      	movs	r3, #2
  }
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	fe00e800 	.word	0xfe00e800

08004bf4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	4608      	mov	r0, r1
 8004bfe:	4611      	mov	r1, r2
 8004c00:	461a      	mov	r2, r3
 8004c02:	4603      	mov	r3, r0
 8004c04:	817b      	strh	r3, [r7, #10]
 8004c06:	460b      	mov	r3, r1
 8004c08:	813b      	strh	r3, [r7, #8]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	f040 80fd 	bne.w	8004e16 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_I2C_Mem_Read+0x34>
 8004c22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d105      	bne.n	8004c34 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c2e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e0f1      	b.n	8004e18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d101      	bne.n	8004c42 <HAL_I2C_Mem_Read+0x4e>
 8004c3e:	2302      	movs	r3, #2
 8004c40:	e0ea      	b.n	8004e18 <HAL_I2C_Mem_Read+0x224>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c4a:	f7fe fcf7 	bl	800363c <HAL_GetTick>
 8004c4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	2319      	movs	r3, #25
 8004c56:	2201      	movs	r2, #1
 8004c58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 f9af 	bl	8004fc0 <I2C_WaitOnFlagUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0d5      	b.n	8004e18 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2222      	movs	r2, #34	@ 0x22
 8004c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2240      	movs	r2, #64	@ 0x40
 8004c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a3a      	ldr	r2, [r7, #32]
 8004c86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c94:	88f8      	ldrh	r0, [r7, #6]
 8004c96:	893a      	ldrh	r2, [r7, #8]
 8004c98:	8979      	ldrh	r1, [r7, #10]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f913 	bl	8004ed0 <I2C_RequestMemoryRead>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e0ad      	b.n	8004e18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2bff      	cmp	r3, #255	@ 0xff
 8004cc4:	d90e      	bls.n	8004ce4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	8979      	ldrh	r1, [r7, #10]
 8004cd4:	4b52      	ldr	r3, [pc, #328]	@ (8004e20 <HAL_I2C_Mem_Read+0x22c>)
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 fbbf 	bl	8005460 <I2C_TransferConfig>
 8004ce2:	e00f      	b.n	8004d04 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	8979      	ldrh	r1, [r7, #10]
 8004cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8004e20 <HAL_I2C_Mem_Read+0x22c>)
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 fbae 	bl	8005460 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2104      	movs	r1, #4
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f956 	bl	8004fc0 <I2C_WaitOnFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e07c      	b.n	8004e18 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d034      	beq.n	8004dc4 <HAL_I2C_Mem_Read+0x1d0>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d130      	bne.n	8004dc4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d68:	2200      	movs	r2, #0
 8004d6a:	2180      	movs	r1, #128	@ 0x80
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 f927 	bl	8004fc0 <I2C_WaitOnFlagUntilTimeout>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e04d      	b.n	8004e18 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2bff      	cmp	r3, #255	@ 0xff
 8004d84:	d90e      	bls.n	8004da4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	8979      	ldrh	r1, [r7, #10]
 8004d94:	2300      	movs	r3, #0
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 fb5f 	bl	8005460 <I2C_TransferConfig>
 8004da2:	e00f      	b.n	8004dc4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	8979      	ldrh	r1, [r7, #10]
 8004db6:	2300      	movs	r3, #0
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fb4e 	bl	8005460 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d19a      	bne.n	8004d04 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 f994 	bl	8005100 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e01a      	b.n	8004e18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2220      	movs	r2, #32
 8004de8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6859      	ldr	r1, [r3, #4]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	4b0b      	ldr	r3, [pc, #44]	@ (8004e24 <HAL_I2C_Mem_Read+0x230>)
 8004df6:	400b      	ands	r3, r1
 8004df8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	e000      	b.n	8004e18 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004e16:	2302      	movs	r3, #2
  }
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	80002400 	.word	0x80002400
 8004e24:	fe00e800 	.word	0xfe00e800

08004e28 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af02      	add	r7, sp, #8
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	4608      	mov	r0, r1
 8004e32:	4611      	mov	r1, r2
 8004e34:	461a      	mov	r2, r3
 8004e36:	4603      	mov	r3, r0
 8004e38:	817b      	strh	r3, [r7, #10]
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	813b      	strh	r3, [r7, #8]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	8979      	ldrh	r1, [r7, #10]
 8004e48:	4b20      	ldr	r3, [pc, #128]	@ (8004ecc <I2C_RequestMemoryWrite+0xa4>)
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 fb05 	bl	8005460 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e56:	69fa      	ldr	r2, [r7, #28]
 8004e58:	69b9      	ldr	r1, [r7, #24]
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 f909 	bl	8005072 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e02c      	b.n	8004ec4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e6a:	88fb      	ldrh	r3, [r7, #6]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d105      	bne.n	8004e7c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e70:	893b      	ldrh	r3, [r7, #8]
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e7a:	e015      	b.n	8004ea8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e7c:	893b      	ldrh	r3, [r7, #8]
 8004e7e:	0a1b      	lsrs	r3, r3, #8
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	69b9      	ldr	r1, [r7, #24]
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 f8ef 	bl	8005072 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e012      	b.n	8004ec4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e9e:	893b      	ldrh	r3, [r7, #8]
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	2180      	movs	r1, #128	@ 0x80
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 f884 	bl	8004fc0 <I2C_WaitOnFlagUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	80002000 	.word	0x80002000

08004ed0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	4608      	mov	r0, r1
 8004eda:	4611      	mov	r1, r2
 8004edc:	461a      	mov	r2, r3
 8004ede:	4603      	mov	r3, r0
 8004ee0:	817b      	strh	r3, [r7, #10]
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	813b      	strh	r3, [r7, #8]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	8979      	ldrh	r1, [r7, #10]
 8004ef0:	4b20      	ldr	r3, [pc, #128]	@ (8004f74 <I2C_RequestMemoryRead+0xa4>)
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 fab2 	bl	8005460 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	69b9      	ldr	r1, [r7, #24]
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 f8b6 	bl	8005072 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e02c      	b.n	8004f6a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f10:	88fb      	ldrh	r3, [r7, #6]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d105      	bne.n	8004f22 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f16:	893b      	ldrh	r3, [r7, #8]
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f20:	e015      	b.n	8004f4e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f22:	893b      	ldrh	r3, [r7, #8]
 8004f24:	0a1b      	lsrs	r3, r3, #8
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f30:	69fa      	ldr	r2, [r7, #28]
 8004f32:	69b9      	ldr	r1, [r7, #24]
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f89c 	bl	8005072 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e012      	b.n	8004f6a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f44:	893b      	ldrh	r3, [r7, #8]
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	2200      	movs	r2, #0
 8004f56:	2140      	movs	r1, #64	@ 0x40
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 f831 	bl	8004fc0 <I2C_WaitOnFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e000      	b.n	8004f6a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	80002000 	.word	0x80002000

08004f78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d103      	bne.n	8004f96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2200      	movs	r2, #0
 8004f94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d007      	beq.n	8004fb4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0201 	orr.w	r2, r2, #1
 8004fb2:	619a      	str	r2, [r3, #24]
  }
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	603b      	str	r3, [r7, #0]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fd0:	e03b      	b.n	800504a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	6839      	ldr	r1, [r7, #0]
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 f962 	bl	80052a0 <I2C_IsErrorOccurred>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e041      	b.n	800506a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fec:	d02d      	beq.n	800504a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fee:	f7fe fb25 	bl	800363c <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d302      	bcc.n	8005004 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d122      	bne.n	800504a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4013      	ands	r3, r2
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	429a      	cmp	r2, r3
 8005012:	bf0c      	ite	eq
 8005014:	2301      	moveq	r3, #1
 8005016:	2300      	movne	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	461a      	mov	r2, r3
 800501c:	79fb      	ldrb	r3, [r7, #7]
 800501e:	429a      	cmp	r2, r3
 8005020:	d113      	bne.n	800504a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005026:	f043 0220 	orr.w	r2, r3, #32
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e00f      	b.n	800506a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699a      	ldr	r2, [r3, #24]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4013      	ands	r3, r2
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	429a      	cmp	r2, r3
 8005058:	bf0c      	ite	eq
 800505a:	2301      	moveq	r3, #1
 800505c:	2300      	movne	r3, #0
 800505e:	b2db      	uxtb	r3, r3
 8005060:	461a      	mov	r2, r3
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	429a      	cmp	r2, r3
 8005066:	d0b4      	beq.n	8004fd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	60f8      	str	r0, [r7, #12]
 800507a:	60b9      	str	r1, [r7, #8]
 800507c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800507e:	e033      	b.n	80050e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 f90b 	bl	80052a0 <I2C_IsErrorOccurred>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e031      	b.n	80050f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800509a:	d025      	beq.n	80050e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800509c:	f7fe face 	bl	800363c <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d302      	bcc.n	80050b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d11a      	bne.n	80050e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d013      	beq.n	80050e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c4:	f043 0220 	orr.w	r2, r3, #32
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e007      	b.n	80050f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d1c4      	bne.n	8005080 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800510c:	e02f      	b.n	800516e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 f8c4 	bl	80052a0 <I2C_IsErrorOccurred>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e02d      	b.n	800517e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005122:	f7fe fa8b 	bl	800363c <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	429a      	cmp	r2, r3
 8005130:	d302      	bcc.n	8005138 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d11a      	bne.n	800516e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b20      	cmp	r3, #32
 8005144:	d013      	beq.n	800516e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514a:	f043 0220 	orr.w	r2, r3, #32
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2220      	movs	r2, #32
 8005156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e007      	b.n	800517e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	f003 0320 	and.w	r3, r3, #32
 8005178:	2b20      	cmp	r3, #32
 800517a:	d1c8      	bne.n	800510e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
	...

08005188 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005198:	e071      	b.n	800527e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	68b9      	ldr	r1, [r7, #8]
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 f87e 	bl	80052a0 <I2C_IsErrorOccurred>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	f003 0320 	and.w	r3, r3, #32
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d13b      	bne.n	8005234 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d138      	bne.n	8005234 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d105      	bne.n	80051dc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	f003 0310 	and.w	r3, r3, #16
 80051e6:	2b10      	cmp	r3, #16
 80051e8:	d121      	bne.n	800522e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2210      	movs	r2, #16
 80051f0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2204      	movs	r2, #4
 80051f6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2220      	movs	r2, #32
 80051fe:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6859      	ldr	r1, [r3, #4]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	4b24      	ldr	r3, [pc, #144]	@ (800529c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800520c:	400b      	ands	r3, r1
 800520e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	75fb      	strb	r3, [r7, #23]
 800522c:	e002      	b.n	8005234 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005234:	f7fe fa02 	bl	800363c <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	429a      	cmp	r2, r3
 8005242:	d302      	bcc.n	800524a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d119      	bne.n	800527e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800524a:	7dfb      	ldrb	r3, [r7, #23]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d116      	bne.n	800527e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b04      	cmp	r3, #4
 800525c:	d00f      	beq.n	800527e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005262:	f043 0220 	orr.w	r2, r3, #32
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b04      	cmp	r3, #4
 800528a:	d002      	beq.n	8005292 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800528c:	7dfb      	ldrb	r3, [r7, #23]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d083      	beq.n	800519a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005292:	7dfb      	ldrb	r3, [r7, #23]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	fe00e800 	.word	0xfe00e800

080052a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08a      	sub	sp, #40	@ 0x28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d068      	beq.n	800539e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2210      	movs	r2, #16
 80052d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052d4:	e049      	b.n	800536a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052dc:	d045      	beq.n	800536a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052de:	f7fe f9ad 	bl	800363c <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d302      	bcc.n	80052f4 <I2C_IsErrorOccurred+0x54>
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d13a      	bne.n	800536a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005306:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005312:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005316:	d121      	bne.n	800535c <I2C_IsErrorOccurred+0xbc>
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800531e:	d01d      	beq.n	800535c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005320:	7cfb      	ldrb	r3, [r7, #19]
 8005322:	2b20      	cmp	r3, #32
 8005324:	d01a      	beq.n	800535c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005334:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005336:	f7fe f981 	bl	800363c <HAL_GetTick>
 800533a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800533c:	e00e      	b.n	800535c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800533e:	f7fe f97d 	bl	800363c <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b19      	cmp	r3, #25
 800534a:	d907      	bls.n	800535c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	f043 0320 	orr.w	r3, r3, #32
 8005352:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800535a:	e006      	b.n	800536a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b20      	cmp	r3, #32
 8005368:	d1e9      	bne.n	800533e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	f003 0320 	and.w	r3, r3, #32
 8005374:	2b20      	cmp	r3, #32
 8005376:	d003      	beq.n	8005380 <I2C_IsErrorOccurred+0xe0>
 8005378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0aa      	beq.n	80052d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005380:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005384:	2b00      	cmp	r3, #0
 8005386:	d103      	bne.n	8005390 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2220      	movs	r2, #32
 800538e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	f043 0304 	orr.w	r3, r3, #4
 8005396:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00b      	beq.n	80053c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80053c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00b      	beq.n	80053ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	f043 0308 	orr.w	r3, r3, #8
 80053d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80053e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00b      	beq.n	800540c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	f043 0302 	orr.w	r3, r3, #2
 80053fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005404:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800540c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01c      	beq.n	800544e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f7ff fdaf 	bl	8004f78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6859      	ldr	r1, [r3, #4]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	4b0d      	ldr	r3, [pc, #52]	@ (800545c <I2C_IsErrorOccurred+0x1bc>)
 8005426:	400b      	ands	r3, r1
 8005428:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	431a      	orrs	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2220      	movs	r2, #32
 800543a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800544e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005452:	4618      	mov	r0, r3
 8005454:	3728      	adds	r7, #40	@ 0x28
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	fe00e800 	.word	0xfe00e800

08005460 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	607b      	str	r3, [r7, #4]
 800546a:	460b      	mov	r3, r1
 800546c:	817b      	strh	r3, [r7, #10]
 800546e:	4613      	mov	r3, r2
 8005470:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005472:	897b      	ldrh	r3, [r7, #10]
 8005474:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005478:	7a7b      	ldrb	r3, [r7, #9]
 800547a:	041b      	lsls	r3, r3, #16
 800547c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005480:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	4313      	orrs	r3, r2
 800548a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800548e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	0d5b      	lsrs	r3, r3, #21
 800549a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800549e:	4b08      	ldr	r3, [pc, #32]	@ (80054c0 <I2C_TransferConfig+0x60>)
 80054a0:	430b      	orrs	r3, r1
 80054a2:	43db      	mvns	r3, r3
 80054a4:	ea02 0103 	and.w	r1, r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80054b2:	bf00      	nop
 80054b4:	371c      	adds	r7, #28
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	03ff63ff 	.word	0x03ff63ff

080054c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b20      	cmp	r3, #32
 80054d8:	d138      	bne.n	800554c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e032      	b.n	800554e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2224      	movs	r2, #36	@ 0x24
 80054f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0201 	bic.w	r2, r2, #1
 8005506:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005516:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6819      	ldr	r1, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	e000      	b.n	800554e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800554c:	2302      	movs	r3, #2
  }
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800555a:	b480      	push	{r7}
 800555c:	b085      	sub	sp, #20
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b20      	cmp	r3, #32
 800556e:	d139      	bne.n	80055e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800557a:	2302      	movs	r3, #2
 800557c:	e033      	b.n	80055e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2224      	movs	r2, #36	@ 0x24
 800558a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0201 	bic.w	r2, r2, #1
 800559c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80055ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	021b      	lsls	r3, r3, #8
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055e0:	2300      	movs	r3, #0
 80055e2:	e000      	b.n	80055e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80055e4:	2302      	movs	r3, #2
  }
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
	...

080055f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80055f8:	4b04      	ldr	r3, [pc, #16]	@ (800560c <HAL_PWREx_GetVoltageRange+0x18>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005600:	4618      	mov	r0, r3
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	40007000 	.word	0x40007000

08005610 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800561e:	d130      	bne.n	8005682 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005620:	4b23      	ldr	r3, [pc, #140]	@ (80056b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800562c:	d038      	beq.n	80056a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800562e:	4b20      	ldr	r3, [pc, #128]	@ (80056b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005636:	4a1e      	ldr	r2, [pc, #120]	@ (80056b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005638:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800563c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800563e:	4b1d      	ldr	r3, [pc, #116]	@ (80056b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2232      	movs	r2, #50	@ 0x32
 8005644:	fb02 f303 	mul.w	r3, r2, r3
 8005648:	4a1b      	ldr	r2, [pc, #108]	@ (80056b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800564a:	fba2 2303 	umull	r2, r3, r2, r3
 800564e:	0c9b      	lsrs	r3, r3, #18
 8005650:	3301      	adds	r3, #1
 8005652:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005654:	e002      	b.n	800565c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	3b01      	subs	r3, #1
 800565a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800565c:	4b14      	ldr	r3, [pc, #80]	@ (80056b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005668:	d102      	bne.n	8005670 <HAL_PWREx_ControlVoltageScaling+0x60>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1f2      	bne.n	8005656 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005670:	4b0f      	ldr	r3, [pc, #60]	@ (80056b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800567c:	d110      	bne.n	80056a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e00f      	b.n	80056a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005682:	4b0b      	ldr	r3, [pc, #44]	@ (80056b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800568a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800568e:	d007      	beq.n	80056a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005690:	4b07      	ldr	r3, [pc, #28]	@ (80056b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005698:	4a05      	ldr	r2, [pc, #20]	@ (80056b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800569a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800569e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	40007000 	.word	0x40007000
 80056b4:	20000000 	.word	0x20000000
 80056b8:	431bde83 	.word	0x431bde83

080056bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d102      	bne.n	80056d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f000 bc02 	b.w	8005ed4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056d0:	4b96      	ldr	r3, [pc, #600]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 030c 	and.w	r3, r3, #12
 80056d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056da:	4b94      	ldr	r3, [pc, #592]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0310 	and.w	r3, r3, #16
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 80e4 	beq.w	80058ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d007      	beq.n	8005708 <HAL_RCC_OscConfig+0x4c>
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	2b0c      	cmp	r3, #12
 80056fc:	f040 808b 	bne.w	8005816 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2b01      	cmp	r3, #1
 8005704:	f040 8087 	bne.w	8005816 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005708:	4b88      	ldr	r3, [pc, #544]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d005      	beq.n	8005720 <HAL_RCC_OscConfig+0x64>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e3d9      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a1a      	ldr	r2, [r3, #32]
 8005724:	4b81      	ldr	r3, [pc, #516]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0308 	and.w	r3, r3, #8
 800572c:	2b00      	cmp	r3, #0
 800572e:	d004      	beq.n	800573a <HAL_RCC_OscConfig+0x7e>
 8005730:	4b7e      	ldr	r3, [pc, #504]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005738:	e005      	b.n	8005746 <HAL_RCC_OscConfig+0x8a>
 800573a:	4b7c      	ldr	r3, [pc, #496]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 800573c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005740:	091b      	lsrs	r3, r3, #4
 8005742:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005746:	4293      	cmp	r3, r2
 8005748:	d223      	bcs.n	8005792 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fd8c 	bl	800626c <RCC_SetFlashLatencyFromMSIRange>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e3ba      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800575e:	4b73      	ldr	r3, [pc, #460]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a72      	ldr	r2, [pc, #456]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 8005764:	f043 0308 	orr.w	r3, r3, #8
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	4b70      	ldr	r3, [pc, #448]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	496d      	ldr	r1, [pc, #436]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 8005778:	4313      	orrs	r3, r2
 800577a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800577c:	4b6b      	ldr	r3, [pc, #428]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	021b      	lsls	r3, r3, #8
 800578a:	4968      	ldr	r1, [pc, #416]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 800578c:	4313      	orrs	r3, r2
 800578e:	604b      	str	r3, [r1, #4]
 8005790:	e025      	b.n	80057de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005792:	4b66      	ldr	r3, [pc, #408]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a65      	ldr	r2, [pc, #404]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 8005798:	f043 0308 	orr.w	r3, r3, #8
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	4b63      	ldr	r3, [pc, #396]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	4960      	ldr	r1, [pc, #384]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057b0:	4b5e      	ldr	r3, [pc, #376]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	021b      	lsls	r3, r3, #8
 80057be:	495b      	ldr	r1, [pc, #364]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d109      	bne.n	80057de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fd4c 	bl	800626c <RCC_SetFlashLatencyFromMSIRange>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e37a      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057de:	f000 fc81 	bl	80060e4 <HAL_RCC_GetSysClockFreq>
 80057e2:	4602      	mov	r2, r0
 80057e4:	4b51      	ldr	r3, [pc, #324]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	091b      	lsrs	r3, r3, #4
 80057ea:	f003 030f 	and.w	r3, r3, #15
 80057ee:	4950      	ldr	r1, [pc, #320]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 80057f0:	5ccb      	ldrb	r3, [r1, r3]
 80057f2:	f003 031f 	and.w	r3, r3, #31
 80057f6:	fa22 f303 	lsr.w	r3, r2, r3
 80057fa:	4a4e      	ldr	r2, [pc, #312]	@ (8005934 <HAL_RCC_OscConfig+0x278>)
 80057fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80057fe:	4b4e      	ldr	r3, [pc, #312]	@ (8005938 <HAL_RCC_OscConfig+0x27c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	f7fd feca 	bl	800359c <HAL_InitTick>
 8005808:	4603      	mov	r3, r0
 800580a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800580c:	7bfb      	ldrb	r3, [r7, #15]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d052      	beq.n	80058b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005812:	7bfb      	ldrb	r3, [r7, #15]
 8005814:	e35e      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d032      	beq.n	8005884 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800581e:	4b43      	ldr	r3, [pc, #268]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a42      	ldr	r2, [pc, #264]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 8005824:	f043 0301 	orr.w	r3, r3, #1
 8005828:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800582a:	f7fd ff07 	bl	800363c <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005830:	e008      	b.n	8005844 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005832:	f7fd ff03 	bl	800363c <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e347      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005844:	4b39      	ldr	r3, [pc, #228]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0f0      	beq.n	8005832 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005850:	4b36      	ldr	r3, [pc, #216]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a35      	ldr	r2, [pc, #212]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 8005856:	f043 0308 	orr.w	r3, r3, #8
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	4b33      	ldr	r3, [pc, #204]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	4930      	ldr	r1, [pc, #192]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 800586a:	4313      	orrs	r3, r2
 800586c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800586e:	4b2f      	ldr	r3, [pc, #188]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	021b      	lsls	r3, r3, #8
 800587c:	492b      	ldr	r1, [pc, #172]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 800587e:	4313      	orrs	r3, r2
 8005880:	604b      	str	r3, [r1, #4]
 8005882:	e01a      	b.n	80058ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005884:	4b29      	ldr	r3, [pc, #164]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a28      	ldr	r2, [pc, #160]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 800588a:	f023 0301 	bic.w	r3, r3, #1
 800588e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005890:	f7fd fed4 	bl	800363c <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005898:	f7fd fed0 	bl	800363c <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e314      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058aa:	4b20      	ldr	r3, [pc, #128]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1f0      	bne.n	8005898 <HAL_RCC_OscConfig+0x1dc>
 80058b6:	e000      	b.n	80058ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d073      	beq.n	80059ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d005      	beq.n	80058d8 <HAL_RCC_OscConfig+0x21c>
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	2b0c      	cmp	r3, #12
 80058d0:	d10e      	bne.n	80058f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d10b      	bne.n	80058f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058d8:	4b14      	ldr	r3, [pc, #80]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d063      	beq.n	80059ac <HAL_RCC_OscConfig+0x2f0>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d15f      	bne.n	80059ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e2f1      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058f8:	d106      	bne.n	8005908 <HAL_RCC_OscConfig+0x24c>
 80058fa:	4b0c      	ldr	r3, [pc, #48]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a0b      	ldr	r2, [pc, #44]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 8005900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	e025      	b.n	8005954 <HAL_RCC_OscConfig+0x298>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005910:	d114      	bne.n	800593c <HAL_RCC_OscConfig+0x280>
 8005912:	4b06      	ldr	r3, [pc, #24]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a05      	ldr	r2, [pc, #20]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 8005918:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	4b03      	ldr	r3, [pc, #12]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a02      	ldr	r2, [pc, #8]	@ (800592c <HAL_RCC_OscConfig+0x270>)
 8005924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	e013      	b.n	8005954 <HAL_RCC_OscConfig+0x298>
 800592c:	40021000 	.word	0x40021000
 8005930:	0800a09c 	.word	0x0800a09c
 8005934:	20000000 	.word	0x20000000
 8005938:	20000004 	.word	0x20000004
 800593c:	4ba0      	ldr	r3, [pc, #640]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a9f      	ldr	r2, [pc, #636]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	4b9d      	ldr	r3, [pc, #628]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a9c      	ldr	r2, [pc, #624]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 800594e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d013      	beq.n	8005984 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595c:	f7fd fe6e 	bl	800363c <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005964:	f7fd fe6a 	bl	800363c <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b64      	cmp	r3, #100	@ 0x64
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e2ae      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005976:	4b92      	ldr	r3, [pc, #584]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0f0      	beq.n	8005964 <HAL_RCC_OscConfig+0x2a8>
 8005982:	e014      	b.n	80059ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005984:	f7fd fe5a 	bl	800363c <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800598c:	f7fd fe56 	bl	800363c <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b64      	cmp	r3, #100	@ 0x64
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e29a      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800599e:	4b88      	ldr	r3, [pc, #544]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f0      	bne.n	800598c <HAL_RCC_OscConfig+0x2d0>
 80059aa:	e000      	b.n	80059ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d060      	beq.n	8005a7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d005      	beq.n	80059cc <HAL_RCC_OscConfig+0x310>
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b0c      	cmp	r3, #12
 80059c4:	d119      	bne.n	80059fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d116      	bne.n	80059fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059cc:	4b7c      	ldr	r3, [pc, #496]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <HAL_RCC_OscConfig+0x328>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e277      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059e4:	4b76      	ldr	r3, [pc, #472]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	061b      	lsls	r3, r3, #24
 80059f2:	4973      	ldr	r1, [pc, #460]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059f8:	e040      	b.n	8005a7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d023      	beq.n	8005a4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a02:	4b6f      	ldr	r3, [pc, #444]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a6e      	ldr	r2, [pc, #440]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0e:	f7fd fe15 	bl	800363c <HAL_GetTick>
 8005a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a14:	e008      	b.n	8005a28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a16:	f7fd fe11 	bl	800363c <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d901      	bls.n	8005a28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e255      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a28:	4b65      	ldr	r3, [pc, #404]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0f0      	beq.n	8005a16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a34:	4b62      	ldr	r3, [pc, #392]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	061b      	lsls	r3, r3, #24
 8005a42:	495f      	ldr	r1, [pc, #380]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	604b      	str	r3, [r1, #4]
 8005a48:	e018      	b.n	8005a7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a4a:	4b5d      	ldr	r3, [pc, #372]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a5c      	ldr	r2, [pc, #368]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a56:	f7fd fdf1 	bl	800363c <HAL_GetTick>
 8005a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a5c:	e008      	b.n	8005a70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a5e:	f7fd fded 	bl	800363c <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e231      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a70:	4b53      	ldr	r3, [pc, #332]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1f0      	bne.n	8005a5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d03c      	beq.n	8005b02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d01c      	beq.n	8005aca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a90:	4b4b      	ldr	r3, [pc, #300]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a96:	4a4a      	ldr	r2, [pc, #296]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005a98:	f043 0301 	orr.w	r3, r3, #1
 8005a9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa0:	f7fd fdcc 	bl	800363c <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aa8:	f7fd fdc8 	bl	800363c <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e20c      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005aba:	4b41      	ldr	r3, [pc, #260]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0ef      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x3ec>
 8005ac8:	e01b      	b.n	8005b02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005aca:	4b3d      	ldr	r3, [pc, #244]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ad0:	4a3b      	ldr	r2, [pc, #236]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005ad2:	f023 0301 	bic.w	r3, r3, #1
 8005ad6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ada:	f7fd fdaf 	bl	800363c <HAL_GetTick>
 8005ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ae0:	e008      	b.n	8005af4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ae2:	f7fd fdab 	bl	800363c <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e1ef      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005af4:	4b32      	ldr	r3, [pc, #200]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1ef      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 80a6 	beq.w	8005c5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b10:	2300      	movs	r3, #0
 8005b12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005b14:	4b2a      	ldr	r3, [pc, #168]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10d      	bne.n	8005b3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b20:	4b27      	ldr	r3, [pc, #156]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b24:	4a26      	ldr	r2, [pc, #152]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b2c:	4b24      	ldr	r3, [pc, #144]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b3c:	4b21      	ldr	r3, [pc, #132]	@ (8005bc4 <HAL_RCC_OscConfig+0x508>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d118      	bne.n	8005b7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b48:	4b1e      	ldr	r3, [pc, #120]	@ (8005bc4 <HAL_RCC_OscConfig+0x508>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc4 <HAL_RCC_OscConfig+0x508>)
 8005b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b54:	f7fd fd72 	bl	800363c <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b5c:	f7fd fd6e 	bl	800363c <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e1b2      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b6e:	4b15      	ldr	r3, [pc, #84]	@ (8005bc4 <HAL_RCC_OscConfig+0x508>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0f0      	beq.n	8005b5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d108      	bne.n	8005b94 <HAL_RCC_OscConfig+0x4d8>
 8005b82:	4b0f      	ldr	r3, [pc, #60]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b88:	4a0d      	ldr	r2, [pc, #52]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b92:	e029      	b.n	8005be8 <HAL_RCC_OscConfig+0x52c>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2b05      	cmp	r3, #5
 8005b9a:	d115      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x50c>
 8005b9c:	4b08      	ldr	r3, [pc, #32]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba2:	4a07      	ldr	r2, [pc, #28]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005ba4:	f043 0304 	orr.w	r3, r3, #4
 8005ba8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bac:	4b04      	ldr	r3, [pc, #16]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb2:	4a03      	ldr	r2, [pc, #12]	@ (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005bb4:	f043 0301 	orr.w	r3, r3, #1
 8005bb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bbc:	e014      	b.n	8005be8 <HAL_RCC_OscConfig+0x52c>
 8005bbe:	bf00      	nop
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	40007000 	.word	0x40007000
 8005bc8:	4b9a      	ldr	r3, [pc, #616]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bce:	4a99      	ldr	r2, [pc, #612]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005bd0:	f023 0301 	bic.w	r3, r3, #1
 8005bd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bd8:	4b96      	ldr	r3, [pc, #600]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bde:	4a95      	ldr	r2, [pc, #596]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005be0:	f023 0304 	bic.w	r3, r3, #4
 8005be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d016      	beq.n	8005c1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf0:	f7fd fd24 	bl	800363c <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bf6:	e00a      	b.n	8005c0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bf8:	f7fd fd20 	bl	800363c <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e162      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c0e:	4b89      	ldr	r3, [pc, #548]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0ed      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x53c>
 8005c1c:	e015      	b.n	8005c4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c1e:	f7fd fd0d 	bl	800363c <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c24:	e00a      	b.n	8005c3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c26:	f7fd fd09 	bl	800363c <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e14b      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c3c:	4b7d      	ldr	r3, [pc, #500]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1ed      	bne.n	8005c26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c4a:	7ffb      	ldrb	r3, [r7, #31]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d105      	bne.n	8005c5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c50:	4b78      	ldr	r3, [pc, #480]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c54:	4a77      	ldr	r2, [pc, #476]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005c56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c5a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d03c      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01c      	beq.n	8005caa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c70:	4b70      	ldr	r3, [pc, #448]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c76:	4a6f      	ldr	r2, [pc, #444]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005c78:	f043 0301 	orr.w	r3, r3, #1
 8005c7c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c80:	f7fd fcdc 	bl	800363c <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c88:	f7fd fcd8 	bl	800363c <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e11c      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c9a:	4b66      	ldr	r3, [pc, #408]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005c9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0ef      	beq.n	8005c88 <HAL_RCC_OscConfig+0x5cc>
 8005ca8:	e01b      	b.n	8005ce2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005caa:	4b62      	ldr	r3, [pc, #392]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005cac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cb0:	4a60      	ldr	r2, [pc, #384]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005cb2:	f023 0301 	bic.w	r3, r3, #1
 8005cb6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cba:	f7fd fcbf 	bl	800363c <HAL_GetTick>
 8005cbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cc2:	f7fd fcbb 	bl	800363c <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e0ff      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cd4:	4b57      	ldr	r3, [pc, #348]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1ef      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 80f3 	beq.w	8005ed2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	f040 80c9 	bne.w	8005e88 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005cf6:	4b4f      	ldr	r3, [pc, #316]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f003 0203 	and.w	r2, r3, #3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d12c      	bne.n	8005d64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d14:	3b01      	subs	r3, #1
 8005d16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d123      	bne.n	8005d64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d11b      	bne.n	8005d64 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d36:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d113      	bne.n	8005d64 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d46:	085b      	lsrs	r3, r3, #1
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d109      	bne.n	8005d64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5a:	085b      	lsrs	r3, r3, #1
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d06b      	beq.n	8005e3c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	2b0c      	cmp	r3, #12
 8005d68:	d062      	beq.n	8005e30 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005d6a:	4b32      	ldr	r3, [pc, #200]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e0ac      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005d7a:	4b2e      	ldr	r3, [pc, #184]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a2d      	ldr	r2, [pc, #180]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005d80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d84:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d86:	f7fd fc59 	bl	800363c <HAL_GetTick>
 8005d8a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d8c:	e008      	b.n	8005da0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d8e:	f7fd fc55 	bl	800363c <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d901      	bls.n	8005da0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e099      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005da0:	4b24      	ldr	r3, [pc, #144]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1f0      	bne.n	8005d8e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dac:	4b21      	ldr	r3, [pc, #132]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	4b21      	ldr	r3, [pc, #132]	@ (8005e38 <HAL_RCC_OscConfig+0x77c>)
 8005db2:	4013      	ands	r3, r2
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005dbc:	3a01      	subs	r2, #1
 8005dbe:	0112      	lsls	r2, r2, #4
 8005dc0:	4311      	orrs	r1, r2
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005dc6:	0212      	lsls	r2, r2, #8
 8005dc8:	4311      	orrs	r1, r2
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005dce:	0852      	lsrs	r2, r2, #1
 8005dd0:	3a01      	subs	r2, #1
 8005dd2:	0552      	lsls	r2, r2, #21
 8005dd4:	4311      	orrs	r1, r2
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005dda:	0852      	lsrs	r2, r2, #1
 8005ddc:	3a01      	subs	r2, #1
 8005dde:	0652      	lsls	r2, r2, #25
 8005de0:	4311      	orrs	r1, r2
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005de6:	06d2      	lsls	r2, r2, #27
 8005de8:	430a      	orrs	r2, r1
 8005dea:	4912      	ldr	r1, [pc, #72]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005df0:	4b10      	ldr	r3, [pc, #64]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a0f      	ldr	r2, [pc, #60]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005df6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dfa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	4a0c      	ldr	r2, [pc, #48]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005e02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e08:	f7fd fc18 	bl	800363c <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e10:	f7fd fc14 	bl	800363c <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e058      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e22:	4b04      	ldr	r3, [pc, #16]	@ (8005e34 <HAL_RCC_OscConfig+0x778>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0f0      	beq.n	8005e10 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e2e:	e050      	b.n	8005ed2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e04f      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
 8005e34:	40021000 	.word	0x40021000
 8005e38:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e3c:	4b27      	ldr	r3, [pc, #156]	@ (8005edc <HAL_RCC_OscConfig+0x820>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d144      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005e48:	4b24      	ldr	r3, [pc, #144]	@ (8005edc <HAL_RCC_OscConfig+0x820>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a23      	ldr	r2, [pc, #140]	@ (8005edc <HAL_RCC_OscConfig+0x820>)
 8005e4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e54:	4b21      	ldr	r3, [pc, #132]	@ (8005edc <HAL_RCC_OscConfig+0x820>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	4a20      	ldr	r2, [pc, #128]	@ (8005edc <HAL_RCC_OscConfig+0x820>)
 8005e5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e60:	f7fd fbec 	bl	800363c <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e68:	f7fd fbe8 	bl	800363c <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e02c      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e7a:	4b18      	ldr	r3, [pc, #96]	@ (8005edc <HAL_RCC_OscConfig+0x820>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0f0      	beq.n	8005e68 <HAL_RCC_OscConfig+0x7ac>
 8005e86:	e024      	b.n	8005ed2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	2b0c      	cmp	r3, #12
 8005e8c:	d01f      	beq.n	8005ece <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e8e:	4b13      	ldr	r3, [pc, #76]	@ (8005edc <HAL_RCC_OscConfig+0x820>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a12      	ldr	r2, [pc, #72]	@ (8005edc <HAL_RCC_OscConfig+0x820>)
 8005e94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e9a:	f7fd fbcf 	bl	800363c <HAL_GetTick>
 8005e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ea0:	e008      	b.n	8005eb4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ea2:	f7fd fbcb 	bl	800363c <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e00f      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005eb4:	4b09      	ldr	r3, [pc, #36]	@ (8005edc <HAL_RCC_OscConfig+0x820>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1f0      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005ec0:	4b06      	ldr	r3, [pc, #24]	@ (8005edc <HAL_RCC_OscConfig+0x820>)
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	4905      	ldr	r1, [pc, #20]	@ (8005edc <HAL_RCC_OscConfig+0x820>)
 8005ec6:	4b06      	ldr	r3, [pc, #24]	@ (8005ee0 <HAL_RCC_OscConfig+0x824>)
 8005ec8:	4013      	ands	r3, r2
 8005eca:	60cb      	str	r3, [r1, #12]
 8005ecc:	e001      	b.n	8005ed2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e000      	b.n	8005ed4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3720      	adds	r7, #32
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	40021000 	.word	0x40021000
 8005ee0:	feeefffc 	.word	0xfeeefffc

08005ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e0e7      	b.n	80060c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ef8:	4b75      	ldr	r3, [pc, #468]	@ (80060d0 <HAL_RCC_ClockConfig+0x1ec>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d910      	bls.n	8005f28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f06:	4b72      	ldr	r3, [pc, #456]	@ (80060d0 <HAL_RCC_ClockConfig+0x1ec>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f023 0207 	bic.w	r2, r3, #7
 8005f0e:	4970      	ldr	r1, [pc, #448]	@ (80060d0 <HAL_RCC_ClockConfig+0x1ec>)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f16:	4b6e      	ldr	r3, [pc, #440]	@ (80060d0 <HAL_RCC_ClockConfig+0x1ec>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0307 	and.w	r3, r3, #7
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d001      	beq.n	8005f28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e0cf      	b.n	80060c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d010      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	4b66      	ldr	r3, [pc, #408]	@ (80060d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d908      	bls.n	8005f56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f44:	4b63      	ldr	r3, [pc, #396]	@ (80060d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	4960      	ldr	r1, [pc, #384]	@ (80060d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d04c      	beq.n	8005ffc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d107      	bne.n	8005f7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f6a:	4b5a      	ldr	r3, [pc, #360]	@ (80060d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d121      	bne.n	8005fba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e0a6      	b.n	80060c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d107      	bne.n	8005f92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f82:	4b54      	ldr	r3, [pc, #336]	@ (80060d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d115      	bne.n	8005fba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e09a      	b.n	80060c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d107      	bne.n	8005faa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f9a:	4b4e      	ldr	r3, [pc, #312]	@ (80060d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e08e      	b.n	80060c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005faa:	4b4a      	ldr	r3, [pc, #296]	@ (80060d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e086      	b.n	80060c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fba:	4b46      	ldr	r3, [pc, #280]	@ (80060d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f023 0203 	bic.w	r2, r3, #3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	4943      	ldr	r1, [pc, #268]	@ (80060d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fcc:	f7fd fb36 	bl	800363c <HAL_GetTick>
 8005fd0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fd2:	e00a      	b.n	8005fea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fd4:	f7fd fb32 	bl	800363c <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e06e      	b.n	80060c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fea:	4b3a      	ldr	r3, [pc, #232]	@ (80060d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 020c 	and.w	r2, r3, #12
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d1eb      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d010      	beq.n	800602a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	4b31      	ldr	r3, [pc, #196]	@ (80060d4 <HAL_RCC_ClockConfig+0x1f0>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006014:	429a      	cmp	r2, r3
 8006016:	d208      	bcs.n	800602a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006018:	4b2e      	ldr	r3, [pc, #184]	@ (80060d4 <HAL_RCC_ClockConfig+0x1f0>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	492b      	ldr	r1, [pc, #172]	@ (80060d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006026:	4313      	orrs	r3, r2
 8006028:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800602a:	4b29      	ldr	r3, [pc, #164]	@ (80060d0 <HAL_RCC_ClockConfig+0x1ec>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	429a      	cmp	r2, r3
 8006036:	d210      	bcs.n	800605a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006038:	4b25      	ldr	r3, [pc, #148]	@ (80060d0 <HAL_RCC_ClockConfig+0x1ec>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f023 0207 	bic.w	r2, r3, #7
 8006040:	4923      	ldr	r1, [pc, #140]	@ (80060d0 <HAL_RCC_ClockConfig+0x1ec>)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	4313      	orrs	r3, r2
 8006046:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006048:	4b21      	ldr	r3, [pc, #132]	@ (80060d0 <HAL_RCC_ClockConfig+0x1ec>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	429a      	cmp	r2, r3
 8006054:	d001      	beq.n	800605a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e036      	b.n	80060c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	2b00      	cmp	r3, #0
 8006064:	d008      	beq.n	8006078 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006066:	4b1b      	ldr	r3, [pc, #108]	@ (80060d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	4918      	ldr	r1, [pc, #96]	@ (80060d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006074:	4313      	orrs	r3, r2
 8006076:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0308 	and.w	r3, r3, #8
 8006080:	2b00      	cmp	r3, #0
 8006082:	d009      	beq.n	8006098 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006084:	4b13      	ldr	r3, [pc, #76]	@ (80060d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	4910      	ldr	r1, [pc, #64]	@ (80060d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006094:	4313      	orrs	r3, r2
 8006096:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006098:	f000 f824 	bl	80060e4 <HAL_RCC_GetSysClockFreq>
 800609c:	4602      	mov	r2, r0
 800609e:	4b0d      	ldr	r3, [pc, #52]	@ (80060d4 <HAL_RCC_ClockConfig+0x1f0>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	091b      	lsrs	r3, r3, #4
 80060a4:	f003 030f 	and.w	r3, r3, #15
 80060a8:	490b      	ldr	r1, [pc, #44]	@ (80060d8 <HAL_RCC_ClockConfig+0x1f4>)
 80060aa:	5ccb      	ldrb	r3, [r1, r3]
 80060ac:	f003 031f 	and.w	r3, r3, #31
 80060b0:	fa22 f303 	lsr.w	r3, r2, r3
 80060b4:	4a09      	ldr	r2, [pc, #36]	@ (80060dc <HAL_RCC_ClockConfig+0x1f8>)
 80060b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80060b8:	4b09      	ldr	r3, [pc, #36]	@ (80060e0 <HAL_RCC_ClockConfig+0x1fc>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fd fa6d 	bl	800359c <HAL_InitTick>
 80060c2:	4603      	mov	r3, r0
 80060c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80060c6:	7afb      	ldrb	r3, [r7, #11]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	40022000 	.word	0x40022000
 80060d4:	40021000 	.word	0x40021000
 80060d8:	0800a09c 	.word	0x0800a09c
 80060dc:	20000000 	.word	0x20000000
 80060e0:	20000004 	.word	0x20000004

080060e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b089      	sub	sp, #36	@ 0x24
 80060e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	61fb      	str	r3, [r7, #28]
 80060ee:	2300      	movs	r3, #0
 80060f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060f2:	4b3e      	ldr	r3, [pc, #248]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x108>)
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 030c 	and.w	r3, r3, #12
 80060fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060fc:	4b3b      	ldr	r3, [pc, #236]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x108>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d005      	beq.n	8006118 <HAL_RCC_GetSysClockFreq+0x34>
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	2b0c      	cmp	r3, #12
 8006110:	d121      	bne.n	8006156 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d11e      	bne.n	8006156 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006118:	4b34      	ldr	r3, [pc, #208]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x108>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0308 	and.w	r3, r3, #8
 8006120:	2b00      	cmp	r3, #0
 8006122:	d107      	bne.n	8006134 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006124:	4b31      	ldr	r3, [pc, #196]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006126:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800612a:	0a1b      	lsrs	r3, r3, #8
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	61fb      	str	r3, [r7, #28]
 8006132:	e005      	b.n	8006140 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006134:	4b2d      	ldr	r3, [pc, #180]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	091b      	lsrs	r3, r3, #4
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006140:	4a2b      	ldr	r2, [pc, #172]	@ (80061f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006148:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10d      	bne.n	800616c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006154:	e00a      	b.n	800616c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	2b04      	cmp	r3, #4
 800615a:	d102      	bne.n	8006162 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800615c:	4b25      	ldr	r3, [pc, #148]	@ (80061f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800615e:	61bb      	str	r3, [r7, #24]
 8006160:	e004      	b.n	800616c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	2b08      	cmp	r3, #8
 8006166:	d101      	bne.n	800616c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006168:	4b23      	ldr	r3, [pc, #140]	@ (80061f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800616a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	2b0c      	cmp	r3, #12
 8006170:	d134      	bne.n	80061dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006172:	4b1e      	ldr	r3, [pc, #120]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f003 0303 	and.w	r3, r3, #3
 800617a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b02      	cmp	r3, #2
 8006180:	d003      	beq.n	800618a <HAL_RCC_GetSysClockFreq+0xa6>
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b03      	cmp	r3, #3
 8006186:	d003      	beq.n	8006190 <HAL_RCC_GetSysClockFreq+0xac>
 8006188:	e005      	b.n	8006196 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800618a:	4b1a      	ldr	r3, [pc, #104]	@ (80061f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800618c:	617b      	str	r3, [r7, #20]
      break;
 800618e:	e005      	b.n	800619c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006190:	4b19      	ldr	r3, [pc, #100]	@ (80061f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006192:	617b      	str	r3, [r7, #20]
      break;
 8006194:	e002      	b.n	800619c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	617b      	str	r3, [r7, #20]
      break;
 800619a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800619c:	4b13      	ldr	r3, [pc, #76]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x108>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	091b      	lsrs	r3, r3, #4
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	3301      	adds	r3, #1
 80061a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80061aa:	4b10      	ldr	r3, [pc, #64]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x108>)
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	0a1b      	lsrs	r3, r3, #8
 80061b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	fb03 f202 	mul.w	r2, r3, r2
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061c2:	4b0a      	ldr	r3, [pc, #40]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x108>)
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	0e5b      	lsrs	r3, r3, #25
 80061c8:	f003 0303 	and.w	r3, r3, #3
 80061cc:	3301      	adds	r3, #1
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80061dc:	69bb      	ldr	r3, [r7, #24]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3724      	adds	r7, #36	@ 0x24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40021000 	.word	0x40021000
 80061f0:	0800a0b4 	.word	0x0800a0b4
 80061f4:	00f42400 	.word	0x00f42400
 80061f8:	007a1200 	.word	0x007a1200

080061fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006200:	4b03      	ldr	r3, [pc, #12]	@ (8006210 <HAL_RCC_GetHCLKFreq+0x14>)
 8006202:	681b      	ldr	r3, [r3, #0]
}
 8006204:	4618      	mov	r0, r3
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	20000000 	.word	0x20000000

08006214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006218:	f7ff fff0 	bl	80061fc <HAL_RCC_GetHCLKFreq>
 800621c:	4602      	mov	r2, r0
 800621e:	4b06      	ldr	r3, [pc, #24]	@ (8006238 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	0a1b      	lsrs	r3, r3, #8
 8006224:	f003 0307 	and.w	r3, r3, #7
 8006228:	4904      	ldr	r1, [pc, #16]	@ (800623c <HAL_RCC_GetPCLK1Freq+0x28>)
 800622a:	5ccb      	ldrb	r3, [r1, r3]
 800622c:	f003 031f 	and.w	r3, r3, #31
 8006230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006234:	4618      	mov	r0, r3
 8006236:	bd80      	pop	{r7, pc}
 8006238:	40021000 	.word	0x40021000
 800623c:	0800a0ac 	.word	0x0800a0ac

08006240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006244:	f7ff ffda 	bl	80061fc <HAL_RCC_GetHCLKFreq>
 8006248:	4602      	mov	r2, r0
 800624a:	4b06      	ldr	r3, [pc, #24]	@ (8006264 <HAL_RCC_GetPCLK2Freq+0x24>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	0adb      	lsrs	r3, r3, #11
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	4904      	ldr	r1, [pc, #16]	@ (8006268 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006256:	5ccb      	ldrb	r3, [r1, r3]
 8006258:	f003 031f 	and.w	r3, r3, #31
 800625c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006260:	4618      	mov	r0, r3
 8006262:	bd80      	pop	{r7, pc}
 8006264:	40021000 	.word	0x40021000
 8006268:	0800a0ac 	.word	0x0800a0ac

0800626c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006274:	2300      	movs	r3, #0
 8006276:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006278:	4b2a      	ldr	r3, [pc, #168]	@ (8006324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800627a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800627c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006284:	f7ff f9b6 	bl	80055f4 <HAL_PWREx_GetVoltageRange>
 8006288:	6178      	str	r0, [r7, #20]
 800628a:	e014      	b.n	80062b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800628c:	4b25      	ldr	r3, [pc, #148]	@ (8006324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800628e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006290:	4a24      	ldr	r2, [pc, #144]	@ (8006324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006292:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006296:	6593      	str	r3, [r2, #88]	@ 0x58
 8006298:	4b22      	ldr	r3, [pc, #136]	@ (8006324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800629a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800629c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80062a4:	f7ff f9a6 	bl	80055f4 <HAL_PWREx_GetVoltageRange>
 80062a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80062aa:	4b1e      	ldr	r3, [pc, #120]	@ (8006324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062bc:	d10b      	bne.n	80062d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b80      	cmp	r3, #128	@ 0x80
 80062c2:	d919      	bls.n	80062f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2ba0      	cmp	r3, #160	@ 0xa0
 80062c8:	d902      	bls.n	80062d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80062ca:	2302      	movs	r3, #2
 80062cc:	613b      	str	r3, [r7, #16]
 80062ce:	e013      	b.n	80062f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80062d0:	2301      	movs	r3, #1
 80062d2:	613b      	str	r3, [r7, #16]
 80062d4:	e010      	b.n	80062f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b80      	cmp	r3, #128	@ 0x80
 80062da:	d902      	bls.n	80062e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80062dc:	2303      	movs	r3, #3
 80062de:	613b      	str	r3, [r7, #16]
 80062e0:	e00a      	b.n	80062f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b80      	cmp	r3, #128	@ 0x80
 80062e6:	d102      	bne.n	80062ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80062e8:	2302      	movs	r3, #2
 80062ea:	613b      	str	r3, [r7, #16]
 80062ec:	e004      	b.n	80062f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b70      	cmp	r3, #112	@ 0x70
 80062f2:	d101      	bne.n	80062f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80062f4:	2301      	movs	r3, #1
 80062f6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80062f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f023 0207 	bic.w	r2, r3, #7
 8006300:	4909      	ldr	r1, [pc, #36]	@ (8006328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	4313      	orrs	r3, r2
 8006306:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006308:	4b07      	ldr	r3, [pc, #28]	@ (8006328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0307 	and.w	r3, r3, #7
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	429a      	cmp	r2, r3
 8006314:	d001      	beq.n	800631a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e000      	b.n	800631c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	40021000 	.word	0x40021000
 8006328:	40022000 	.word	0x40022000

0800632c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006334:	2300      	movs	r3, #0
 8006336:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006338:	2300      	movs	r3, #0
 800633a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006344:	2b00      	cmp	r3, #0
 8006346:	d031      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800634c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006350:	d01a      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006352:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006356:	d814      	bhi.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006358:	2b00      	cmp	r3, #0
 800635a:	d009      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800635c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006360:	d10f      	bne.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006362:	4b5d      	ldr	r3, [pc, #372]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	4a5c      	ldr	r2, [pc, #368]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800636c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800636e:	e00c      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3304      	adds	r3, #4
 8006374:	2100      	movs	r1, #0
 8006376:	4618      	mov	r0, r3
 8006378:	f000 f9ce 	bl	8006718 <RCCEx_PLLSAI1_Config>
 800637c:	4603      	mov	r3, r0
 800637e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006380:	e003      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	74fb      	strb	r3, [r7, #19]
      break;
 8006386:	e000      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006388:	bf00      	nop
    }

    if(ret == HAL_OK)
 800638a:	7cfb      	ldrb	r3, [r7, #19]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10b      	bne.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006390:	4b51      	ldr	r3, [pc, #324]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006396:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800639e:	494e      	ldr	r1, [pc, #312]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80063a6:	e001      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a8:	7cfb      	ldrb	r3, [r7, #19]
 80063aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 809e 	beq.w	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063ba:	2300      	movs	r3, #0
 80063bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80063be:	4b46      	ldr	r3, [pc, #280]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e000      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80063ce:	2300      	movs	r3, #0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00d      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063d4:	4b40      	ldr	r3, [pc, #256]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063d8:	4a3f      	ldr	r2, [pc, #252]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063de:	6593      	str	r3, [r2, #88]	@ 0x58
 80063e0:	4b3d      	ldr	r3, [pc, #244]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063e8:	60bb      	str	r3, [r7, #8]
 80063ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063ec:	2301      	movs	r3, #1
 80063ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063f0:	4b3a      	ldr	r3, [pc, #232]	@ (80064dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a39      	ldr	r2, [pc, #228]	@ (80064dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80063f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063fc:	f7fd f91e 	bl	800363c <HAL_GetTick>
 8006400:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006402:	e009      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006404:	f7fd f91a 	bl	800363c <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d902      	bls.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	74fb      	strb	r3, [r7, #19]
        break;
 8006416:	e005      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006418:	4b30      	ldr	r3, [pc, #192]	@ (80064dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006420:	2b00      	cmp	r3, #0
 8006422:	d0ef      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006424:	7cfb      	ldrb	r3, [r7, #19]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d15a      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800642a:	4b2b      	ldr	r3, [pc, #172]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800642c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006430:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006434:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d01e      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	429a      	cmp	r2, r3
 8006444:	d019      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006446:	4b24      	ldr	r3, [pc, #144]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800644c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006450:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006452:	4b21      	ldr	r3, [pc, #132]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006458:	4a1f      	ldr	r2, [pc, #124]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800645a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800645e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006462:	4b1d      	ldr	r3, [pc, #116]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006468:	4a1b      	ldr	r2, [pc, #108]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800646a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800646e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006472:	4a19      	ldr	r2, [pc, #100]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	d016      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006484:	f7fd f8da 	bl	800363c <HAL_GetTick>
 8006488:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800648a:	e00b      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800648c:	f7fd f8d6 	bl	800363c <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800649a:	4293      	cmp	r3, r2
 800649c:	d902      	bls.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	74fb      	strb	r3, [r7, #19]
            break;
 80064a2:	e006      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064a4:	4b0c      	ldr	r3, [pc, #48]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0ec      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80064b2:	7cfb      	ldrb	r3, [r7, #19]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10b      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064b8:	4b07      	ldr	r3, [pc, #28]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c6:	4904      	ldr	r1, [pc, #16]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80064ce:	e009      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064d0:	7cfb      	ldrb	r3, [r7, #19]
 80064d2:	74bb      	strb	r3, [r7, #18]
 80064d4:	e006      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80064d6:	bf00      	nop
 80064d8:	40021000 	.word	0x40021000
 80064dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e0:	7cfb      	ldrb	r3, [r7, #19]
 80064e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064e4:	7c7b      	ldrb	r3, [r7, #17]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d105      	bne.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ea:	4b8a      	ldr	r3, [pc, #552]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ee:	4a89      	ldr	r2, [pc, #548]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00a      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006502:	4b84      	ldr	r3, [pc, #528]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006508:	f023 0203 	bic.w	r2, r3, #3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	4980      	ldr	r1, [pc, #512]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006512:	4313      	orrs	r3, r2
 8006514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00a      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006524:	4b7b      	ldr	r3, [pc, #492]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800652a:	f023 020c 	bic.w	r2, r3, #12
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006532:	4978      	ldr	r1, [pc, #480]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006534:	4313      	orrs	r3, r2
 8006536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006546:	4b73      	ldr	r3, [pc, #460]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800654c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006554:	496f      	ldr	r1, [pc, #444]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006556:	4313      	orrs	r3, r2
 8006558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00a      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006568:	4b6a      	ldr	r3, [pc, #424]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800656a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800656e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006576:	4967      	ldr	r1, [pc, #412]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006578:	4313      	orrs	r3, r2
 800657a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800658a:	4b62      	ldr	r3, [pc, #392]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800658c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006590:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006598:	495e      	ldr	r1, [pc, #376]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800659a:	4313      	orrs	r3, r2
 800659c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00a      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065ac:	4b59      	ldr	r3, [pc, #356]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ba:	4956      	ldr	r1, [pc, #344]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065ce:	4b51      	ldr	r3, [pc, #324]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065dc:	494d      	ldr	r1, [pc, #308]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d028      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065f0:	4b48      	ldr	r3, [pc, #288]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065fe:	4945      	ldr	r1, [pc, #276]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006600:	4313      	orrs	r3, r2
 8006602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800660e:	d106      	bne.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006610:	4b40      	ldr	r3, [pc, #256]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	4a3f      	ldr	r2, [pc, #252]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006616:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800661a:	60d3      	str	r3, [r2, #12]
 800661c:	e011      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006622:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006626:	d10c      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3304      	adds	r3, #4
 800662c:	2101      	movs	r1, #1
 800662e:	4618      	mov	r0, r3
 8006630:	f000 f872 	bl	8006718 <RCCEx_PLLSAI1_Config>
 8006634:	4603      	mov	r3, r0
 8006636:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006638:	7cfb      	ldrb	r3, [r7, #19]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800663e:	7cfb      	ldrb	r3, [r7, #19]
 8006640:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d028      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800664e:	4b31      	ldr	r3, [pc, #196]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006654:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800665c:	492d      	ldr	r1, [pc, #180]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800665e:	4313      	orrs	r3, r2
 8006660:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006668:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800666c:	d106      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800666e:	4b29      	ldr	r3, [pc, #164]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	4a28      	ldr	r2, [pc, #160]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006678:	60d3      	str	r3, [r2, #12]
 800667a:	e011      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006680:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006684:	d10c      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3304      	adds	r3, #4
 800668a:	2101      	movs	r1, #1
 800668c:	4618      	mov	r0, r3
 800668e:	f000 f843 	bl	8006718 <RCCEx_PLLSAI1_Config>
 8006692:	4603      	mov	r3, r0
 8006694:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006696:	7cfb      	ldrb	r3, [r7, #19]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800669c:	7cfb      	ldrb	r3, [r7, #19]
 800669e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d01c      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066ac:	4b19      	ldr	r3, [pc, #100]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066ba:	4916      	ldr	r1, [pc, #88]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066ca:	d10c      	bne.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	3304      	adds	r3, #4
 80066d0:	2102      	movs	r1, #2
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 f820 	bl	8006718 <RCCEx_PLLSAI1_Config>
 80066d8:	4603      	mov	r3, r0
 80066da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066dc:	7cfb      	ldrb	r3, [r7, #19]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80066e2:	7cfb      	ldrb	r3, [r7, #19]
 80066e4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00a      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80066f2:	4b08      	ldr	r3, [pc, #32]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006700:	4904      	ldr	r1, [pc, #16]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006702:	4313      	orrs	r3, r2
 8006704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006708:	7cbb      	ldrb	r3, [r7, #18]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	40021000 	.word	0x40021000

08006718 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006726:	4b74      	ldr	r3, [pc, #464]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d018      	beq.n	8006764 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006732:	4b71      	ldr	r3, [pc, #452]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f003 0203 	and.w	r2, r3, #3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	429a      	cmp	r2, r3
 8006740:	d10d      	bne.n	800675e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
       ||
 8006746:	2b00      	cmp	r3, #0
 8006748:	d009      	beq.n	800675e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800674a:	4b6b      	ldr	r3, [pc, #428]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	091b      	lsrs	r3, r3, #4
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
       ||
 800675a:	429a      	cmp	r2, r3
 800675c:	d047      	beq.n	80067ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	73fb      	strb	r3, [r7, #15]
 8006762:	e044      	b.n	80067ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b03      	cmp	r3, #3
 800676a:	d018      	beq.n	800679e <RCCEx_PLLSAI1_Config+0x86>
 800676c:	2b03      	cmp	r3, #3
 800676e:	d825      	bhi.n	80067bc <RCCEx_PLLSAI1_Config+0xa4>
 8006770:	2b01      	cmp	r3, #1
 8006772:	d002      	beq.n	800677a <RCCEx_PLLSAI1_Config+0x62>
 8006774:	2b02      	cmp	r3, #2
 8006776:	d009      	beq.n	800678c <RCCEx_PLLSAI1_Config+0x74>
 8006778:	e020      	b.n	80067bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800677a:	4b5f      	ldr	r3, [pc, #380]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d11d      	bne.n	80067c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800678a:	e01a      	b.n	80067c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800678c:	4b5a      	ldr	r3, [pc, #360]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006794:	2b00      	cmp	r3, #0
 8006796:	d116      	bne.n	80067c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800679c:	e013      	b.n	80067c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800679e:	4b56      	ldr	r3, [pc, #344]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10f      	bne.n	80067ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80067aa:	4b53      	ldr	r3, [pc, #332]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d109      	bne.n	80067ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067ba:	e006      	b.n	80067ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	73fb      	strb	r3, [r7, #15]
      break;
 80067c0:	e004      	b.n	80067cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067c2:	bf00      	nop
 80067c4:	e002      	b.n	80067cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067c6:	bf00      	nop
 80067c8:	e000      	b.n	80067cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10d      	bne.n	80067ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80067d2:	4b49      	ldr	r3, [pc, #292]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6819      	ldr	r1, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	430b      	orrs	r3, r1
 80067e8:	4943      	ldr	r1, [pc, #268]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d17c      	bne.n	80068ee <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80067f4:	4b40      	ldr	r3, [pc, #256]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a3f      	ldr	r2, [pc, #252]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006800:	f7fc ff1c 	bl	800363c <HAL_GetTick>
 8006804:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006806:	e009      	b.n	800681c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006808:	f7fc ff18 	bl	800363c <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b02      	cmp	r3, #2
 8006814:	d902      	bls.n	800681c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	73fb      	strb	r3, [r7, #15]
        break;
 800681a:	e005      	b.n	8006828 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800681c:	4b36      	ldr	r3, [pc, #216]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1ef      	bne.n	8006808 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006828:	7bfb      	ldrb	r3, [r7, #15]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d15f      	bne.n	80068ee <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d110      	bne.n	8006856 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006834:	4b30      	ldr	r3, [pc, #192]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800683c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	6892      	ldr	r2, [r2, #8]
 8006844:	0211      	lsls	r1, r2, #8
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	68d2      	ldr	r2, [r2, #12]
 800684a:	06d2      	lsls	r2, r2, #27
 800684c:	430a      	orrs	r2, r1
 800684e:	492a      	ldr	r1, [pc, #168]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006850:	4313      	orrs	r3, r2
 8006852:	610b      	str	r3, [r1, #16]
 8006854:	e027      	b.n	80068a6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d112      	bne.n	8006882 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800685c:	4b26      	ldr	r3, [pc, #152]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006864:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	6892      	ldr	r2, [r2, #8]
 800686c:	0211      	lsls	r1, r2, #8
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	6912      	ldr	r2, [r2, #16]
 8006872:	0852      	lsrs	r2, r2, #1
 8006874:	3a01      	subs	r2, #1
 8006876:	0552      	lsls	r2, r2, #21
 8006878:	430a      	orrs	r2, r1
 800687a:	491f      	ldr	r1, [pc, #124]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800687c:	4313      	orrs	r3, r2
 800687e:	610b      	str	r3, [r1, #16]
 8006880:	e011      	b.n	80068a6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006882:	4b1d      	ldr	r3, [pc, #116]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800688a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	6892      	ldr	r2, [r2, #8]
 8006892:	0211      	lsls	r1, r2, #8
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	6952      	ldr	r2, [r2, #20]
 8006898:	0852      	lsrs	r2, r2, #1
 800689a:	3a01      	subs	r2, #1
 800689c:	0652      	lsls	r2, r2, #25
 800689e:	430a      	orrs	r2, r1
 80068a0:	4915      	ldr	r1, [pc, #84]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80068a6:	4b14      	ldr	r3, [pc, #80]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a13      	ldr	r2, [pc, #76]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b2:	f7fc fec3 	bl	800363c <HAL_GetTick>
 80068b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068b8:	e009      	b.n	80068ce <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068ba:	f7fc febf 	bl	800363c <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d902      	bls.n	80068ce <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	73fb      	strb	r3, [r7, #15]
          break;
 80068cc:	e005      	b.n	80068da <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068ce:	4b0a      	ldr	r3, [pc, #40]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0ef      	beq.n	80068ba <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80068da:	7bfb      	ldrb	r3, [r7, #15]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d106      	bne.n	80068ee <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80068e0:	4b05      	ldr	r3, [pc, #20]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068e2:	691a      	ldr	r2, [r3, #16]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	4903      	ldr	r1, [pc, #12]	@ (80068f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	40021000 	.word	0x40021000

080068fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e040      	b.n	8006990 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d106      	bne.n	8006924 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7fb ff16 	bl	8002750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2224      	movs	r2, #36	@ 0x24
 8006928:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0201 	bic.w	r2, r2, #1
 8006938:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fe0c 	bl	8007560 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fbdd 	bl	8007108 <UART_SetConfig>
 800694e:	4603      	mov	r3, r0
 8006950:	2b01      	cmp	r3, #1
 8006952:	d101      	bne.n	8006958 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e01b      	b.n	8006990 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006966:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689a      	ldr	r2, [r3, #8]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006976:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0201 	orr.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fe8b 	bl	80076a4 <UART_CheckIdleState>
 800698e:	4603      	mov	r3, r0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b08a      	sub	sp, #40	@ 0x28
 800699c:	af02      	add	r7, sp, #8
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	603b      	str	r3, [r7, #0]
 80069a4:	4613      	mov	r3, r2
 80069a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069ac:	2b20      	cmp	r3, #32
 80069ae:	d177      	bne.n	8006aa0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <HAL_UART_Transmit+0x24>
 80069b6:	88fb      	ldrh	r3, [r7, #6]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e070      	b.n	8006aa2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2221      	movs	r2, #33	@ 0x21
 80069cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069ce:	f7fc fe35 	bl	800363c <HAL_GetTick>
 80069d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	88fa      	ldrh	r2, [r7, #6]
 80069d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	88fa      	ldrh	r2, [r7, #6]
 80069e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ec:	d108      	bne.n	8006a00 <HAL_UART_Transmit+0x68>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d104      	bne.n	8006a00 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	61bb      	str	r3, [r7, #24]
 80069fe:	e003      	b.n	8006a08 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a04:	2300      	movs	r3, #0
 8006a06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a08:	e02f      	b.n	8006a6a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2200      	movs	r2, #0
 8006a12:	2180      	movs	r1, #128	@ 0x80
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 feed 	bl	80077f4 <UART_WaitOnFlagUntilTimeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d004      	beq.n	8006a2a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2220      	movs	r2, #32
 8006a24:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e03b      	b.n	8006aa2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10b      	bne.n	8006a48 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	881a      	ldrh	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a3c:	b292      	uxth	r2, r2
 8006a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	3302      	adds	r3, #2
 8006a44:	61bb      	str	r3, [r7, #24]
 8006a46:	e007      	b.n	8006a58 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	781a      	ldrb	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	3301      	adds	r3, #1
 8006a56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	3b01      	subs	r3, #1
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1c9      	bne.n	8006a0a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	2140      	movs	r1, #64	@ 0x40
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 feb7 	bl	80077f4 <UART_WaitOnFlagUntilTimeout>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d004      	beq.n	8006a96 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e005      	b.n	8006aa2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	e000      	b.n	8006aa2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006aa0:	2302      	movs	r3, #2
  }
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3720      	adds	r7, #32
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b0ba      	sub	sp, #232	@ 0xe8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ad2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006ad6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006ada:	4013      	ands	r3, r2
 8006adc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006ae0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d115      	bne.n	8006b14 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aec:	f003 0320 	and.w	r3, r3, #32
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00f      	beq.n	8006b14 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006af8:	f003 0320 	and.w	r3, r3, #32
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d009      	beq.n	8006b14 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 82ca 	beq.w	800709e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	4798      	blx	r3
      }
      return;
 8006b12:	e2c4      	b.n	800709e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006b14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 8117 	beq.w	8006d4c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d106      	bne.n	8006b38 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006b2e:	4b85      	ldr	r3, [pc, #532]	@ (8006d44 <HAL_UART_IRQHandler+0x298>)
 8006b30:	4013      	ands	r3, r2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 810a 	beq.w	8006d4c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d011      	beq.n	8006b68 <HAL_UART_IRQHandler+0xbc>
 8006b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00b      	beq.n	8006b68 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2201      	movs	r2, #1
 8006b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b5e:	f043 0201 	orr.w	r2, r3, #1
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d011      	beq.n	8006b98 <HAL_UART_IRQHandler+0xec>
 8006b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00b      	beq.n	8006b98 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2202      	movs	r2, #2
 8006b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b8e:	f043 0204 	orr.w	r2, r3, #4
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d011      	beq.n	8006bc8 <HAL_UART_IRQHandler+0x11c>
 8006ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00b      	beq.n	8006bc8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2204      	movs	r2, #4
 8006bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bbe:	f043 0202 	orr.w	r2, r3, #2
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bcc:	f003 0308 	and.w	r3, r3, #8
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d017      	beq.n	8006c04 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bd8:	f003 0320 	and.w	r3, r3, #32
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d105      	bne.n	8006bec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006be4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00b      	beq.n	8006c04 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2208      	movs	r2, #8
 8006bf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bfa:	f043 0208 	orr.w	r2, r3, #8
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d012      	beq.n	8006c36 <HAL_UART_IRQHandler+0x18a>
 8006c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00c      	beq.n	8006c36 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c2c:	f043 0220 	orr.w	r2, r3, #32
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 8230 	beq.w	80070a2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00d      	beq.n	8006c6a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c52:	f003 0320 	and.w	r3, r3, #32
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d007      	beq.n	8006c6a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c7e:	2b40      	cmp	r3, #64	@ 0x40
 8006c80:	d005      	beq.n	8006c8e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d04f      	beq.n	8006d2e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fee4 	bl	8007a5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c9e:	2b40      	cmp	r3, #64	@ 0x40
 8006ca0:	d141      	bne.n	8006d26 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3308      	adds	r3, #8
 8006ca8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006cb0:	e853 3f00 	ldrex	r3, [r3]
 8006cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3308      	adds	r3, #8
 8006cca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006cce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006cda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006cde:	e841 2300 	strex	r3, r2, [r1]
 8006ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006ce6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1d9      	bne.n	8006ca2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d013      	beq.n	8006d1e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cfa:	4a13      	ldr	r2, [pc, #76]	@ (8006d48 <HAL_UART_IRQHandler+0x29c>)
 8006cfc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fd f8fe 	bl	8003f04 <HAL_DMA_Abort_IT>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d017      	beq.n	8006d3e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006d18:	4610      	mov	r0, r2
 8006d1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d1c:	e00f      	b.n	8006d3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f9e8 	bl	80070f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d24:	e00b      	b.n	8006d3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f9e4 	bl	80070f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d2c:	e007      	b.n	8006d3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f9e0 	bl	80070f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006d3c:	e1b1      	b.n	80070a2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d3e:	bf00      	nop
    return;
 8006d40:	e1af      	b.n	80070a2 <HAL_UART_IRQHandler+0x5f6>
 8006d42:	bf00      	nop
 8006d44:	04000120 	.word	0x04000120
 8006d48:	08007d0d 	.word	0x08007d0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	f040 816a 	bne.w	800702a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d5a:	f003 0310 	and.w	r3, r3, #16
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 8163 	beq.w	800702a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d68:	f003 0310 	and.w	r3, r3, #16
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 815c 	beq.w	800702a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2210      	movs	r2, #16
 8006d78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d84:	2b40      	cmp	r3, #64	@ 0x40
 8006d86:	f040 80d4 	bne.w	8006f32 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 80ad 	beq.w	8006efa <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006da6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006daa:	429a      	cmp	r2, r3
 8006dac:	f080 80a5 	bcs.w	8006efa <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006db6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0320 	and.w	r3, r3, #32
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f040 8086 	bne.w	8006ed8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006de4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006de8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006df6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006dfa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006e02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1da      	bne.n	8006dcc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006e26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e28:	f023 0301 	bic.w	r3, r3, #1
 8006e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3308      	adds	r3, #8
 8006e36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006e3a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006e3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e46:	e841 2300 	strex	r3, r2, [r1]
 8006e4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1e1      	bne.n	8006e16 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3308      	adds	r3, #8
 8006e58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3308      	adds	r3, #8
 8006e72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006e76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e3      	bne.n	8006e52 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ea8:	f023 0310 	bic.w	r3, r3, #16
 8006eac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006eba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ebc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ec0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ec8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e4      	bne.n	8006e98 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fc ffd8 	bl	8003e88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fc f956 	bl	80031a4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006ef8:	e0d5      	b.n	80070a6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006f00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f04:	429a      	cmp	r2, r3
 8006f06:	f040 80ce 	bne.w	80070a6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	2b20      	cmp	r3, #32
 8006f18:	f040 80c5 	bne.w	80070a6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7fc f93a 	bl	80031a4 <HAL_UARTEx_RxEventCallback>
      return;
 8006f30:	e0b9      	b.n	80070a6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 80ab 	beq.w	80070aa <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006f54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 80a6 	beq.w	80070aa <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f66:	e853 3f00 	ldrex	r3, [r3]
 8006f6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f80:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f88:	e841 2300 	strex	r3, r2, [r1]
 8006f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1e4      	bne.n	8006f5e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3308      	adds	r3, #8
 8006f9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	623b      	str	r3, [r7, #32]
   return(result);
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	f023 0301 	bic.w	r3, r3, #1
 8006faa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3308      	adds	r3, #8
 8006fb4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006fb8:	633a      	str	r2, [r7, #48]	@ 0x30
 8006fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fc0:	e841 2300 	strex	r3, r2, [r1]
 8006fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1e3      	bne.n	8006f94 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f023 0310 	bic.w	r3, r3, #16
 8006ff4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007002:	61fb      	str	r3, [r7, #28]
 8007004:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007006:	69b9      	ldr	r1, [r7, #24]
 8007008:	69fa      	ldr	r2, [r7, #28]
 800700a:	e841 2300 	strex	r3, r2, [r1]
 800700e:	617b      	str	r3, [r7, #20]
   return(result);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1e4      	bne.n	8006fe0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2202      	movs	r2, #2
 800701a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800701c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007020:	4619      	mov	r1, r3
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7fc f8be 	bl	80031a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007028:	e03f      	b.n	80070aa <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800702a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800702e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00e      	beq.n	8007054 <HAL_UART_IRQHandler+0x5a8>
 8007036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800703a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d008      	beq.n	8007054 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800704a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fe9d 	bl	8007d8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007052:	e02d      	b.n	80070b0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00e      	beq.n	800707e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007068:	2b00      	cmp	r3, #0
 800706a:	d008      	beq.n	800707e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01c      	beq.n	80070ae <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	4798      	blx	r3
    }
    return;
 800707c:	e017      	b.n	80070ae <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800707e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007086:	2b00      	cmp	r3, #0
 8007088:	d012      	beq.n	80070b0 <HAL_UART_IRQHandler+0x604>
 800708a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800708e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00c      	beq.n	80070b0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fe4e 	bl	8007d38 <UART_EndTransmit_IT>
    return;
 800709c:	e008      	b.n	80070b0 <HAL_UART_IRQHandler+0x604>
      return;
 800709e:	bf00      	nop
 80070a0:	e006      	b.n	80070b0 <HAL_UART_IRQHandler+0x604>
    return;
 80070a2:	bf00      	nop
 80070a4:	e004      	b.n	80070b0 <HAL_UART_IRQHandler+0x604>
      return;
 80070a6:	bf00      	nop
 80070a8:	e002      	b.n	80070b0 <HAL_UART_IRQHandler+0x604>
      return;
 80070aa:	bf00      	nop
 80070ac:	e000      	b.n	80070b0 <HAL_UART_IRQHandler+0x604>
    return;
 80070ae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80070b0:	37e8      	adds	r7, #232	@ 0xe8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop

080070b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800710c:	b08a      	sub	sp, #40	@ 0x28
 800710e:	af00      	add	r7, sp, #0
 8007110:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	689a      	ldr	r2, [r3, #8]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	431a      	orrs	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	431a      	orrs	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	4313      	orrs	r3, r2
 800712e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	4bb4      	ldr	r3, [pc, #720]	@ (8007408 <UART_SetConfig+0x300>)
 8007138:	4013      	ands	r3, r2
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	6812      	ldr	r2, [r2, #0]
 800713e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007140:	430b      	orrs	r3, r1
 8007142:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	68da      	ldr	r2, [r3, #12]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	430a      	orrs	r2, r1
 8007158:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4aa9      	ldr	r2, [pc, #676]	@ (800740c <UART_SetConfig+0x304>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d004      	beq.n	8007174 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007170:	4313      	orrs	r3, r2
 8007172:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007184:	430a      	orrs	r2, r1
 8007186:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4aa0      	ldr	r2, [pc, #640]	@ (8007410 <UART_SetConfig+0x308>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d126      	bne.n	80071e0 <UART_SetConfig+0xd8>
 8007192:	4ba0      	ldr	r3, [pc, #640]	@ (8007414 <UART_SetConfig+0x30c>)
 8007194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007198:	f003 0303 	and.w	r3, r3, #3
 800719c:	2b03      	cmp	r3, #3
 800719e:	d81b      	bhi.n	80071d8 <UART_SetConfig+0xd0>
 80071a0:	a201      	add	r2, pc, #4	@ (adr r2, 80071a8 <UART_SetConfig+0xa0>)
 80071a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a6:	bf00      	nop
 80071a8:	080071b9 	.word	0x080071b9
 80071ac:	080071c9 	.word	0x080071c9
 80071b0:	080071c1 	.word	0x080071c1
 80071b4:	080071d1 	.word	0x080071d1
 80071b8:	2301      	movs	r3, #1
 80071ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071be:	e080      	b.n	80072c2 <UART_SetConfig+0x1ba>
 80071c0:	2302      	movs	r3, #2
 80071c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071c6:	e07c      	b.n	80072c2 <UART_SetConfig+0x1ba>
 80071c8:	2304      	movs	r3, #4
 80071ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ce:	e078      	b.n	80072c2 <UART_SetConfig+0x1ba>
 80071d0:	2308      	movs	r3, #8
 80071d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071d6:	e074      	b.n	80072c2 <UART_SetConfig+0x1ba>
 80071d8:	2310      	movs	r3, #16
 80071da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071de:	e070      	b.n	80072c2 <UART_SetConfig+0x1ba>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a8c      	ldr	r2, [pc, #560]	@ (8007418 <UART_SetConfig+0x310>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d138      	bne.n	800725c <UART_SetConfig+0x154>
 80071ea:	4b8a      	ldr	r3, [pc, #552]	@ (8007414 <UART_SetConfig+0x30c>)
 80071ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071f0:	f003 030c 	and.w	r3, r3, #12
 80071f4:	2b0c      	cmp	r3, #12
 80071f6:	d82d      	bhi.n	8007254 <UART_SetConfig+0x14c>
 80071f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007200 <UART_SetConfig+0xf8>)
 80071fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fe:	bf00      	nop
 8007200:	08007235 	.word	0x08007235
 8007204:	08007255 	.word	0x08007255
 8007208:	08007255 	.word	0x08007255
 800720c:	08007255 	.word	0x08007255
 8007210:	08007245 	.word	0x08007245
 8007214:	08007255 	.word	0x08007255
 8007218:	08007255 	.word	0x08007255
 800721c:	08007255 	.word	0x08007255
 8007220:	0800723d 	.word	0x0800723d
 8007224:	08007255 	.word	0x08007255
 8007228:	08007255 	.word	0x08007255
 800722c:	08007255 	.word	0x08007255
 8007230:	0800724d 	.word	0x0800724d
 8007234:	2300      	movs	r3, #0
 8007236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800723a:	e042      	b.n	80072c2 <UART_SetConfig+0x1ba>
 800723c:	2302      	movs	r3, #2
 800723e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007242:	e03e      	b.n	80072c2 <UART_SetConfig+0x1ba>
 8007244:	2304      	movs	r3, #4
 8007246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800724a:	e03a      	b.n	80072c2 <UART_SetConfig+0x1ba>
 800724c:	2308      	movs	r3, #8
 800724e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007252:	e036      	b.n	80072c2 <UART_SetConfig+0x1ba>
 8007254:	2310      	movs	r3, #16
 8007256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800725a:	e032      	b.n	80072c2 <UART_SetConfig+0x1ba>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a6a      	ldr	r2, [pc, #424]	@ (800740c <UART_SetConfig+0x304>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d12a      	bne.n	80072bc <UART_SetConfig+0x1b4>
 8007266:	4b6b      	ldr	r3, [pc, #428]	@ (8007414 <UART_SetConfig+0x30c>)
 8007268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800726c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007270:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007274:	d01a      	beq.n	80072ac <UART_SetConfig+0x1a4>
 8007276:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800727a:	d81b      	bhi.n	80072b4 <UART_SetConfig+0x1ac>
 800727c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007280:	d00c      	beq.n	800729c <UART_SetConfig+0x194>
 8007282:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007286:	d815      	bhi.n	80072b4 <UART_SetConfig+0x1ac>
 8007288:	2b00      	cmp	r3, #0
 800728a:	d003      	beq.n	8007294 <UART_SetConfig+0x18c>
 800728c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007290:	d008      	beq.n	80072a4 <UART_SetConfig+0x19c>
 8007292:	e00f      	b.n	80072b4 <UART_SetConfig+0x1ac>
 8007294:	2300      	movs	r3, #0
 8007296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800729a:	e012      	b.n	80072c2 <UART_SetConfig+0x1ba>
 800729c:	2302      	movs	r3, #2
 800729e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072a2:	e00e      	b.n	80072c2 <UART_SetConfig+0x1ba>
 80072a4:	2304      	movs	r3, #4
 80072a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072aa:	e00a      	b.n	80072c2 <UART_SetConfig+0x1ba>
 80072ac:	2308      	movs	r3, #8
 80072ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072b2:	e006      	b.n	80072c2 <UART_SetConfig+0x1ba>
 80072b4:	2310      	movs	r3, #16
 80072b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072ba:	e002      	b.n	80072c2 <UART_SetConfig+0x1ba>
 80072bc:	2310      	movs	r3, #16
 80072be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a51      	ldr	r2, [pc, #324]	@ (800740c <UART_SetConfig+0x304>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d17a      	bne.n	80073c2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80072d0:	2b08      	cmp	r3, #8
 80072d2:	d824      	bhi.n	800731e <UART_SetConfig+0x216>
 80072d4:	a201      	add	r2, pc, #4	@ (adr r2, 80072dc <UART_SetConfig+0x1d4>)
 80072d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072da:	bf00      	nop
 80072dc:	08007301 	.word	0x08007301
 80072e0:	0800731f 	.word	0x0800731f
 80072e4:	08007309 	.word	0x08007309
 80072e8:	0800731f 	.word	0x0800731f
 80072ec:	0800730f 	.word	0x0800730f
 80072f0:	0800731f 	.word	0x0800731f
 80072f4:	0800731f 	.word	0x0800731f
 80072f8:	0800731f 	.word	0x0800731f
 80072fc:	08007317 	.word	0x08007317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007300:	f7fe ff88 	bl	8006214 <HAL_RCC_GetPCLK1Freq>
 8007304:	61f8      	str	r0, [r7, #28]
        break;
 8007306:	e010      	b.n	800732a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007308:	4b44      	ldr	r3, [pc, #272]	@ (800741c <UART_SetConfig+0x314>)
 800730a:	61fb      	str	r3, [r7, #28]
        break;
 800730c:	e00d      	b.n	800732a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800730e:	f7fe fee9 	bl	80060e4 <HAL_RCC_GetSysClockFreq>
 8007312:	61f8      	str	r0, [r7, #28]
        break;
 8007314:	e009      	b.n	800732a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800731a:	61fb      	str	r3, [r7, #28]
        break;
 800731c:	e005      	b.n	800732a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007328:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 8107 	beq.w	8007540 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	4613      	mov	r3, r2
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	4413      	add	r3, r2
 800733c:	69fa      	ldr	r2, [r7, #28]
 800733e:	429a      	cmp	r2, r3
 8007340:	d305      	bcc.n	800734e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007348:	69fa      	ldr	r2, [r7, #28]
 800734a:	429a      	cmp	r2, r3
 800734c:	d903      	bls.n	8007356 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007354:	e0f4      	b.n	8007540 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	2200      	movs	r2, #0
 800735a:	461c      	mov	r4, r3
 800735c:	4615      	mov	r5, r2
 800735e:	f04f 0200 	mov.w	r2, #0
 8007362:	f04f 0300 	mov.w	r3, #0
 8007366:	022b      	lsls	r3, r5, #8
 8007368:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800736c:	0222      	lsls	r2, r4, #8
 800736e:	68f9      	ldr	r1, [r7, #12]
 8007370:	6849      	ldr	r1, [r1, #4]
 8007372:	0849      	lsrs	r1, r1, #1
 8007374:	2000      	movs	r0, #0
 8007376:	4688      	mov	r8, r1
 8007378:	4681      	mov	r9, r0
 800737a:	eb12 0a08 	adds.w	sl, r2, r8
 800737e:	eb43 0b09 	adc.w	fp, r3, r9
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	603b      	str	r3, [r7, #0]
 800738a:	607a      	str	r2, [r7, #4]
 800738c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007390:	4650      	mov	r0, sl
 8007392:	4659      	mov	r1, fp
 8007394:	f7f8 ffbc 	bl	8000310 <__aeabi_uldivmod>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4613      	mov	r3, r2
 800739e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073a6:	d308      	bcc.n	80073ba <UART_SetConfig+0x2b2>
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073ae:	d204      	bcs.n	80073ba <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	60da      	str	r2, [r3, #12]
 80073b8:	e0c2      	b.n	8007540 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80073c0:	e0be      	b.n	8007540 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073ca:	d16a      	bne.n	80074a2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80073cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	d834      	bhi.n	800743e <UART_SetConfig+0x336>
 80073d4:	a201      	add	r2, pc, #4	@ (adr r2, 80073dc <UART_SetConfig+0x2d4>)
 80073d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073da:	bf00      	nop
 80073dc:	08007401 	.word	0x08007401
 80073e0:	08007421 	.word	0x08007421
 80073e4:	08007429 	.word	0x08007429
 80073e8:	0800743f 	.word	0x0800743f
 80073ec:	0800742f 	.word	0x0800742f
 80073f0:	0800743f 	.word	0x0800743f
 80073f4:	0800743f 	.word	0x0800743f
 80073f8:	0800743f 	.word	0x0800743f
 80073fc:	08007437 	.word	0x08007437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007400:	f7fe ff08 	bl	8006214 <HAL_RCC_GetPCLK1Freq>
 8007404:	61f8      	str	r0, [r7, #28]
        break;
 8007406:	e020      	b.n	800744a <UART_SetConfig+0x342>
 8007408:	efff69f3 	.word	0xefff69f3
 800740c:	40008000 	.word	0x40008000
 8007410:	40013800 	.word	0x40013800
 8007414:	40021000 	.word	0x40021000
 8007418:	40004400 	.word	0x40004400
 800741c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007420:	f7fe ff0e 	bl	8006240 <HAL_RCC_GetPCLK2Freq>
 8007424:	61f8      	str	r0, [r7, #28]
        break;
 8007426:	e010      	b.n	800744a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007428:	4b4c      	ldr	r3, [pc, #304]	@ (800755c <UART_SetConfig+0x454>)
 800742a:	61fb      	str	r3, [r7, #28]
        break;
 800742c:	e00d      	b.n	800744a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800742e:	f7fe fe59 	bl	80060e4 <HAL_RCC_GetSysClockFreq>
 8007432:	61f8      	str	r0, [r7, #28]
        break;
 8007434:	e009      	b.n	800744a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800743a:	61fb      	str	r3, [r7, #28]
        break;
 800743c:	e005      	b.n	800744a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007448:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d077      	beq.n	8007540 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	005a      	lsls	r2, r3, #1
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	085b      	lsrs	r3, r3, #1
 800745a:	441a      	add	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	fbb2 f3f3 	udiv	r3, r2, r3
 8007464:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	2b0f      	cmp	r3, #15
 800746a:	d916      	bls.n	800749a <UART_SetConfig+0x392>
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007472:	d212      	bcs.n	800749a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	b29b      	uxth	r3, r3
 8007478:	f023 030f 	bic.w	r3, r3, #15
 800747c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	085b      	lsrs	r3, r3, #1
 8007482:	b29b      	uxth	r3, r3
 8007484:	f003 0307 	and.w	r3, r3, #7
 8007488:	b29a      	uxth	r2, r3
 800748a:	8afb      	ldrh	r3, [r7, #22]
 800748c:	4313      	orrs	r3, r2
 800748e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	8afa      	ldrh	r2, [r7, #22]
 8007496:	60da      	str	r2, [r3, #12]
 8007498:	e052      	b.n	8007540 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80074a0:	e04e      	b.n	8007540 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80074a6:	2b08      	cmp	r3, #8
 80074a8:	d827      	bhi.n	80074fa <UART_SetConfig+0x3f2>
 80074aa:	a201      	add	r2, pc, #4	@ (adr r2, 80074b0 <UART_SetConfig+0x3a8>)
 80074ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b0:	080074d5 	.word	0x080074d5
 80074b4:	080074dd 	.word	0x080074dd
 80074b8:	080074e5 	.word	0x080074e5
 80074bc:	080074fb 	.word	0x080074fb
 80074c0:	080074eb 	.word	0x080074eb
 80074c4:	080074fb 	.word	0x080074fb
 80074c8:	080074fb 	.word	0x080074fb
 80074cc:	080074fb 	.word	0x080074fb
 80074d0:	080074f3 	.word	0x080074f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074d4:	f7fe fe9e 	bl	8006214 <HAL_RCC_GetPCLK1Freq>
 80074d8:	61f8      	str	r0, [r7, #28]
        break;
 80074da:	e014      	b.n	8007506 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074dc:	f7fe feb0 	bl	8006240 <HAL_RCC_GetPCLK2Freq>
 80074e0:	61f8      	str	r0, [r7, #28]
        break;
 80074e2:	e010      	b.n	8007506 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074e4:	4b1d      	ldr	r3, [pc, #116]	@ (800755c <UART_SetConfig+0x454>)
 80074e6:	61fb      	str	r3, [r7, #28]
        break;
 80074e8:	e00d      	b.n	8007506 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074ea:	f7fe fdfb 	bl	80060e4 <HAL_RCC_GetSysClockFreq>
 80074ee:	61f8      	str	r0, [r7, #28]
        break;
 80074f0:	e009      	b.n	8007506 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074f6:	61fb      	str	r3, [r7, #28]
        break;
 80074f8:	e005      	b.n	8007506 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80074fa:	2300      	movs	r3, #0
 80074fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007504:	bf00      	nop
    }

    if (pclk != 0U)
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d019      	beq.n	8007540 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	085a      	lsrs	r2, r3, #1
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	441a      	add	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	fbb2 f3f3 	udiv	r3, r2, r3
 800751e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	2b0f      	cmp	r3, #15
 8007524:	d909      	bls.n	800753a <UART_SetConfig+0x432>
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800752c:	d205      	bcs.n	800753a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	b29a      	uxth	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	60da      	str	r2, [r3, #12]
 8007538:	e002      	b.n	8007540 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800754c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007550:	4618      	mov	r0, r3
 8007552:	3728      	adds	r7, #40	@ 0x28
 8007554:	46bd      	mov	sp, r7
 8007556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800755a:	bf00      	nop
 800755c:	00f42400 	.word	0x00f42400

08007560 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800756c:	f003 0308 	and.w	r3, r3, #8
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00a      	beq.n	800758a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00a      	beq.n	80075ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00a      	beq.n	80075ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d2:	f003 0304 	and.w	r3, r3, #4
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	430a      	orrs	r2, r1
 80075ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f4:	f003 0310 	and.w	r3, r3, #16
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00a      	beq.n	8007612 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800763c:	2b00      	cmp	r3, #0
 800763e:	d01a      	beq.n	8007676 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	430a      	orrs	r2, r1
 8007654:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800765a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800765e:	d10a      	bne.n	8007676 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800767a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00a      	beq.n	8007698 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	605a      	str	r2, [r3, #4]
  }
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b098      	sub	sp, #96	@ 0x60
 80076a8:	af02      	add	r7, sp, #8
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076b4:	f7fb ffc2 	bl	800363c <HAL_GetTick>
 80076b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0308 	and.w	r3, r3, #8
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d12e      	bne.n	8007726 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076d0:	2200      	movs	r2, #0
 80076d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f88c 	bl	80077f4 <UART_WaitOnFlagUntilTimeout>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d021      	beq.n	8007726 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ea:	e853 3f00 	ldrex	r3, [r3]
 80076ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	461a      	mov	r2, r3
 80076fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007700:	647b      	str	r3, [r7, #68]	@ 0x44
 8007702:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007704:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007706:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007708:	e841 2300 	strex	r3, r2, [r1]
 800770c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800770e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1e6      	bne.n	80076e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2220      	movs	r2, #32
 8007718:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e062      	b.n	80077ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0304 	and.w	r3, r3, #4
 8007730:	2b04      	cmp	r3, #4
 8007732:	d149      	bne.n	80077c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007734:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800773c:	2200      	movs	r2, #0
 800773e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f856 	bl	80077f4 <UART_WaitOnFlagUntilTimeout>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d03c      	beq.n	80077c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007756:	e853 3f00 	ldrex	r3, [r3]
 800775a:	623b      	str	r3, [r7, #32]
   return(result);
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007762:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	461a      	mov	r2, r3
 800776a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800776c:	633b      	str	r3, [r7, #48]	@ 0x30
 800776e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007770:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007774:	e841 2300 	strex	r3, r2, [r1]
 8007778:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800777a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1e6      	bne.n	800774e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3308      	adds	r3, #8
 8007786:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	e853 3f00 	ldrex	r3, [r3]
 800778e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 0301 	bic.w	r3, r3, #1
 8007796:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	3308      	adds	r3, #8
 800779e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077a0:	61fa      	str	r2, [r7, #28]
 80077a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a4:	69b9      	ldr	r1, [r7, #24]
 80077a6:	69fa      	ldr	r2, [r7, #28]
 80077a8:	e841 2300 	strex	r3, r2, [r1]
 80077ac:	617b      	str	r3, [r7, #20]
   return(result);
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1e5      	bne.n	8007780 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2220      	movs	r2, #32
 80077b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e011      	b.n	80077ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2220      	movs	r2, #32
 80077cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2220      	movs	r2, #32
 80077d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3758      	adds	r7, #88	@ 0x58
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	4613      	mov	r3, r2
 8007802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007804:	e04f      	b.n	80078a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800780c:	d04b      	beq.n	80078a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800780e:	f7fb ff15 	bl	800363c <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	429a      	cmp	r2, r3
 800781c:	d302      	bcc.n	8007824 <UART_WaitOnFlagUntilTimeout+0x30>
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e04e      	b.n	80078c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0304 	and.w	r3, r3, #4
 8007832:	2b00      	cmp	r3, #0
 8007834:	d037      	beq.n	80078a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2b80      	cmp	r3, #128	@ 0x80
 800783a:	d034      	beq.n	80078a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2b40      	cmp	r3, #64	@ 0x40
 8007840:	d031      	beq.n	80078a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	f003 0308 	and.w	r3, r3, #8
 800784c:	2b08      	cmp	r3, #8
 800784e:	d110      	bne.n	8007872 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2208      	movs	r2, #8
 8007856:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 f8ff 	bl	8007a5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2208      	movs	r2, #8
 8007862:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e029      	b.n	80078c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	69db      	ldr	r3, [r3, #28]
 8007878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800787c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007880:	d111      	bne.n	80078a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800788a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 f8e5 	bl	8007a5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2220      	movs	r2, #32
 8007896:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e00f      	b.n	80078c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	69da      	ldr	r2, [r3, #28]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	4013      	ands	r3, r2
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	bf0c      	ite	eq
 80078b6:	2301      	moveq	r3, #1
 80078b8:	2300      	movne	r3, #0
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	461a      	mov	r2, r3
 80078be:	79fb      	ldrb	r3, [r7, #7]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d0a0      	beq.n	8007806 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
	...

080078d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b096      	sub	sp, #88	@ 0x58
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	4613      	mov	r3, r2
 80078dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	88fa      	ldrh	r2, [r7, #6]
 80078e8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2222      	movs	r2, #34	@ 0x22
 80078f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007900:	2b00      	cmp	r3, #0
 8007902:	d028      	beq.n	8007956 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007908:	4a3e      	ldr	r2, [pc, #248]	@ (8007a04 <UART_Start_Receive_DMA+0x134>)
 800790a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007910:	4a3d      	ldr	r2, [pc, #244]	@ (8007a08 <UART_Start_Receive_DMA+0x138>)
 8007912:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007918:	4a3c      	ldr	r2, [pc, #240]	@ (8007a0c <UART_Start_Receive_DMA+0x13c>)
 800791a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007920:	2200      	movs	r2, #0
 8007922:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	3324      	adds	r3, #36	@ 0x24
 800792e:	4619      	mov	r1, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007934:	461a      	mov	r2, r3
 8007936:	88fb      	ldrh	r3, [r7, #6]
 8007938:	f7fc fa46 	bl	8003dc8 <HAL_DMA_Start_IT>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d009      	beq.n	8007956 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2210      	movs	r2, #16
 8007946:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2220      	movs	r2, #32
 800794e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e051      	b.n	80079fa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d018      	beq.n	8007990 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007966:	e853 3f00 	ldrex	r3, [r3]
 800796a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800796c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007972:	657b      	str	r3, [r7, #84]	@ 0x54
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	461a      	mov	r2, r3
 800797a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800797c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800797e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007980:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007982:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007984:	e841 2300 	strex	r3, r2, [r1]
 8007988:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800798a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1e6      	bne.n	800795e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3308      	adds	r3, #8
 8007996:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799a:	e853 3f00 	ldrex	r3, [r3]
 800799e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a2:	f043 0301 	orr.w	r3, r3, #1
 80079a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3308      	adds	r3, #8
 80079ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80079b0:	637a      	str	r2, [r7, #52]	@ 0x34
 80079b2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80079b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079b8:	e841 2300 	strex	r3, r2, [r1]
 80079bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80079be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e5      	bne.n	8007990 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3308      	adds	r3, #8
 80079ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	e853 3f00 	ldrex	r3, [r3]
 80079d2:	613b      	str	r3, [r7, #16]
   return(result);
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3308      	adds	r3, #8
 80079e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80079e4:	623a      	str	r2, [r7, #32]
 80079e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e8:	69f9      	ldr	r1, [r7, #28]
 80079ea:	6a3a      	ldr	r2, [r7, #32]
 80079ec:	e841 2300 	strex	r3, r2, [r1]
 80079f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1e5      	bne.n	80079c4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3758      	adds	r7, #88	@ 0x58
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	08007b25 	.word	0x08007b25
 8007a08:	08007c51 	.word	0x08007c51
 8007a0c:	08007c8f 	.word	0x08007c8f

08007a10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b089      	sub	sp, #36	@ 0x24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007a2c:	61fb      	str	r3, [r7, #28]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	61bb      	str	r3, [r7, #24]
 8007a38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	6979      	ldr	r1, [r7, #20]
 8007a3c:	69ba      	ldr	r2, [r7, #24]
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	613b      	str	r3, [r7, #16]
   return(result);
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e6      	bne.n	8007a18 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007a50:	bf00      	nop
 8007a52:	3724      	adds	r7, #36	@ 0x24
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b095      	sub	sp, #84	@ 0x54
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a82:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a84:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a8a:	e841 2300 	strex	r3, r2, [r1]
 8007a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1e6      	bne.n	8007a64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	3308      	adds	r3, #8
 8007a9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9e:	6a3b      	ldr	r3, [r7, #32]
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	f023 0301 	bic.w	r3, r3, #1
 8007aac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	3308      	adds	r3, #8
 8007ab4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ab6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007abc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e5      	bne.n	8007a96 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d118      	bne.n	8007b04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	e853 3f00 	ldrex	r3, [r3]
 8007ade:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	f023 0310 	bic.w	r3, r3, #16
 8007ae6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	461a      	mov	r2, r3
 8007aee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007af0:	61bb      	str	r3, [r7, #24]
 8007af2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	6979      	ldr	r1, [r7, #20]
 8007af6:	69ba      	ldr	r2, [r7, #24]
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	613b      	str	r3, [r7, #16]
   return(result);
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e6      	bne.n	8007ad2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2220      	movs	r2, #32
 8007b08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007b18:	bf00      	nop
 8007b1a:	3754      	adds	r7, #84	@ 0x54
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b09c      	sub	sp, #112	@ 0x70
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b30:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0320 	and.w	r3, r3, #32
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d171      	bne.n	8007c24 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007b40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b42:	2200      	movs	r2, #0
 8007b44:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	461a      	mov	r2, r3
 8007b64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b68:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b6e:	e841 2300 	strex	r3, r2, [r1]
 8007b72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1e6      	bne.n	8007b48 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3308      	adds	r3, #8
 8007b80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b8c:	f023 0301 	bic.w	r3, r3, #1
 8007b90:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3308      	adds	r3, #8
 8007b98:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007b9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007b9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ba0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1e5      	bne.n	8007b7a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	623b      	str	r3, [r7, #32]
   return(result);
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007bc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3308      	adds	r3, #8
 8007bcc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007bce:	633a      	str	r2, [r7, #48]	@ 0x30
 8007bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bd6:	e841 2300 	strex	r3, r2, [r1]
 8007bda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1e5      	bne.n	8007bae <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007be2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007be4:	2220      	movs	r2, #32
 8007be6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d118      	bne.n	8007c24 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	e853 3f00 	ldrex	r3, [r3]
 8007bfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f023 0310 	bic.w	r3, r3, #16
 8007c06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c10:	61fb      	str	r3, [r7, #28]
 8007c12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c14:	69b9      	ldr	r1, [r7, #24]
 8007c16:	69fa      	ldr	r2, [r7, #28]
 8007c18:	e841 2300 	strex	r3, r2, [r1]
 8007c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e6      	bne.n	8007bf2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c26:	2200      	movs	r2, #0
 8007c28:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d107      	bne.n	8007c42 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007c38:	4619      	mov	r1, r3
 8007c3a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007c3c:	f7fb fab2 	bl	80031a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c40:	e002      	b.n	8007c48 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007c42:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007c44:	f7ff fa42 	bl	80070cc <HAL_UART_RxCpltCallback>
}
 8007c48:	bf00      	nop
 8007c4a:	3770      	adds	r7, #112	@ 0x70
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c5c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2201      	movs	r2, #1
 8007c62:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d109      	bne.n	8007c80 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007c72:	085b      	lsrs	r3, r3, #1
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	4619      	mov	r1, r3
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f7fb fa93 	bl	80031a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c7e:	e002      	b.n	8007c86 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f7ff fa2d 	bl	80070e0 <HAL_UART_RxHalfCpltCallback>
}
 8007c86:	bf00      	nop
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b086      	sub	sp, #24
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c9a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ca0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ca8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cb4:	2b80      	cmp	r3, #128	@ 0x80
 8007cb6:	d109      	bne.n	8007ccc <UART_DMAError+0x3e>
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	2b21      	cmp	r3, #33	@ 0x21
 8007cbc:	d106      	bne.n	8007ccc <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8007cc6:	6978      	ldr	r0, [r7, #20]
 8007cc8:	f7ff fea2 	bl	8007a10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cd6:	2b40      	cmp	r3, #64	@ 0x40
 8007cd8:	d109      	bne.n	8007cee <UART_DMAError+0x60>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2b22      	cmp	r3, #34	@ 0x22
 8007cde:	d106      	bne.n	8007cee <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8007ce8:	6978      	ldr	r0, [r7, #20]
 8007cea:	f7ff feb7 	bl	8007a5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cf4:	f043 0210 	orr.w	r2, r3, #16
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cfe:	6978      	ldr	r0, [r7, #20]
 8007d00:	f7ff f9f8 	bl	80070f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d04:	bf00      	nop
 8007d06:	3718      	adds	r7, #24
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f7ff f9e2 	bl	80070f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d30:	bf00      	nop
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b088      	sub	sp, #32
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	e853 3f00 	ldrex	r3, [r3]
 8007d4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d54:	61fb      	str	r3, [r7, #28]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	61bb      	str	r3, [r7, #24]
 8007d60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d62:	6979      	ldr	r1, [r7, #20]
 8007d64:	69ba      	ldr	r2, [r7, #24]
 8007d66:	e841 2300 	strex	r3, r2, [r1]
 8007d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1e6      	bne.n	8007d40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2220      	movs	r2, #32
 8007d76:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7ff f99a 	bl	80070b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d84:	bf00      	nop
 8007d86:	3720      	adds	r7, #32
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b08c      	sub	sp, #48	@ 0x30
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	4613      	mov	r3, r2
 8007dac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007db4:	2b20      	cmp	r3, #32
 8007db6:	d142      	bne.n	8007e3e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8007dbe:	88fb      	ldrh	r3, [r7, #6]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e03b      	b.n	8007e40 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007dd4:	88fb      	ldrh	r3, [r7, #6]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	68b9      	ldr	r1, [r7, #8]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f7ff fd78 	bl	80078d0 <UART_Start_Receive_DMA>
 8007de0:	4603      	mov	r3, r0
 8007de2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007de6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d124      	bne.n	8007e38 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d11d      	bne.n	8007e32 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2210      	movs	r2, #16
 8007dfc:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	e853 3f00 	ldrex	r3, [r3]
 8007e0a:	617b      	str	r3, [r7, #20]
   return(result);
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	f043 0310 	orr.w	r3, r3, #16
 8007e12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e1e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e20:	6a39      	ldr	r1, [r7, #32]
 8007e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e24:	e841 2300 	strex	r3, r2, [r1]
 8007e28:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1e6      	bne.n	8007dfe <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8007e30:	e002      	b.n	8007e38 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007e38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e3c:	e000      	b.n	8007e40 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007e3e:	2302      	movs	r3, #2
  }
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3730      	adds	r7, #48	@ 0x30
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	4603      	mov	r3, r0
 8007e50:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e5a:	2b84      	cmp	r3, #132	@ 0x84
 8007e5c:	d005      	beq.n	8007e6a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007e5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	4413      	add	r3, r2
 8007e66:	3303      	adds	r3, #3
 8007e68:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007e7c:	f000 fafc 	bl	8008478 <vTaskStartScheduler>
  
  return osOK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007e86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e88:	b089      	sub	sp, #36	@ 0x24
 8007e8a:	af04      	add	r7, sp, #16
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d020      	beq.n	8007eda <osThreadCreate+0x54>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d01c      	beq.n	8007eda <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685c      	ldr	r4, [r3, #4]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	691e      	ldr	r6, [r3, #16]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7ff ffc8 	bl	8007e48 <makeFreeRtosPriority>
 8007eb8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ec2:	9202      	str	r2, [sp, #8]
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	9100      	str	r1, [sp, #0]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	4632      	mov	r2, r6
 8007ecc:	4629      	mov	r1, r5
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f000 f8ed 	bl	80080ae <xTaskCreateStatic>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	60fb      	str	r3, [r7, #12]
 8007ed8:	e01c      	b.n	8007f14 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685c      	ldr	r4, [r3, #4]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ee6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7ff ffaa 	bl	8007e48 <makeFreeRtosPriority>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	f107 030c 	add.w	r3, r7, #12
 8007efa:	9301      	str	r3, [sp, #4]
 8007efc:	9200      	str	r2, [sp, #0]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	4632      	mov	r2, r6
 8007f02:	4629      	mov	r1, r5
 8007f04:	4620      	mov	r0, r4
 8007f06:	f000 f932 	bl	800816e <xTaskCreate>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d001      	beq.n	8007f14 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007f10:	2300      	movs	r3, #0
 8007f12:	e000      	b.n	8007f16 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007f14:	68fb      	ldr	r3, [r7, #12]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f1e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b084      	sub	sp, #16
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <osDelay+0x16>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	e000      	b.n	8007f36 <osDelay+0x18>
 8007f34:	2301      	movs	r3, #1
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 fa68 	bl	800840c <vTaskDelay>
  
  return osOK;
 8007f3c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f46:	b480      	push	{r7}
 8007f48:	b083      	sub	sp, #12
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f103 0208 	add.w	r2, r3, #8
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f5e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f103 0208 	add.w	r2, r3, #8
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f103 0208 	add.w	r2, r3, #8
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f7a:	bf00      	nop
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f86:	b480      	push	{r7}
 8007f88:	b083      	sub	sp, #12
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	689a      	ldr	r2, [r3, #8]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	601a      	str	r2, [r3, #0]
}
 8007fdc:	bf00      	nop
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ffe:	d103      	bne.n	8008008 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	60fb      	str	r3, [r7, #12]
 8008006:	e00c      	b.n	8008022 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	3308      	adds	r3, #8
 800800c:	60fb      	str	r3, [r7, #12]
 800800e:	e002      	b.n	8008016 <vListInsert+0x2e>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	60fb      	str	r3, [r7, #12]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	429a      	cmp	r2, r3
 8008020:	d2f6      	bcs.n	8008010 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	601a      	str	r2, [r3, #0]
}
 800804e:	bf00      	nop
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800805a:	b480      	push	{r7}
 800805c:	b085      	sub	sp, #20
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	6892      	ldr	r2, [r2, #8]
 8008070:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	6852      	ldr	r2, [r2, #4]
 800807a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	429a      	cmp	r2, r3
 8008084:	d103      	bne.n	800808e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689a      	ldr	r2, [r3, #8]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	1e5a      	subs	r2, r3, #1
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr

080080ae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b08e      	sub	sp, #56	@ 0x38
 80080b2:	af04      	add	r7, sp, #16
 80080b4:	60f8      	str	r0, [r7, #12]
 80080b6:	60b9      	str	r1, [r7, #8]
 80080b8:	607a      	str	r2, [r7, #4]
 80080ba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10b      	bne.n	80080da <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop
 80080d8:	e7fd      	b.n	80080d6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80080da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10b      	bne.n	80080f8 <xTaskCreateStatic+0x4a>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	61fb      	str	r3, [r7, #28]
}
 80080f2:	bf00      	nop
 80080f4:	bf00      	nop
 80080f6:	e7fd      	b.n	80080f4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80080f8:	23a0      	movs	r3, #160	@ 0xa0
 80080fa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	2ba0      	cmp	r3, #160	@ 0xa0
 8008100:	d00b      	beq.n	800811a <xTaskCreateStatic+0x6c>
	__asm volatile
 8008102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	61bb      	str	r3, [r7, #24]
}
 8008114:	bf00      	nop
 8008116:	bf00      	nop
 8008118:	e7fd      	b.n	8008116 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800811a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800811c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811e:	2b00      	cmp	r3, #0
 8008120:	d01e      	beq.n	8008160 <xTaskCreateStatic+0xb2>
 8008122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008124:	2b00      	cmp	r3, #0
 8008126:	d01b      	beq.n	8008160 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800812a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800812c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008130:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008134:	2202      	movs	r2, #2
 8008136:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800813a:	2300      	movs	r3, #0
 800813c:	9303      	str	r3, [sp, #12]
 800813e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008140:	9302      	str	r3, [sp, #8]
 8008142:	f107 0314 	add.w	r3, r7, #20
 8008146:	9301      	str	r3, [sp, #4]
 8008148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	68b9      	ldr	r1, [r7, #8]
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 f850 	bl	80081f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008158:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800815a:	f000 f8ed 	bl	8008338 <prvAddNewTaskToReadyList>
 800815e:	e001      	b.n	8008164 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008160:	2300      	movs	r3, #0
 8008162:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008164:	697b      	ldr	r3, [r7, #20]
	}
 8008166:	4618      	mov	r0, r3
 8008168:	3728      	adds	r7, #40	@ 0x28
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800816e:	b580      	push	{r7, lr}
 8008170:	b08c      	sub	sp, #48	@ 0x30
 8008172:	af04      	add	r7, sp, #16
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	60b9      	str	r1, [r7, #8]
 8008178:	603b      	str	r3, [r7, #0]
 800817a:	4613      	mov	r3, r2
 800817c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800817e:	88fb      	ldrh	r3, [r7, #6]
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4618      	mov	r0, r3
 8008184:	f000 ff20 	bl	8008fc8 <pvPortMalloc>
 8008188:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00e      	beq.n	80081ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008190:	20a0      	movs	r0, #160	@ 0xa0
 8008192:	f000 ff19 	bl	8008fc8 <pvPortMalloc>
 8008196:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d003      	beq.n	80081a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80081a4:	e005      	b.n	80081b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081a6:	6978      	ldr	r0, [r7, #20]
 80081a8:	f000 ffdc 	bl	8009164 <vPortFree>
 80081ac:	e001      	b.n	80081b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d017      	beq.n	80081e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081c0:	88fa      	ldrh	r2, [r7, #6]
 80081c2:	2300      	movs	r3, #0
 80081c4:	9303      	str	r3, [sp, #12]
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	9302      	str	r3, [sp, #8]
 80081ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	68b9      	ldr	r1, [r7, #8]
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f000 f80e 	bl	80081f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081dc:	69f8      	ldr	r0, [r7, #28]
 80081de:	f000 f8ab 	bl	8008338 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081e2:	2301      	movs	r3, #1
 80081e4:	61bb      	str	r3, [r7, #24]
 80081e6:	e002      	b.n	80081ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081ee:	69bb      	ldr	r3, [r7, #24]
	}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3720      	adds	r7, #32
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b088      	sub	sp, #32
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
 8008204:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008208:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008210:	3b01      	subs	r3, #1
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	f023 0307 	bic.w	r3, r3, #7
 800821e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	f003 0307 	and.w	r3, r3, #7
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00b      	beq.n	8008242 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800822a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	617b      	str	r3, [r7, #20]
}
 800823c:	bf00      	nop
 800823e:	bf00      	nop
 8008240:	e7fd      	b.n	800823e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d01f      	beq.n	8008288 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008248:	2300      	movs	r3, #0
 800824a:	61fb      	str	r3, [r7, #28]
 800824c:	e012      	b.n	8008274 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	4413      	add	r3, r2
 8008254:	7819      	ldrb	r1, [r3, #0]
 8008256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	4413      	add	r3, r2
 800825c:	3334      	adds	r3, #52	@ 0x34
 800825e:	460a      	mov	r2, r1
 8008260:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	4413      	add	r3, r2
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d006      	beq.n	800827c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	3301      	adds	r3, #1
 8008272:	61fb      	str	r3, [r7, #28]
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	2b0f      	cmp	r3, #15
 8008278:	d9e9      	bls.n	800824e <prvInitialiseNewTask+0x56>
 800827a:	e000      	b.n	800827e <prvInitialiseNewTask+0x86>
			{
				break;
 800827c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800827e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008280:	2200      	movs	r2, #0
 8008282:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008286:	e003      	b.n	8008290 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800828a:	2200      	movs	r2, #0
 800828c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008292:	2b06      	cmp	r3, #6
 8008294:	d901      	bls.n	800829a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008296:	2306      	movs	r3, #6
 8008298:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800829a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800829e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80082a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082a4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80082a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a8:	2200      	movs	r2, #0
 80082aa:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ae:	3304      	adds	r3, #4
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7ff fe68 	bl	8007f86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b8:	3318      	adds	r3, #24
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7ff fe63 	bl	8007f86 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c8:	f1c3 0207 	rsb	r2, r3, #7
 80082cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082d4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80082d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d8:	2200      	movs	r2, #0
 80082da:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80082e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e8:	334c      	adds	r3, #76	@ 0x4c
 80082ea:	224c      	movs	r2, #76	@ 0x4c
 80082ec:	2100      	movs	r1, #0
 80082ee:	4618      	mov	r0, r3
 80082f0:	f001 f89e 	bl	8009430 <memset>
 80082f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f6:	4a0d      	ldr	r2, [pc, #52]	@ (800832c <prvInitialiseNewTask+0x134>)
 80082f8:	651a      	str	r2, [r3, #80]	@ 0x50
 80082fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fc:	4a0c      	ldr	r2, [pc, #48]	@ (8008330 <prvInitialiseNewTask+0x138>)
 80082fe:	655a      	str	r2, [r3, #84]	@ 0x54
 8008300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008302:	4a0c      	ldr	r2, [pc, #48]	@ (8008334 <prvInitialiseNewTask+0x13c>)
 8008304:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	68f9      	ldr	r1, [r7, #12]
 800830a:	69b8      	ldr	r0, [r7, #24]
 800830c:	f000 fc48 	bl	8008ba0 <pxPortInitialiseStack>
 8008310:	4602      	mov	r2, r0
 8008312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008314:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008318:	2b00      	cmp	r3, #0
 800831a:	d002      	beq.n	8008322 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800831c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800831e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008320:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008322:	bf00      	nop
 8008324:	3720      	adds	r7, #32
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	20001324 	.word	0x20001324
 8008330:	2000138c 	.word	0x2000138c
 8008334:	200013f4 	.word	0x200013f4

08008338 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008340:	f000 fd62 	bl	8008e08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008344:	4b2a      	ldr	r3, [pc, #168]	@ (80083f0 <prvAddNewTaskToReadyList+0xb8>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3301      	adds	r3, #1
 800834a:	4a29      	ldr	r2, [pc, #164]	@ (80083f0 <prvAddNewTaskToReadyList+0xb8>)
 800834c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800834e:	4b29      	ldr	r3, [pc, #164]	@ (80083f4 <prvAddNewTaskToReadyList+0xbc>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d109      	bne.n	800836a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008356:	4a27      	ldr	r2, [pc, #156]	@ (80083f4 <prvAddNewTaskToReadyList+0xbc>)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800835c:	4b24      	ldr	r3, [pc, #144]	@ (80083f0 <prvAddNewTaskToReadyList+0xb8>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d110      	bne.n	8008386 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008364:	f000 fad4 	bl	8008910 <prvInitialiseTaskLists>
 8008368:	e00d      	b.n	8008386 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800836a:	4b23      	ldr	r3, [pc, #140]	@ (80083f8 <prvAddNewTaskToReadyList+0xc0>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d109      	bne.n	8008386 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008372:	4b20      	ldr	r3, [pc, #128]	@ (80083f4 <prvAddNewTaskToReadyList+0xbc>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800837c:	429a      	cmp	r2, r3
 800837e:	d802      	bhi.n	8008386 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008380:	4a1c      	ldr	r2, [pc, #112]	@ (80083f4 <prvAddNewTaskToReadyList+0xbc>)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008386:	4b1d      	ldr	r3, [pc, #116]	@ (80083fc <prvAddNewTaskToReadyList+0xc4>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3301      	adds	r3, #1
 800838c:	4a1b      	ldr	r2, [pc, #108]	@ (80083fc <prvAddNewTaskToReadyList+0xc4>)
 800838e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008394:	2201      	movs	r2, #1
 8008396:	409a      	lsls	r2, r3
 8008398:	4b19      	ldr	r3, [pc, #100]	@ (8008400 <prvAddNewTaskToReadyList+0xc8>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4313      	orrs	r3, r2
 800839e:	4a18      	ldr	r2, [pc, #96]	@ (8008400 <prvAddNewTaskToReadyList+0xc8>)
 80083a0:	6013      	str	r3, [r2, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083a6:	4613      	mov	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4a15      	ldr	r2, [pc, #84]	@ (8008404 <prvAddNewTaskToReadyList+0xcc>)
 80083b0:	441a      	add	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	3304      	adds	r3, #4
 80083b6:	4619      	mov	r1, r3
 80083b8:	4610      	mov	r0, r2
 80083ba:	f7ff fdf1 	bl	8007fa0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083be:	f000 fd55 	bl	8008e6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80083c2:	4b0d      	ldr	r3, [pc, #52]	@ (80083f8 <prvAddNewTaskToReadyList+0xc0>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00e      	beq.n	80083e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083ca:	4b0a      	ldr	r3, [pc, #40]	@ (80083f4 <prvAddNewTaskToReadyList+0xbc>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d207      	bcs.n	80083e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80083d8:	4b0b      	ldr	r3, [pc, #44]	@ (8008408 <prvAddNewTaskToReadyList+0xd0>)
 80083da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083e8:	bf00      	nop
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	20000718 	.word	0x20000718
 80083f4:	20000618 	.word	0x20000618
 80083f8:	20000724 	.word	0x20000724
 80083fc:	20000734 	.word	0x20000734
 8008400:	20000720 	.word	0x20000720
 8008404:	2000061c 	.word	0x2000061c
 8008408:	e000ed04 	.word	0xe000ed04

0800840c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008414:	2300      	movs	r3, #0
 8008416:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d018      	beq.n	8008450 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800841e:	4b14      	ldr	r3, [pc, #80]	@ (8008470 <vTaskDelay+0x64>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00b      	beq.n	800843e <vTaskDelay+0x32>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	60bb      	str	r3, [r7, #8]
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	e7fd      	b.n	800843a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800843e:	f000 f885 	bl	800854c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008442:	2100      	movs	r1, #0
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fb45 	bl	8008ad4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800844a:	f000 f88d 	bl	8008568 <xTaskResumeAll>
 800844e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d107      	bne.n	8008466 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008456:	4b07      	ldr	r3, [pc, #28]	@ (8008474 <vTaskDelay+0x68>)
 8008458:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008466:	bf00      	nop
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	20000740 	.word	0x20000740
 8008474:	e000ed04 	.word	0xe000ed04

08008478 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b08a      	sub	sp, #40	@ 0x28
 800847c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800847e:	2300      	movs	r3, #0
 8008480:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008482:	2300      	movs	r3, #0
 8008484:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008486:	463a      	mov	r2, r7
 8008488:	1d39      	adds	r1, r7, #4
 800848a:	f107 0308 	add.w	r3, r7, #8
 800848e:	4618      	mov	r0, r3
 8008490:	f7f9 f902 	bl	8001698 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	9202      	str	r2, [sp, #8]
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	2300      	movs	r3, #0
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	2300      	movs	r3, #0
 80084a4:	460a      	mov	r2, r1
 80084a6:	4921      	ldr	r1, [pc, #132]	@ (800852c <vTaskStartScheduler+0xb4>)
 80084a8:	4821      	ldr	r0, [pc, #132]	@ (8008530 <vTaskStartScheduler+0xb8>)
 80084aa:	f7ff fe00 	bl	80080ae <xTaskCreateStatic>
 80084ae:	4603      	mov	r3, r0
 80084b0:	4a20      	ldr	r2, [pc, #128]	@ (8008534 <vTaskStartScheduler+0xbc>)
 80084b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084b4:	4b1f      	ldr	r3, [pc, #124]	@ (8008534 <vTaskStartScheduler+0xbc>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80084bc:	2301      	movs	r3, #1
 80084be:	617b      	str	r3, [r7, #20]
 80084c0:	e001      	b.n	80084c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d11b      	bne.n	8008504 <vTaskStartScheduler+0x8c>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	613b      	str	r3, [r7, #16]
}
 80084de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80084e0:	4b15      	ldr	r3, [pc, #84]	@ (8008538 <vTaskStartScheduler+0xc0>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	334c      	adds	r3, #76	@ 0x4c
 80084e6:	4a15      	ldr	r2, [pc, #84]	@ (800853c <vTaskStartScheduler+0xc4>)
 80084e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80084ea:	4b15      	ldr	r3, [pc, #84]	@ (8008540 <vTaskStartScheduler+0xc8>)
 80084ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80084f2:	4b14      	ldr	r3, [pc, #80]	@ (8008544 <vTaskStartScheduler+0xcc>)
 80084f4:	2201      	movs	r2, #1
 80084f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80084f8:	4b13      	ldr	r3, [pc, #76]	@ (8008548 <vTaskStartScheduler+0xd0>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80084fe:	f000 fbdf 	bl	8008cc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008502:	e00f      	b.n	8008524 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800850a:	d10b      	bne.n	8008524 <vTaskStartScheduler+0xac>
	__asm volatile
 800850c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008510:	f383 8811 	msr	BASEPRI, r3
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	60fb      	str	r3, [r7, #12]
}
 800851e:	bf00      	nop
 8008520:	bf00      	nop
 8008522:	e7fd      	b.n	8008520 <vTaskStartScheduler+0xa8>
}
 8008524:	bf00      	nop
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	0800a094 	.word	0x0800a094
 8008530:	080088e1 	.word	0x080088e1
 8008534:	2000073c 	.word	0x2000073c
 8008538:	20000618 	.word	0x20000618
 800853c:	20000010 	.word	0x20000010
 8008540:	20000738 	.word	0x20000738
 8008544:	20000724 	.word	0x20000724
 8008548:	2000071c 	.word	0x2000071c

0800854c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800854c:	b480      	push	{r7}
 800854e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008550:	4b04      	ldr	r3, [pc, #16]	@ (8008564 <vTaskSuspendAll+0x18>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3301      	adds	r3, #1
 8008556:	4a03      	ldr	r2, [pc, #12]	@ (8008564 <vTaskSuspendAll+0x18>)
 8008558:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800855a:	bf00      	nop
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr
 8008564:	20000740 	.word	0x20000740

08008568 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800856e:	2300      	movs	r3, #0
 8008570:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008572:	2300      	movs	r3, #0
 8008574:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008576:	4b42      	ldr	r3, [pc, #264]	@ (8008680 <xTaskResumeAll+0x118>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10b      	bne.n	8008596 <xTaskResumeAll+0x2e>
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	603b      	str	r3, [r7, #0]
}
 8008590:	bf00      	nop
 8008592:	bf00      	nop
 8008594:	e7fd      	b.n	8008592 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008596:	f000 fc37 	bl	8008e08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800859a:	4b39      	ldr	r3, [pc, #228]	@ (8008680 <xTaskResumeAll+0x118>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3b01      	subs	r3, #1
 80085a0:	4a37      	ldr	r2, [pc, #220]	@ (8008680 <xTaskResumeAll+0x118>)
 80085a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085a4:	4b36      	ldr	r3, [pc, #216]	@ (8008680 <xTaskResumeAll+0x118>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d161      	bne.n	8008670 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085ac:	4b35      	ldr	r3, [pc, #212]	@ (8008684 <xTaskResumeAll+0x11c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d05d      	beq.n	8008670 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085b4:	e02e      	b.n	8008614 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085b6:	4b34      	ldr	r3, [pc, #208]	@ (8008688 <xTaskResumeAll+0x120>)
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	3318      	adds	r3, #24
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7ff fd49 	bl	800805a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	3304      	adds	r3, #4
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7ff fd44 	bl	800805a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d6:	2201      	movs	r2, #1
 80085d8:	409a      	lsls	r2, r3
 80085da:	4b2c      	ldr	r3, [pc, #176]	@ (800868c <xTaskResumeAll+0x124>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4313      	orrs	r3, r2
 80085e0:	4a2a      	ldr	r2, [pc, #168]	@ (800868c <xTaskResumeAll+0x124>)
 80085e2:	6013      	str	r3, [r2, #0]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085e8:	4613      	mov	r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4413      	add	r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4a27      	ldr	r2, [pc, #156]	@ (8008690 <xTaskResumeAll+0x128>)
 80085f2:	441a      	add	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	3304      	adds	r3, #4
 80085f8:	4619      	mov	r1, r3
 80085fa:	4610      	mov	r0, r2
 80085fc:	f7ff fcd0 	bl	8007fa0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008604:	4b23      	ldr	r3, [pc, #140]	@ (8008694 <xTaskResumeAll+0x12c>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860a:	429a      	cmp	r2, r3
 800860c:	d302      	bcc.n	8008614 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800860e:	4b22      	ldr	r3, [pc, #136]	@ (8008698 <xTaskResumeAll+0x130>)
 8008610:	2201      	movs	r2, #1
 8008612:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008614:	4b1c      	ldr	r3, [pc, #112]	@ (8008688 <xTaskResumeAll+0x120>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1cc      	bne.n	80085b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008622:	f000 fa19 	bl	8008a58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008626:	4b1d      	ldr	r3, [pc, #116]	@ (800869c <xTaskResumeAll+0x134>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d010      	beq.n	8008654 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008632:	f000 f837 	bl	80086a4 <xTaskIncrementTick>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d002      	beq.n	8008642 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800863c:	4b16      	ldr	r3, [pc, #88]	@ (8008698 <xTaskResumeAll+0x130>)
 800863e:	2201      	movs	r2, #1
 8008640:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	3b01      	subs	r3, #1
 8008646:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1f1      	bne.n	8008632 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800864e:	4b13      	ldr	r3, [pc, #76]	@ (800869c <xTaskResumeAll+0x134>)
 8008650:	2200      	movs	r2, #0
 8008652:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008654:	4b10      	ldr	r3, [pc, #64]	@ (8008698 <xTaskResumeAll+0x130>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d009      	beq.n	8008670 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800865c:	2301      	movs	r3, #1
 800865e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008660:	4b0f      	ldr	r3, [pc, #60]	@ (80086a0 <xTaskResumeAll+0x138>)
 8008662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008666:	601a      	str	r2, [r3, #0]
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008670:	f000 fbfc 	bl	8008e6c <vPortExitCritical>

	return xAlreadyYielded;
 8008674:	68bb      	ldr	r3, [r7, #8]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	20000740 	.word	0x20000740
 8008684:	20000718 	.word	0x20000718
 8008688:	200006d8 	.word	0x200006d8
 800868c:	20000720 	.word	0x20000720
 8008690:	2000061c 	.word	0x2000061c
 8008694:	20000618 	.word	0x20000618
 8008698:	2000072c 	.word	0x2000072c
 800869c:	20000728 	.word	0x20000728
 80086a0:	e000ed04 	.word	0xe000ed04

080086a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80086aa:	2300      	movs	r3, #0
 80086ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086ae:	4b4f      	ldr	r3, [pc, #316]	@ (80087ec <xTaskIncrementTick+0x148>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f040 808f 	bne.w	80087d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086b8:	4b4d      	ldr	r3, [pc, #308]	@ (80087f0 <xTaskIncrementTick+0x14c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3301      	adds	r3, #1
 80086be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80086c0:	4a4b      	ldr	r2, [pc, #300]	@ (80087f0 <xTaskIncrementTick+0x14c>)
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d121      	bne.n	8008710 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80086cc:	4b49      	ldr	r3, [pc, #292]	@ (80087f4 <xTaskIncrementTick+0x150>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00b      	beq.n	80086ee <xTaskIncrementTick+0x4a>
	__asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	603b      	str	r3, [r7, #0]
}
 80086e8:	bf00      	nop
 80086ea:	bf00      	nop
 80086ec:	e7fd      	b.n	80086ea <xTaskIncrementTick+0x46>
 80086ee:	4b41      	ldr	r3, [pc, #260]	@ (80087f4 <xTaskIncrementTick+0x150>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	4b40      	ldr	r3, [pc, #256]	@ (80087f8 <xTaskIncrementTick+0x154>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a3e      	ldr	r2, [pc, #248]	@ (80087f4 <xTaskIncrementTick+0x150>)
 80086fa:	6013      	str	r3, [r2, #0]
 80086fc:	4a3e      	ldr	r2, [pc, #248]	@ (80087f8 <xTaskIncrementTick+0x154>)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6013      	str	r3, [r2, #0]
 8008702:	4b3e      	ldr	r3, [pc, #248]	@ (80087fc <xTaskIncrementTick+0x158>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3301      	adds	r3, #1
 8008708:	4a3c      	ldr	r2, [pc, #240]	@ (80087fc <xTaskIncrementTick+0x158>)
 800870a:	6013      	str	r3, [r2, #0]
 800870c:	f000 f9a4 	bl	8008a58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008710:	4b3b      	ldr	r3, [pc, #236]	@ (8008800 <xTaskIncrementTick+0x15c>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	429a      	cmp	r2, r3
 8008718:	d348      	bcc.n	80087ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800871a:	4b36      	ldr	r3, [pc, #216]	@ (80087f4 <xTaskIncrementTick+0x150>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d104      	bne.n	800872e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008724:	4b36      	ldr	r3, [pc, #216]	@ (8008800 <xTaskIncrementTick+0x15c>)
 8008726:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800872a:	601a      	str	r2, [r3, #0]
					break;
 800872c:	e03e      	b.n	80087ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800872e:	4b31      	ldr	r3, [pc, #196]	@ (80087f4 <xTaskIncrementTick+0x150>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	429a      	cmp	r2, r3
 8008744:	d203      	bcs.n	800874e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008746:	4a2e      	ldr	r2, [pc, #184]	@ (8008800 <xTaskIncrementTick+0x15c>)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800874c:	e02e      	b.n	80087ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	3304      	adds	r3, #4
 8008752:	4618      	mov	r0, r3
 8008754:	f7ff fc81 	bl	800805a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800875c:	2b00      	cmp	r3, #0
 800875e:	d004      	beq.n	800876a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	3318      	adds	r3, #24
 8008764:	4618      	mov	r0, r3
 8008766:	f7ff fc78 	bl	800805a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800876e:	2201      	movs	r2, #1
 8008770:	409a      	lsls	r2, r3
 8008772:	4b24      	ldr	r3, [pc, #144]	@ (8008804 <xTaskIncrementTick+0x160>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4313      	orrs	r3, r2
 8008778:	4a22      	ldr	r2, [pc, #136]	@ (8008804 <xTaskIncrementTick+0x160>)
 800877a:	6013      	str	r3, [r2, #0]
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008780:	4613      	mov	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4a1f      	ldr	r2, [pc, #124]	@ (8008808 <xTaskIncrementTick+0x164>)
 800878a:	441a      	add	r2, r3
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	3304      	adds	r3, #4
 8008790:	4619      	mov	r1, r3
 8008792:	4610      	mov	r0, r2
 8008794:	f7ff fc04 	bl	8007fa0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800879c:	4b1b      	ldr	r3, [pc, #108]	@ (800880c <xTaskIncrementTick+0x168>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d3b9      	bcc.n	800871a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80087a6:	2301      	movs	r3, #1
 80087a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087aa:	e7b6      	b.n	800871a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087ac:	4b17      	ldr	r3, [pc, #92]	@ (800880c <xTaskIncrementTick+0x168>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087b2:	4915      	ldr	r1, [pc, #84]	@ (8008808 <xTaskIncrementTick+0x164>)
 80087b4:	4613      	mov	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	4413      	add	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	440b      	add	r3, r1
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d901      	bls.n	80087c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80087c4:	2301      	movs	r3, #1
 80087c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80087c8:	4b11      	ldr	r3, [pc, #68]	@ (8008810 <xTaskIncrementTick+0x16c>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d007      	beq.n	80087e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80087d0:	2301      	movs	r3, #1
 80087d2:	617b      	str	r3, [r7, #20]
 80087d4:	e004      	b.n	80087e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80087d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008814 <xTaskIncrementTick+0x170>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3301      	adds	r3, #1
 80087dc:	4a0d      	ldr	r2, [pc, #52]	@ (8008814 <xTaskIncrementTick+0x170>)
 80087de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80087e0:	697b      	ldr	r3, [r7, #20]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	20000740 	.word	0x20000740
 80087f0:	2000071c 	.word	0x2000071c
 80087f4:	200006d0 	.word	0x200006d0
 80087f8:	200006d4 	.word	0x200006d4
 80087fc:	20000730 	.word	0x20000730
 8008800:	20000738 	.word	0x20000738
 8008804:	20000720 	.word	0x20000720
 8008808:	2000061c 	.word	0x2000061c
 800880c:	20000618 	.word	0x20000618
 8008810:	2000072c 	.word	0x2000072c
 8008814:	20000728 	.word	0x20000728

08008818 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008818:	b480      	push	{r7}
 800881a:	b087      	sub	sp, #28
 800881c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800881e:	4b2a      	ldr	r3, [pc, #168]	@ (80088c8 <vTaskSwitchContext+0xb0>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d003      	beq.n	800882e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008826:	4b29      	ldr	r3, [pc, #164]	@ (80088cc <vTaskSwitchContext+0xb4>)
 8008828:	2201      	movs	r2, #1
 800882a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800882c:	e045      	b.n	80088ba <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800882e:	4b27      	ldr	r3, [pc, #156]	@ (80088cc <vTaskSwitchContext+0xb4>)
 8008830:	2200      	movs	r2, #0
 8008832:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008834:	4b26      	ldr	r3, [pc, #152]	@ (80088d0 <vTaskSwitchContext+0xb8>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	fab3 f383 	clz	r3, r3
 8008840:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008842:	7afb      	ldrb	r3, [r7, #11]
 8008844:	f1c3 031f 	rsb	r3, r3, #31
 8008848:	617b      	str	r3, [r7, #20]
 800884a:	4922      	ldr	r1, [pc, #136]	@ (80088d4 <vTaskSwitchContext+0xbc>)
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	4613      	mov	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4413      	add	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	440b      	add	r3, r1
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10b      	bne.n	8008876 <vTaskSwitchContext+0x5e>
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	607b      	str	r3, [r7, #4]
}
 8008870:	bf00      	nop
 8008872:	bf00      	nop
 8008874:	e7fd      	b.n	8008872 <vTaskSwitchContext+0x5a>
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	4613      	mov	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	4a14      	ldr	r2, [pc, #80]	@ (80088d4 <vTaskSwitchContext+0xbc>)
 8008882:	4413      	add	r3, r2
 8008884:	613b      	str	r3, [r7, #16]
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	605a      	str	r2, [r3, #4]
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	3308      	adds	r3, #8
 8008898:	429a      	cmp	r2, r3
 800889a:	d104      	bne.n	80088a6 <vTaskSwitchContext+0x8e>
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	605a      	str	r2, [r3, #4]
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	4a0a      	ldr	r2, [pc, #40]	@ (80088d8 <vTaskSwitchContext+0xc0>)
 80088ae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088b0:	4b09      	ldr	r3, [pc, #36]	@ (80088d8 <vTaskSwitchContext+0xc0>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	334c      	adds	r3, #76	@ 0x4c
 80088b6:	4a09      	ldr	r2, [pc, #36]	@ (80088dc <vTaskSwitchContext+0xc4>)
 80088b8:	6013      	str	r3, [r2, #0]
}
 80088ba:	bf00      	nop
 80088bc:	371c      	adds	r7, #28
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	20000740 	.word	0x20000740
 80088cc:	2000072c 	.word	0x2000072c
 80088d0:	20000720 	.word	0x20000720
 80088d4:	2000061c 	.word	0x2000061c
 80088d8:	20000618 	.word	0x20000618
 80088dc:	20000010 	.word	0x20000010

080088e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80088e8:	f000 f852 	bl	8008990 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80088ec:	4b06      	ldr	r3, [pc, #24]	@ (8008908 <prvIdleTask+0x28>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d9f9      	bls.n	80088e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80088f4:	4b05      	ldr	r3, [pc, #20]	@ (800890c <prvIdleTask+0x2c>)
 80088f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008904:	e7f0      	b.n	80088e8 <prvIdleTask+0x8>
 8008906:	bf00      	nop
 8008908:	2000061c 	.word	0x2000061c
 800890c:	e000ed04 	.word	0xe000ed04

08008910 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008916:	2300      	movs	r3, #0
 8008918:	607b      	str	r3, [r7, #4]
 800891a:	e00c      	b.n	8008936 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	4613      	mov	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4413      	add	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4a12      	ldr	r2, [pc, #72]	@ (8008970 <prvInitialiseTaskLists+0x60>)
 8008928:	4413      	add	r3, r2
 800892a:	4618      	mov	r0, r3
 800892c:	f7ff fb0b 	bl	8007f46 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	3301      	adds	r3, #1
 8008934:	607b      	str	r3, [r7, #4]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2b06      	cmp	r3, #6
 800893a:	d9ef      	bls.n	800891c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800893c:	480d      	ldr	r0, [pc, #52]	@ (8008974 <prvInitialiseTaskLists+0x64>)
 800893e:	f7ff fb02 	bl	8007f46 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008942:	480d      	ldr	r0, [pc, #52]	@ (8008978 <prvInitialiseTaskLists+0x68>)
 8008944:	f7ff faff 	bl	8007f46 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008948:	480c      	ldr	r0, [pc, #48]	@ (800897c <prvInitialiseTaskLists+0x6c>)
 800894a:	f7ff fafc 	bl	8007f46 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800894e:	480c      	ldr	r0, [pc, #48]	@ (8008980 <prvInitialiseTaskLists+0x70>)
 8008950:	f7ff faf9 	bl	8007f46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008954:	480b      	ldr	r0, [pc, #44]	@ (8008984 <prvInitialiseTaskLists+0x74>)
 8008956:	f7ff faf6 	bl	8007f46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800895a:	4b0b      	ldr	r3, [pc, #44]	@ (8008988 <prvInitialiseTaskLists+0x78>)
 800895c:	4a05      	ldr	r2, [pc, #20]	@ (8008974 <prvInitialiseTaskLists+0x64>)
 800895e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008960:	4b0a      	ldr	r3, [pc, #40]	@ (800898c <prvInitialiseTaskLists+0x7c>)
 8008962:	4a05      	ldr	r2, [pc, #20]	@ (8008978 <prvInitialiseTaskLists+0x68>)
 8008964:	601a      	str	r2, [r3, #0]
}
 8008966:	bf00      	nop
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	2000061c 	.word	0x2000061c
 8008974:	200006a8 	.word	0x200006a8
 8008978:	200006bc 	.word	0x200006bc
 800897c:	200006d8 	.word	0x200006d8
 8008980:	200006ec 	.word	0x200006ec
 8008984:	20000704 	.word	0x20000704
 8008988:	200006d0 	.word	0x200006d0
 800898c:	200006d4 	.word	0x200006d4

08008990 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008996:	e019      	b.n	80089cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008998:	f000 fa36 	bl	8008e08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800899c:	4b10      	ldr	r3, [pc, #64]	@ (80089e0 <prvCheckTasksWaitingTermination+0x50>)
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3304      	adds	r3, #4
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7ff fb56 	bl	800805a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80089ae:	4b0d      	ldr	r3, [pc, #52]	@ (80089e4 <prvCheckTasksWaitingTermination+0x54>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3b01      	subs	r3, #1
 80089b4:	4a0b      	ldr	r2, [pc, #44]	@ (80089e4 <prvCheckTasksWaitingTermination+0x54>)
 80089b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80089b8:	4b0b      	ldr	r3, [pc, #44]	@ (80089e8 <prvCheckTasksWaitingTermination+0x58>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3b01      	subs	r3, #1
 80089be:	4a0a      	ldr	r2, [pc, #40]	@ (80089e8 <prvCheckTasksWaitingTermination+0x58>)
 80089c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80089c2:	f000 fa53 	bl	8008e6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f810 	bl	80089ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089cc:	4b06      	ldr	r3, [pc, #24]	@ (80089e8 <prvCheckTasksWaitingTermination+0x58>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1e1      	bne.n	8008998 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80089d4:	bf00      	nop
 80089d6:	bf00      	nop
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	200006ec 	.word	0x200006ec
 80089e4:	20000718 	.word	0x20000718
 80089e8:	20000700 	.word	0x20000700

080089ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	334c      	adds	r3, #76	@ 0x4c
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 fd21 	bl	8009440 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d108      	bne.n	8008a1a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f000 fba9 	bl	8009164 <vPortFree>
				vPortFree( pxTCB );
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fba6 	bl	8009164 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a18:	e019      	b.n	8008a4e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d103      	bne.n	8008a2c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fb9d 	bl	8009164 <vPortFree>
	}
 8008a2a:	e010      	b.n	8008a4e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d00b      	beq.n	8008a4e <prvDeleteTCB+0x62>
	__asm volatile
 8008a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	60fb      	str	r3, [r7, #12]
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop
 8008a4c:	e7fd      	b.n	8008a4a <prvDeleteTCB+0x5e>
	}
 8008a4e:	bf00      	nop
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
	...

08008a58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8008a90 <prvResetNextTaskUnblockTime+0x38>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d104      	bne.n	8008a72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a68:	4b0a      	ldr	r3, [pc, #40]	@ (8008a94 <prvResetNextTaskUnblockTime+0x3c>)
 8008a6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008a6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a70:	e008      	b.n	8008a84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a72:	4b07      	ldr	r3, [pc, #28]	@ (8008a90 <prvResetNextTaskUnblockTime+0x38>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	4a04      	ldr	r2, [pc, #16]	@ (8008a94 <prvResetNextTaskUnblockTime+0x3c>)
 8008a82:	6013      	str	r3, [r2, #0]
}
 8008a84:	bf00      	nop
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr
 8008a90:	200006d0 	.word	0x200006d0
 8008a94:	20000738 	.word	0x20000738

08008a98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8008acc <xTaskGetSchedulerState+0x34>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d102      	bne.n	8008aac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	607b      	str	r3, [r7, #4]
 8008aaa:	e008      	b.n	8008abe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008aac:	4b08      	ldr	r3, [pc, #32]	@ (8008ad0 <xTaskGetSchedulerState+0x38>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d102      	bne.n	8008aba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	607b      	str	r3, [r7, #4]
 8008ab8:	e001      	b.n	8008abe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008aba:	2300      	movs	r3, #0
 8008abc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008abe:	687b      	ldr	r3, [r7, #4]
	}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	20000724 	.word	0x20000724
 8008ad0:	20000740 	.word	0x20000740

08008ad4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ade:	4b29      	ldr	r3, [pc, #164]	@ (8008b84 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ae4:	4b28      	ldr	r3, [pc, #160]	@ (8008b88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3304      	adds	r3, #4
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff fab5 	bl	800805a <uxListRemove>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10b      	bne.n	8008b0e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008af6:	4b24      	ldr	r3, [pc, #144]	@ (8008b88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afc:	2201      	movs	r2, #1
 8008afe:	fa02 f303 	lsl.w	r3, r2, r3
 8008b02:	43da      	mvns	r2, r3
 8008b04:	4b21      	ldr	r3, [pc, #132]	@ (8008b8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4013      	ands	r3, r2
 8008b0a:	4a20      	ldr	r2, [pc, #128]	@ (8008b8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b0c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b14:	d10a      	bne.n	8008b2c <prvAddCurrentTaskToDelayedList+0x58>
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d007      	beq.n	8008b2c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8008b88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3304      	adds	r3, #4
 8008b22:	4619      	mov	r1, r3
 8008b24:	481a      	ldr	r0, [pc, #104]	@ (8008b90 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008b26:	f7ff fa3b 	bl	8007fa0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b2a:	e026      	b.n	8008b7a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4413      	add	r3, r2
 8008b32:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b34:	4b14      	ldr	r3, [pc, #80]	@ (8008b88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d209      	bcs.n	8008b58 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b44:	4b13      	ldr	r3, [pc, #76]	@ (8008b94 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	4b0f      	ldr	r3, [pc, #60]	@ (8008b88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	4619      	mov	r1, r3
 8008b50:	4610      	mov	r0, r2
 8008b52:	f7ff fa49 	bl	8007fe8 <vListInsert>
}
 8008b56:	e010      	b.n	8008b7a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b58:	4b0f      	ldr	r3, [pc, #60]	@ (8008b98 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	3304      	adds	r3, #4
 8008b62:	4619      	mov	r1, r3
 8008b64:	4610      	mov	r0, r2
 8008b66:	f7ff fa3f 	bl	8007fe8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8008b9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d202      	bcs.n	8008b7a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008b74:	4a09      	ldr	r2, [pc, #36]	@ (8008b9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	6013      	str	r3, [r2, #0]
}
 8008b7a:	bf00      	nop
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	2000071c 	.word	0x2000071c
 8008b88:	20000618 	.word	0x20000618
 8008b8c:	20000720 	.word	0x20000720
 8008b90:	20000704 	.word	0x20000704
 8008b94:	200006d4 	.word	0x200006d4
 8008b98:	200006d0 	.word	0x200006d0
 8008b9c:	20000738 	.word	0x20000738

08008ba0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	3b04      	subs	r3, #4
 8008bb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008bb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	3b04      	subs	r3, #4
 8008bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	f023 0201 	bic.w	r2, r3, #1
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3b04      	subs	r3, #4
 8008bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8008c04 <pxPortInitialiseStack+0x64>)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3b14      	subs	r3, #20
 8008bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	3b04      	subs	r3, #4
 8008be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f06f 0202 	mvn.w	r2, #2
 8008bee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	3b20      	subs	r3, #32
 8008bf4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	08008c09 	.word	0x08008c09

08008c08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c12:	4b13      	ldr	r3, [pc, #76]	@ (8008c60 <prvTaskExitError+0x58>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c1a:	d00b      	beq.n	8008c34 <prvTaskExitError+0x2c>
	__asm volatile
 8008c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	60fb      	str	r3, [r7, #12]
}
 8008c2e:	bf00      	nop
 8008c30:	bf00      	nop
 8008c32:	e7fd      	b.n	8008c30 <prvTaskExitError+0x28>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	60bb      	str	r3, [r7, #8]
}
 8008c46:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c48:	bf00      	nop
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d0fc      	beq.n	8008c4a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c50:	bf00      	nop
 8008c52:	bf00      	nop
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	2000000c 	.word	0x2000000c
	...

08008c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c70:	4b07      	ldr	r3, [pc, #28]	@ (8008c90 <pxCurrentTCBConst2>)
 8008c72:	6819      	ldr	r1, [r3, #0]
 8008c74:	6808      	ldr	r0, [r1, #0]
 8008c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7a:	f380 8809 	msr	PSP, r0
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f04f 0000 	mov.w	r0, #0
 8008c86:	f380 8811 	msr	BASEPRI, r0
 8008c8a:	4770      	bx	lr
 8008c8c:	f3af 8000 	nop.w

08008c90 <pxCurrentTCBConst2>:
 8008c90:	20000618 	.word	0x20000618
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop

08008c98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c98:	4808      	ldr	r0, [pc, #32]	@ (8008cbc <prvPortStartFirstTask+0x24>)
 8008c9a:	6800      	ldr	r0, [r0, #0]
 8008c9c:	6800      	ldr	r0, [r0, #0]
 8008c9e:	f380 8808 	msr	MSP, r0
 8008ca2:	f04f 0000 	mov.w	r0, #0
 8008ca6:	f380 8814 	msr	CONTROL, r0
 8008caa:	b662      	cpsie	i
 8008cac:	b661      	cpsie	f
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	df00      	svc	0
 8008cb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008cba:	bf00      	nop
 8008cbc:	e000ed08 	.word	0xe000ed08

08008cc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008cc6:	4b47      	ldr	r3, [pc, #284]	@ (8008de4 <xPortStartScheduler+0x124>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a47      	ldr	r2, [pc, #284]	@ (8008de8 <xPortStartScheduler+0x128>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d10b      	bne.n	8008ce8 <xPortStartScheduler+0x28>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	60fb      	str	r3, [r7, #12]
}
 8008ce2:	bf00      	nop
 8008ce4:	bf00      	nop
 8008ce6:	e7fd      	b.n	8008ce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8008de4 <xPortStartScheduler+0x124>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a3f      	ldr	r2, [pc, #252]	@ (8008dec <xPortStartScheduler+0x12c>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d10b      	bne.n	8008d0a <xPortStartScheduler+0x4a>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	613b      	str	r3, [r7, #16]
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop
 8008d08:	e7fd      	b.n	8008d06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d0a:	4b39      	ldr	r3, [pc, #228]	@ (8008df0 <xPortStartScheduler+0x130>)
 8008d0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	22ff      	movs	r2, #255	@ 0xff
 8008d1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d24:	78fb      	ldrb	r3, [r7, #3]
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	4b31      	ldr	r3, [pc, #196]	@ (8008df4 <xPortStartScheduler+0x134>)
 8008d30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d32:	4b31      	ldr	r3, [pc, #196]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d34:	2207      	movs	r2, #7
 8008d36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d38:	e009      	b.n	8008d4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	4a2d      	ldr	r2, [pc, #180]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d4e:	78fb      	ldrb	r3, [r7, #3]
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d56:	2b80      	cmp	r3, #128	@ 0x80
 8008d58:	d0ef      	beq.n	8008d3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d5a:	4b27      	ldr	r3, [pc, #156]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f1c3 0307 	rsb	r3, r3, #7
 8008d62:	2b04      	cmp	r3, #4
 8008d64:	d00b      	beq.n	8008d7e <xPortStartScheduler+0xbe>
	__asm volatile
 8008d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	60bb      	str	r3, [r7, #8]
}
 8008d78:	bf00      	nop
 8008d7a:	bf00      	nop
 8008d7c:	e7fd      	b.n	8008d7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	021b      	lsls	r3, r3, #8
 8008d84:	4a1c      	ldr	r2, [pc, #112]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d88:	4b1b      	ldr	r3, [pc, #108]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d90:	4a19      	ldr	r2, [pc, #100]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d9c:	4b17      	ldr	r3, [pc, #92]	@ (8008dfc <xPortStartScheduler+0x13c>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a16      	ldr	r2, [pc, #88]	@ (8008dfc <xPortStartScheduler+0x13c>)
 8008da2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008da6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008da8:	4b14      	ldr	r3, [pc, #80]	@ (8008dfc <xPortStartScheduler+0x13c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a13      	ldr	r2, [pc, #76]	@ (8008dfc <xPortStartScheduler+0x13c>)
 8008dae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008db2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008db4:	f000 f8da 	bl	8008f6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008db8:	4b11      	ldr	r3, [pc, #68]	@ (8008e00 <xPortStartScheduler+0x140>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008dbe:	f000 f8f9 	bl	8008fb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008dc2:	4b10      	ldr	r3, [pc, #64]	@ (8008e04 <xPortStartScheduler+0x144>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8008e04 <xPortStartScheduler+0x144>)
 8008dc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008dcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008dce:	f7ff ff63 	bl	8008c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008dd2:	f7ff fd21 	bl	8008818 <vTaskSwitchContext>
	prvTaskExitError();
 8008dd6:	f7ff ff17 	bl	8008c08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3718      	adds	r7, #24
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	e000ed00 	.word	0xe000ed00
 8008de8:	410fc271 	.word	0x410fc271
 8008dec:	410fc270 	.word	0x410fc270
 8008df0:	e000e400 	.word	0xe000e400
 8008df4:	20000744 	.word	0x20000744
 8008df8:	20000748 	.word	0x20000748
 8008dfc:	e000ed20 	.word	0xe000ed20
 8008e00:	2000000c 	.word	0x2000000c
 8008e04:	e000ef34 	.word	0xe000ef34

08008e08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	607b      	str	r3, [r7, #4]
}
 8008e20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e22:	4b10      	ldr	r3, [pc, #64]	@ (8008e64 <vPortEnterCritical+0x5c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3301      	adds	r3, #1
 8008e28:	4a0e      	ldr	r2, [pc, #56]	@ (8008e64 <vPortEnterCritical+0x5c>)
 8008e2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8008e64 <vPortEnterCritical+0x5c>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d110      	bne.n	8008e56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e34:	4b0c      	ldr	r3, [pc, #48]	@ (8008e68 <vPortEnterCritical+0x60>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00b      	beq.n	8008e56 <vPortEnterCritical+0x4e>
	__asm volatile
 8008e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	603b      	str	r3, [r7, #0]
}
 8008e50:	bf00      	nop
 8008e52:	bf00      	nop
 8008e54:	e7fd      	b.n	8008e52 <vPortEnterCritical+0x4a>
	}
}
 8008e56:	bf00      	nop
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	2000000c 	.word	0x2000000c
 8008e68:	e000ed04 	.word	0xe000ed04

08008e6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e72:	4b12      	ldr	r3, [pc, #72]	@ (8008ebc <vPortExitCritical+0x50>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10b      	bne.n	8008e92 <vPortExitCritical+0x26>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	607b      	str	r3, [r7, #4]
}
 8008e8c:	bf00      	nop
 8008e8e:	bf00      	nop
 8008e90:	e7fd      	b.n	8008e8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e92:	4b0a      	ldr	r3, [pc, #40]	@ (8008ebc <vPortExitCritical+0x50>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	4a08      	ldr	r2, [pc, #32]	@ (8008ebc <vPortExitCritical+0x50>)
 8008e9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e9c:	4b07      	ldr	r3, [pc, #28]	@ (8008ebc <vPortExitCritical+0x50>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d105      	bne.n	8008eb0 <vPortExitCritical+0x44>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008eae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr
 8008ebc:	2000000c 	.word	0x2000000c

08008ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ec0:	f3ef 8009 	mrs	r0, PSP
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	4b15      	ldr	r3, [pc, #84]	@ (8008f20 <pxCurrentTCBConst>)
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	f01e 0f10 	tst.w	lr, #16
 8008ed0:	bf08      	it	eq
 8008ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eda:	6010      	str	r0, [r2, #0]
 8008edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ee0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008ee4:	f380 8811 	msr	BASEPRI, r0
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f7ff fc92 	bl	8008818 <vTaskSwitchContext>
 8008ef4:	f04f 0000 	mov.w	r0, #0
 8008ef8:	f380 8811 	msr	BASEPRI, r0
 8008efc:	bc09      	pop	{r0, r3}
 8008efe:	6819      	ldr	r1, [r3, #0]
 8008f00:	6808      	ldr	r0, [r1, #0]
 8008f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f06:	f01e 0f10 	tst.w	lr, #16
 8008f0a:	bf08      	it	eq
 8008f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f10:	f380 8809 	msr	PSP, r0
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	f3af 8000 	nop.w

08008f20 <pxCurrentTCBConst>:
 8008f20:	20000618 	.word	0x20000618
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop

08008f28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	607b      	str	r3, [r7, #4]
}
 8008f40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f42:	f7ff fbaf 	bl	80086a4 <xTaskIncrementTick>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f4c:	4b06      	ldr	r3, [pc, #24]	@ (8008f68 <xPortSysTickHandler+0x40>)
 8008f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	2300      	movs	r3, #0
 8008f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	f383 8811 	msr	BASEPRI, r3
}
 8008f5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f60:	bf00      	nop
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	e000ed04 	.word	0xe000ed04

08008f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f70:	4b0b      	ldr	r3, [pc, #44]	@ (8008fa0 <vPortSetupTimerInterrupt+0x34>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f76:	4b0b      	ldr	r3, [pc, #44]	@ (8008fa4 <vPortSetupTimerInterrupt+0x38>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008fa8 <vPortSetupTimerInterrupt+0x3c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a0a      	ldr	r2, [pc, #40]	@ (8008fac <vPortSetupTimerInterrupt+0x40>)
 8008f82:	fba2 2303 	umull	r2, r3, r2, r3
 8008f86:	099b      	lsrs	r3, r3, #6
 8008f88:	4a09      	ldr	r2, [pc, #36]	@ (8008fb0 <vPortSetupTimerInterrupt+0x44>)
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f8e:	4b04      	ldr	r3, [pc, #16]	@ (8008fa0 <vPortSetupTimerInterrupt+0x34>)
 8008f90:	2207      	movs	r2, #7
 8008f92:	601a      	str	r2, [r3, #0]
}
 8008f94:	bf00      	nop
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	e000e010 	.word	0xe000e010
 8008fa4:	e000e018 	.word	0xe000e018
 8008fa8:	20000000 	.word	0x20000000
 8008fac:	10624dd3 	.word	0x10624dd3
 8008fb0:	e000e014 	.word	0xe000e014

08008fb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008fb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008fc4 <vPortEnableVFP+0x10>
 8008fb8:	6801      	ldr	r1, [r0, #0]
 8008fba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008fbe:	6001      	str	r1, [r0, #0]
 8008fc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008fc2:	bf00      	nop
 8008fc4:	e000ed88 	.word	0xe000ed88

08008fc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08a      	sub	sp, #40	@ 0x28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008fd4:	f7ff faba 	bl	800854c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008fd8:	4b5c      	ldr	r3, [pc, #368]	@ (800914c <pvPortMalloc+0x184>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d101      	bne.n	8008fe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008fe0:	f000 f924 	bl	800922c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008fe4:	4b5a      	ldr	r3, [pc, #360]	@ (8009150 <pvPortMalloc+0x188>)
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4013      	ands	r3, r2
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f040 8095 	bne.w	800911c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d01e      	beq.n	8009036 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008ff8:	2208      	movs	r2, #8
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f003 0307 	and.w	r3, r3, #7
 8009006:	2b00      	cmp	r3, #0
 8009008:	d015      	beq.n	8009036 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f023 0307 	bic.w	r3, r3, #7
 8009010:	3308      	adds	r3, #8
 8009012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f003 0307 	and.w	r3, r3, #7
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00b      	beq.n	8009036 <pvPortMalloc+0x6e>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	617b      	str	r3, [r7, #20]
}
 8009030:	bf00      	nop
 8009032:	bf00      	nop
 8009034:	e7fd      	b.n	8009032 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d06f      	beq.n	800911c <pvPortMalloc+0x154>
 800903c:	4b45      	ldr	r3, [pc, #276]	@ (8009154 <pvPortMalloc+0x18c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	429a      	cmp	r2, r3
 8009044:	d86a      	bhi.n	800911c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009046:	4b44      	ldr	r3, [pc, #272]	@ (8009158 <pvPortMalloc+0x190>)
 8009048:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800904a:	4b43      	ldr	r3, [pc, #268]	@ (8009158 <pvPortMalloc+0x190>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009050:	e004      	b.n	800905c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009054:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800905c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	429a      	cmp	r2, r3
 8009064:	d903      	bls.n	800906e <pvPortMalloc+0xa6>
 8009066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1f1      	bne.n	8009052 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800906e:	4b37      	ldr	r3, [pc, #220]	@ (800914c <pvPortMalloc+0x184>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009074:	429a      	cmp	r2, r3
 8009076:	d051      	beq.n	800911c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2208      	movs	r2, #8
 800907e:	4413      	add	r3, r2
 8009080:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800908a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	1ad2      	subs	r2, r2, r3
 8009092:	2308      	movs	r3, #8
 8009094:	005b      	lsls	r3, r3, #1
 8009096:	429a      	cmp	r2, r3
 8009098:	d920      	bls.n	80090dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800909a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4413      	add	r3, r2
 80090a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	f003 0307 	and.w	r3, r3, #7
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00b      	beq.n	80090c4 <pvPortMalloc+0xfc>
	__asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	613b      	str	r3, [r7, #16]
}
 80090be:	bf00      	nop
 80090c0:	bf00      	nop
 80090c2:	e7fd      	b.n	80090c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	1ad2      	subs	r2, r2, r3
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80090d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80090d6:	69b8      	ldr	r0, [r7, #24]
 80090d8:	f000 f90a 	bl	80092f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090dc:	4b1d      	ldr	r3, [pc, #116]	@ (8009154 <pvPortMalloc+0x18c>)
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	4a1b      	ldr	r2, [pc, #108]	@ (8009154 <pvPortMalloc+0x18c>)
 80090e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009154 <pvPortMalloc+0x18c>)
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	4b1b      	ldr	r3, [pc, #108]	@ (800915c <pvPortMalloc+0x194>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d203      	bcs.n	80090fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80090f6:	4b17      	ldr	r3, [pc, #92]	@ (8009154 <pvPortMalloc+0x18c>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a18      	ldr	r2, [pc, #96]	@ (800915c <pvPortMalloc+0x194>)
 80090fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009100:	685a      	ldr	r2, [r3, #4]
 8009102:	4b13      	ldr	r3, [pc, #76]	@ (8009150 <pvPortMalloc+0x188>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	431a      	orrs	r2, r3
 8009108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800910a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800910c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800910e:	2200      	movs	r2, #0
 8009110:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009112:	4b13      	ldr	r3, [pc, #76]	@ (8009160 <pvPortMalloc+0x198>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3301      	adds	r3, #1
 8009118:	4a11      	ldr	r2, [pc, #68]	@ (8009160 <pvPortMalloc+0x198>)
 800911a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800911c:	f7ff fa24 	bl	8008568 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	f003 0307 	and.w	r3, r3, #7
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00b      	beq.n	8009142 <pvPortMalloc+0x17a>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	60fb      	str	r3, [r7, #12]
}
 800913c:	bf00      	nop
 800913e:	bf00      	nop
 8009140:	e7fd      	b.n	800913e <pvPortMalloc+0x176>
	return pvReturn;
 8009142:	69fb      	ldr	r3, [r7, #28]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3728      	adds	r7, #40	@ 0x28
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	2000130c 	.word	0x2000130c
 8009150:	20001320 	.word	0x20001320
 8009154:	20001310 	.word	0x20001310
 8009158:	20001304 	.word	0x20001304
 800915c:	20001314 	.word	0x20001314
 8009160:	20001318 	.word	0x20001318

08009164 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d04f      	beq.n	8009216 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009176:	2308      	movs	r3, #8
 8009178:	425b      	negs	r3, r3
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	4413      	add	r3, r2
 800917e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	4b25      	ldr	r3, [pc, #148]	@ (8009220 <vPortFree+0xbc>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4013      	ands	r3, r2
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10b      	bne.n	80091aa <vPortFree+0x46>
	__asm volatile
 8009192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009196:	f383 8811 	msr	BASEPRI, r3
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	60fb      	str	r3, [r7, #12]
}
 80091a4:	bf00      	nop
 80091a6:	bf00      	nop
 80091a8:	e7fd      	b.n	80091a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00b      	beq.n	80091ca <vPortFree+0x66>
	__asm volatile
 80091b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b6:	f383 8811 	msr	BASEPRI, r3
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	60bb      	str	r3, [r7, #8]
}
 80091c4:	bf00      	nop
 80091c6:	bf00      	nop
 80091c8:	e7fd      	b.n	80091c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	685a      	ldr	r2, [r3, #4]
 80091ce:	4b14      	ldr	r3, [pc, #80]	@ (8009220 <vPortFree+0xbc>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4013      	ands	r3, r2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d01e      	beq.n	8009216 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d11a      	bne.n	8009216 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	4b0e      	ldr	r3, [pc, #56]	@ (8009220 <vPortFree+0xbc>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	43db      	mvns	r3, r3
 80091ea:	401a      	ands	r2, r3
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80091f0:	f7ff f9ac 	bl	800854c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	685a      	ldr	r2, [r3, #4]
 80091f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009224 <vPortFree+0xc0>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4413      	add	r3, r2
 80091fe:	4a09      	ldr	r2, [pc, #36]	@ (8009224 <vPortFree+0xc0>)
 8009200:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009202:	6938      	ldr	r0, [r7, #16]
 8009204:	f000 f874 	bl	80092f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009208:	4b07      	ldr	r3, [pc, #28]	@ (8009228 <vPortFree+0xc4>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3301      	adds	r3, #1
 800920e:	4a06      	ldr	r2, [pc, #24]	@ (8009228 <vPortFree+0xc4>)
 8009210:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009212:	f7ff f9a9 	bl	8008568 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009216:	bf00      	nop
 8009218:	3718      	adds	r7, #24
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	20001320 	.word	0x20001320
 8009224:	20001310 	.word	0x20001310
 8009228:	2000131c 	.word	0x2000131c

0800922c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009232:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009236:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009238:	4b27      	ldr	r3, [pc, #156]	@ (80092d8 <prvHeapInit+0xac>)
 800923a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f003 0307 	and.w	r3, r3, #7
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00c      	beq.n	8009260 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3307      	adds	r3, #7
 800924a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f023 0307 	bic.w	r3, r3, #7
 8009252:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	4a1f      	ldr	r2, [pc, #124]	@ (80092d8 <prvHeapInit+0xac>)
 800925c:	4413      	add	r3, r2
 800925e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009264:	4a1d      	ldr	r2, [pc, #116]	@ (80092dc <prvHeapInit+0xb0>)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800926a:	4b1c      	ldr	r3, [pc, #112]	@ (80092dc <prvHeapInit+0xb0>)
 800926c:	2200      	movs	r2, #0
 800926e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	68ba      	ldr	r2, [r7, #8]
 8009274:	4413      	add	r3, r2
 8009276:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009278:	2208      	movs	r2, #8
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	1a9b      	subs	r3, r3, r2
 800927e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f023 0307 	bic.w	r3, r3, #7
 8009286:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	4a15      	ldr	r2, [pc, #84]	@ (80092e0 <prvHeapInit+0xb4>)
 800928c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800928e:	4b14      	ldr	r3, [pc, #80]	@ (80092e0 <prvHeapInit+0xb4>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2200      	movs	r2, #0
 8009294:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009296:	4b12      	ldr	r3, [pc, #72]	@ (80092e0 <prvHeapInit+0xb4>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2200      	movs	r2, #0
 800929c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	1ad2      	subs	r2, r2, r3
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092ac:	4b0c      	ldr	r3, [pc, #48]	@ (80092e0 <prvHeapInit+0xb4>)
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	4a0a      	ldr	r2, [pc, #40]	@ (80092e4 <prvHeapInit+0xb8>)
 80092ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	4a09      	ldr	r2, [pc, #36]	@ (80092e8 <prvHeapInit+0xbc>)
 80092c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092c4:	4b09      	ldr	r3, [pc, #36]	@ (80092ec <prvHeapInit+0xc0>)
 80092c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80092ca:	601a      	str	r2, [r3, #0]
}
 80092cc:	bf00      	nop
 80092ce:	3714      	adds	r7, #20
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr
 80092d8:	2000074c 	.word	0x2000074c
 80092dc:	20001304 	.word	0x20001304
 80092e0:	2000130c 	.word	0x2000130c
 80092e4:	20001314 	.word	0x20001314
 80092e8:	20001310 	.word	0x20001310
 80092ec:	20001320 	.word	0x20001320

080092f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092f8:	4b28      	ldr	r3, [pc, #160]	@ (800939c <prvInsertBlockIntoFreeList+0xac>)
 80092fa:	60fb      	str	r3, [r7, #12]
 80092fc:	e002      	b.n	8009304 <prvInsertBlockIntoFreeList+0x14>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	429a      	cmp	r2, r3
 800930c:	d8f7      	bhi.n	80092fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	4413      	add	r3, r2
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	429a      	cmp	r2, r3
 800931e:	d108      	bne.n	8009332 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	685a      	ldr	r2, [r3, #4]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	441a      	add	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	441a      	add	r2, r3
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	429a      	cmp	r2, r3
 8009344:	d118      	bne.n	8009378 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	4b15      	ldr	r3, [pc, #84]	@ (80093a0 <prvInsertBlockIntoFreeList+0xb0>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	429a      	cmp	r2, r3
 8009350:	d00d      	beq.n	800936e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685a      	ldr	r2, [r3, #4]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	441a      	add	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	601a      	str	r2, [r3, #0]
 800936c:	e008      	b.n	8009380 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800936e:	4b0c      	ldr	r3, [pc, #48]	@ (80093a0 <prvInsertBlockIntoFreeList+0xb0>)
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	601a      	str	r2, [r3, #0]
 8009376:	e003      	b.n	8009380 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	429a      	cmp	r2, r3
 8009386:	d002      	beq.n	800938e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800938e:	bf00      	nop
 8009390:	3714      	adds	r7, #20
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	20001304 	.word	0x20001304
 80093a0:	2000130c 	.word	0x2000130c

080093a4 <sniprintf>:
 80093a4:	b40c      	push	{r2, r3}
 80093a6:	b530      	push	{r4, r5, lr}
 80093a8:	4b18      	ldr	r3, [pc, #96]	@ (800940c <sniprintf+0x68>)
 80093aa:	1e0c      	subs	r4, r1, #0
 80093ac:	681d      	ldr	r5, [r3, #0]
 80093ae:	b09d      	sub	sp, #116	@ 0x74
 80093b0:	da08      	bge.n	80093c4 <sniprintf+0x20>
 80093b2:	238b      	movs	r3, #139	@ 0x8b
 80093b4:	602b      	str	r3, [r5, #0]
 80093b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093ba:	b01d      	add	sp, #116	@ 0x74
 80093bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093c0:	b002      	add	sp, #8
 80093c2:	4770      	bx	lr
 80093c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80093c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80093cc:	f04f 0300 	mov.w	r3, #0
 80093d0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80093d2:	bf14      	ite	ne
 80093d4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80093d8:	4623      	moveq	r3, r4
 80093da:	9304      	str	r3, [sp, #16]
 80093dc:	9307      	str	r3, [sp, #28]
 80093de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80093e2:	9002      	str	r0, [sp, #8]
 80093e4:	9006      	str	r0, [sp, #24]
 80093e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80093ea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80093ec:	ab21      	add	r3, sp, #132	@ 0x84
 80093ee:	a902      	add	r1, sp, #8
 80093f0:	4628      	mov	r0, r5
 80093f2:	9301      	str	r3, [sp, #4]
 80093f4:	f000 fa10 	bl	8009818 <_svfiprintf_r>
 80093f8:	1c43      	adds	r3, r0, #1
 80093fa:	bfbc      	itt	lt
 80093fc:	238b      	movlt	r3, #139	@ 0x8b
 80093fe:	602b      	strlt	r3, [r5, #0]
 8009400:	2c00      	cmp	r4, #0
 8009402:	d0da      	beq.n	80093ba <sniprintf+0x16>
 8009404:	9b02      	ldr	r3, [sp, #8]
 8009406:	2200      	movs	r2, #0
 8009408:	701a      	strb	r2, [r3, #0]
 800940a:	e7d6      	b.n	80093ba <sniprintf+0x16>
 800940c:	20000010 	.word	0x20000010

08009410 <memcmp>:
 8009410:	b510      	push	{r4, lr}
 8009412:	3901      	subs	r1, #1
 8009414:	4402      	add	r2, r0
 8009416:	4290      	cmp	r0, r2
 8009418:	d101      	bne.n	800941e <memcmp+0xe>
 800941a:	2000      	movs	r0, #0
 800941c:	e005      	b.n	800942a <memcmp+0x1a>
 800941e:	7803      	ldrb	r3, [r0, #0]
 8009420:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009424:	42a3      	cmp	r3, r4
 8009426:	d001      	beq.n	800942c <memcmp+0x1c>
 8009428:	1b18      	subs	r0, r3, r4
 800942a:	bd10      	pop	{r4, pc}
 800942c:	3001      	adds	r0, #1
 800942e:	e7f2      	b.n	8009416 <memcmp+0x6>

08009430 <memset>:
 8009430:	4402      	add	r2, r0
 8009432:	4603      	mov	r3, r0
 8009434:	4293      	cmp	r3, r2
 8009436:	d100      	bne.n	800943a <memset+0xa>
 8009438:	4770      	bx	lr
 800943a:	f803 1b01 	strb.w	r1, [r3], #1
 800943e:	e7f9      	b.n	8009434 <memset+0x4>

08009440 <_reclaim_reent>:
 8009440:	4b2d      	ldr	r3, [pc, #180]	@ (80094f8 <_reclaim_reent+0xb8>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4283      	cmp	r3, r0
 8009446:	b570      	push	{r4, r5, r6, lr}
 8009448:	4604      	mov	r4, r0
 800944a:	d053      	beq.n	80094f4 <_reclaim_reent+0xb4>
 800944c:	69c3      	ldr	r3, [r0, #28]
 800944e:	b31b      	cbz	r3, 8009498 <_reclaim_reent+0x58>
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	b163      	cbz	r3, 800946e <_reclaim_reent+0x2e>
 8009454:	2500      	movs	r5, #0
 8009456:	69e3      	ldr	r3, [r4, #28]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	5959      	ldr	r1, [r3, r5]
 800945c:	b9b1      	cbnz	r1, 800948c <_reclaim_reent+0x4c>
 800945e:	3504      	adds	r5, #4
 8009460:	2d80      	cmp	r5, #128	@ 0x80
 8009462:	d1f8      	bne.n	8009456 <_reclaim_reent+0x16>
 8009464:	69e3      	ldr	r3, [r4, #28]
 8009466:	4620      	mov	r0, r4
 8009468:	68d9      	ldr	r1, [r3, #12]
 800946a:	f000 f881 	bl	8009570 <_free_r>
 800946e:	69e3      	ldr	r3, [r4, #28]
 8009470:	6819      	ldr	r1, [r3, #0]
 8009472:	b111      	cbz	r1, 800947a <_reclaim_reent+0x3a>
 8009474:	4620      	mov	r0, r4
 8009476:	f000 f87b 	bl	8009570 <_free_r>
 800947a:	69e3      	ldr	r3, [r4, #28]
 800947c:	689d      	ldr	r5, [r3, #8]
 800947e:	b15d      	cbz	r5, 8009498 <_reclaim_reent+0x58>
 8009480:	4629      	mov	r1, r5
 8009482:	4620      	mov	r0, r4
 8009484:	682d      	ldr	r5, [r5, #0]
 8009486:	f000 f873 	bl	8009570 <_free_r>
 800948a:	e7f8      	b.n	800947e <_reclaim_reent+0x3e>
 800948c:	680e      	ldr	r6, [r1, #0]
 800948e:	4620      	mov	r0, r4
 8009490:	f000 f86e 	bl	8009570 <_free_r>
 8009494:	4631      	mov	r1, r6
 8009496:	e7e1      	b.n	800945c <_reclaim_reent+0x1c>
 8009498:	6961      	ldr	r1, [r4, #20]
 800949a:	b111      	cbz	r1, 80094a2 <_reclaim_reent+0x62>
 800949c:	4620      	mov	r0, r4
 800949e:	f000 f867 	bl	8009570 <_free_r>
 80094a2:	69e1      	ldr	r1, [r4, #28]
 80094a4:	b111      	cbz	r1, 80094ac <_reclaim_reent+0x6c>
 80094a6:	4620      	mov	r0, r4
 80094a8:	f000 f862 	bl	8009570 <_free_r>
 80094ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80094ae:	b111      	cbz	r1, 80094b6 <_reclaim_reent+0x76>
 80094b0:	4620      	mov	r0, r4
 80094b2:	f000 f85d 	bl	8009570 <_free_r>
 80094b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094b8:	b111      	cbz	r1, 80094c0 <_reclaim_reent+0x80>
 80094ba:	4620      	mov	r0, r4
 80094bc:	f000 f858 	bl	8009570 <_free_r>
 80094c0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80094c2:	b111      	cbz	r1, 80094ca <_reclaim_reent+0x8a>
 80094c4:	4620      	mov	r0, r4
 80094c6:	f000 f853 	bl	8009570 <_free_r>
 80094ca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80094cc:	b111      	cbz	r1, 80094d4 <_reclaim_reent+0x94>
 80094ce:	4620      	mov	r0, r4
 80094d0:	f000 f84e 	bl	8009570 <_free_r>
 80094d4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80094d6:	b111      	cbz	r1, 80094de <_reclaim_reent+0x9e>
 80094d8:	4620      	mov	r0, r4
 80094da:	f000 f849 	bl	8009570 <_free_r>
 80094de:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80094e0:	b111      	cbz	r1, 80094e8 <_reclaim_reent+0xa8>
 80094e2:	4620      	mov	r0, r4
 80094e4:	f000 f844 	bl	8009570 <_free_r>
 80094e8:	6a23      	ldr	r3, [r4, #32]
 80094ea:	b11b      	cbz	r3, 80094f4 <_reclaim_reent+0xb4>
 80094ec:	4620      	mov	r0, r4
 80094ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80094f2:	4718      	bx	r3
 80094f4:	bd70      	pop	{r4, r5, r6, pc}
 80094f6:	bf00      	nop
 80094f8:	20000010 	.word	0x20000010

080094fc <__errno>:
 80094fc:	4b01      	ldr	r3, [pc, #4]	@ (8009504 <__errno+0x8>)
 80094fe:	6818      	ldr	r0, [r3, #0]
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	20000010 	.word	0x20000010

08009508 <__libc_init_array>:
 8009508:	b570      	push	{r4, r5, r6, lr}
 800950a:	4d0d      	ldr	r5, [pc, #52]	@ (8009540 <__libc_init_array+0x38>)
 800950c:	4c0d      	ldr	r4, [pc, #52]	@ (8009544 <__libc_init_array+0x3c>)
 800950e:	1b64      	subs	r4, r4, r5
 8009510:	10a4      	asrs	r4, r4, #2
 8009512:	2600      	movs	r6, #0
 8009514:	42a6      	cmp	r6, r4
 8009516:	d109      	bne.n	800952c <__libc_init_array+0x24>
 8009518:	4d0b      	ldr	r5, [pc, #44]	@ (8009548 <__libc_init_array+0x40>)
 800951a:	4c0c      	ldr	r4, [pc, #48]	@ (800954c <__libc_init_array+0x44>)
 800951c:	f000 fc64 	bl	8009de8 <_init>
 8009520:	1b64      	subs	r4, r4, r5
 8009522:	10a4      	asrs	r4, r4, #2
 8009524:	2600      	movs	r6, #0
 8009526:	42a6      	cmp	r6, r4
 8009528:	d105      	bne.n	8009536 <__libc_init_array+0x2e>
 800952a:	bd70      	pop	{r4, r5, r6, pc}
 800952c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009530:	4798      	blx	r3
 8009532:	3601      	adds	r6, #1
 8009534:	e7ee      	b.n	8009514 <__libc_init_array+0xc>
 8009536:	f855 3b04 	ldr.w	r3, [r5], #4
 800953a:	4798      	blx	r3
 800953c:	3601      	adds	r6, #1
 800953e:	e7f2      	b.n	8009526 <__libc_init_array+0x1e>
 8009540:	0800a120 	.word	0x0800a120
 8009544:	0800a120 	.word	0x0800a120
 8009548:	0800a120 	.word	0x0800a120
 800954c:	0800a124 	.word	0x0800a124

08009550 <__retarget_lock_acquire_recursive>:
 8009550:	4770      	bx	lr

08009552 <__retarget_lock_release_recursive>:
 8009552:	4770      	bx	lr

08009554 <memcpy>:
 8009554:	440a      	add	r2, r1
 8009556:	4291      	cmp	r1, r2
 8009558:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800955c:	d100      	bne.n	8009560 <memcpy+0xc>
 800955e:	4770      	bx	lr
 8009560:	b510      	push	{r4, lr}
 8009562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800956a:	4291      	cmp	r1, r2
 800956c:	d1f9      	bne.n	8009562 <memcpy+0xe>
 800956e:	bd10      	pop	{r4, pc}

08009570 <_free_r>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4605      	mov	r5, r0
 8009574:	2900      	cmp	r1, #0
 8009576:	d041      	beq.n	80095fc <_free_r+0x8c>
 8009578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800957c:	1f0c      	subs	r4, r1, #4
 800957e:	2b00      	cmp	r3, #0
 8009580:	bfb8      	it	lt
 8009582:	18e4      	addlt	r4, r4, r3
 8009584:	f000 f8e0 	bl	8009748 <__malloc_lock>
 8009588:	4a1d      	ldr	r2, [pc, #116]	@ (8009600 <_free_r+0x90>)
 800958a:	6813      	ldr	r3, [r2, #0]
 800958c:	b933      	cbnz	r3, 800959c <_free_r+0x2c>
 800958e:	6063      	str	r3, [r4, #4]
 8009590:	6014      	str	r4, [r2, #0]
 8009592:	4628      	mov	r0, r5
 8009594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009598:	f000 b8dc 	b.w	8009754 <__malloc_unlock>
 800959c:	42a3      	cmp	r3, r4
 800959e:	d908      	bls.n	80095b2 <_free_r+0x42>
 80095a0:	6820      	ldr	r0, [r4, #0]
 80095a2:	1821      	adds	r1, r4, r0
 80095a4:	428b      	cmp	r3, r1
 80095a6:	bf01      	itttt	eq
 80095a8:	6819      	ldreq	r1, [r3, #0]
 80095aa:	685b      	ldreq	r3, [r3, #4]
 80095ac:	1809      	addeq	r1, r1, r0
 80095ae:	6021      	streq	r1, [r4, #0]
 80095b0:	e7ed      	b.n	800958e <_free_r+0x1e>
 80095b2:	461a      	mov	r2, r3
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	b10b      	cbz	r3, 80095bc <_free_r+0x4c>
 80095b8:	42a3      	cmp	r3, r4
 80095ba:	d9fa      	bls.n	80095b2 <_free_r+0x42>
 80095bc:	6811      	ldr	r1, [r2, #0]
 80095be:	1850      	adds	r0, r2, r1
 80095c0:	42a0      	cmp	r0, r4
 80095c2:	d10b      	bne.n	80095dc <_free_r+0x6c>
 80095c4:	6820      	ldr	r0, [r4, #0]
 80095c6:	4401      	add	r1, r0
 80095c8:	1850      	adds	r0, r2, r1
 80095ca:	4283      	cmp	r3, r0
 80095cc:	6011      	str	r1, [r2, #0]
 80095ce:	d1e0      	bne.n	8009592 <_free_r+0x22>
 80095d0:	6818      	ldr	r0, [r3, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	6053      	str	r3, [r2, #4]
 80095d6:	4408      	add	r0, r1
 80095d8:	6010      	str	r0, [r2, #0]
 80095da:	e7da      	b.n	8009592 <_free_r+0x22>
 80095dc:	d902      	bls.n	80095e4 <_free_r+0x74>
 80095de:	230c      	movs	r3, #12
 80095e0:	602b      	str	r3, [r5, #0]
 80095e2:	e7d6      	b.n	8009592 <_free_r+0x22>
 80095e4:	6820      	ldr	r0, [r4, #0]
 80095e6:	1821      	adds	r1, r4, r0
 80095e8:	428b      	cmp	r3, r1
 80095ea:	bf04      	itt	eq
 80095ec:	6819      	ldreq	r1, [r3, #0]
 80095ee:	685b      	ldreq	r3, [r3, #4]
 80095f0:	6063      	str	r3, [r4, #4]
 80095f2:	bf04      	itt	eq
 80095f4:	1809      	addeq	r1, r1, r0
 80095f6:	6021      	streq	r1, [r4, #0]
 80095f8:	6054      	str	r4, [r2, #4]
 80095fa:	e7ca      	b.n	8009592 <_free_r+0x22>
 80095fc:	bd38      	pop	{r3, r4, r5, pc}
 80095fe:	bf00      	nop
 8009600:	20001468 	.word	0x20001468

08009604 <sbrk_aligned>:
 8009604:	b570      	push	{r4, r5, r6, lr}
 8009606:	4e0f      	ldr	r6, [pc, #60]	@ (8009644 <sbrk_aligned+0x40>)
 8009608:	460c      	mov	r4, r1
 800960a:	6831      	ldr	r1, [r6, #0]
 800960c:	4605      	mov	r5, r0
 800960e:	b911      	cbnz	r1, 8009616 <sbrk_aligned+0x12>
 8009610:	f000 fba4 	bl	8009d5c <_sbrk_r>
 8009614:	6030      	str	r0, [r6, #0]
 8009616:	4621      	mov	r1, r4
 8009618:	4628      	mov	r0, r5
 800961a:	f000 fb9f 	bl	8009d5c <_sbrk_r>
 800961e:	1c43      	adds	r3, r0, #1
 8009620:	d103      	bne.n	800962a <sbrk_aligned+0x26>
 8009622:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009626:	4620      	mov	r0, r4
 8009628:	bd70      	pop	{r4, r5, r6, pc}
 800962a:	1cc4      	adds	r4, r0, #3
 800962c:	f024 0403 	bic.w	r4, r4, #3
 8009630:	42a0      	cmp	r0, r4
 8009632:	d0f8      	beq.n	8009626 <sbrk_aligned+0x22>
 8009634:	1a21      	subs	r1, r4, r0
 8009636:	4628      	mov	r0, r5
 8009638:	f000 fb90 	bl	8009d5c <_sbrk_r>
 800963c:	3001      	adds	r0, #1
 800963e:	d1f2      	bne.n	8009626 <sbrk_aligned+0x22>
 8009640:	e7ef      	b.n	8009622 <sbrk_aligned+0x1e>
 8009642:	bf00      	nop
 8009644:	20001464 	.word	0x20001464

08009648 <_malloc_r>:
 8009648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800964c:	1ccd      	adds	r5, r1, #3
 800964e:	f025 0503 	bic.w	r5, r5, #3
 8009652:	3508      	adds	r5, #8
 8009654:	2d0c      	cmp	r5, #12
 8009656:	bf38      	it	cc
 8009658:	250c      	movcc	r5, #12
 800965a:	2d00      	cmp	r5, #0
 800965c:	4606      	mov	r6, r0
 800965e:	db01      	blt.n	8009664 <_malloc_r+0x1c>
 8009660:	42a9      	cmp	r1, r5
 8009662:	d904      	bls.n	800966e <_malloc_r+0x26>
 8009664:	230c      	movs	r3, #12
 8009666:	6033      	str	r3, [r6, #0]
 8009668:	2000      	movs	r0, #0
 800966a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800966e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009744 <_malloc_r+0xfc>
 8009672:	f000 f869 	bl	8009748 <__malloc_lock>
 8009676:	f8d8 3000 	ldr.w	r3, [r8]
 800967a:	461c      	mov	r4, r3
 800967c:	bb44      	cbnz	r4, 80096d0 <_malloc_r+0x88>
 800967e:	4629      	mov	r1, r5
 8009680:	4630      	mov	r0, r6
 8009682:	f7ff ffbf 	bl	8009604 <sbrk_aligned>
 8009686:	1c43      	adds	r3, r0, #1
 8009688:	4604      	mov	r4, r0
 800968a:	d158      	bne.n	800973e <_malloc_r+0xf6>
 800968c:	f8d8 4000 	ldr.w	r4, [r8]
 8009690:	4627      	mov	r7, r4
 8009692:	2f00      	cmp	r7, #0
 8009694:	d143      	bne.n	800971e <_malloc_r+0xd6>
 8009696:	2c00      	cmp	r4, #0
 8009698:	d04b      	beq.n	8009732 <_malloc_r+0xea>
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	4639      	mov	r1, r7
 800969e:	4630      	mov	r0, r6
 80096a0:	eb04 0903 	add.w	r9, r4, r3
 80096a4:	f000 fb5a 	bl	8009d5c <_sbrk_r>
 80096a8:	4581      	cmp	r9, r0
 80096aa:	d142      	bne.n	8009732 <_malloc_r+0xea>
 80096ac:	6821      	ldr	r1, [r4, #0]
 80096ae:	1a6d      	subs	r5, r5, r1
 80096b0:	4629      	mov	r1, r5
 80096b2:	4630      	mov	r0, r6
 80096b4:	f7ff ffa6 	bl	8009604 <sbrk_aligned>
 80096b8:	3001      	adds	r0, #1
 80096ba:	d03a      	beq.n	8009732 <_malloc_r+0xea>
 80096bc:	6823      	ldr	r3, [r4, #0]
 80096be:	442b      	add	r3, r5
 80096c0:	6023      	str	r3, [r4, #0]
 80096c2:	f8d8 3000 	ldr.w	r3, [r8]
 80096c6:	685a      	ldr	r2, [r3, #4]
 80096c8:	bb62      	cbnz	r2, 8009724 <_malloc_r+0xdc>
 80096ca:	f8c8 7000 	str.w	r7, [r8]
 80096ce:	e00f      	b.n	80096f0 <_malloc_r+0xa8>
 80096d0:	6822      	ldr	r2, [r4, #0]
 80096d2:	1b52      	subs	r2, r2, r5
 80096d4:	d420      	bmi.n	8009718 <_malloc_r+0xd0>
 80096d6:	2a0b      	cmp	r2, #11
 80096d8:	d917      	bls.n	800970a <_malloc_r+0xc2>
 80096da:	1961      	adds	r1, r4, r5
 80096dc:	42a3      	cmp	r3, r4
 80096de:	6025      	str	r5, [r4, #0]
 80096e0:	bf18      	it	ne
 80096e2:	6059      	strne	r1, [r3, #4]
 80096e4:	6863      	ldr	r3, [r4, #4]
 80096e6:	bf08      	it	eq
 80096e8:	f8c8 1000 	streq.w	r1, [r8]
 80096ec:	5162      	str	r2, [r4, r5]
 80096ee:	604b      	str	r3, [r1, #4]
 80096f0:	4630      	mov	r0, r6
 80096f2:	f000 f82f 	bl	8009754 <__malloc_unlock>
 80096f6:	f104 000b 	add.w	r0, r4, #11
 80096fa:	1d23      	adds	r3, r4, #4
 80096fc:	f020 0007 	bic.w	r0, r0, #7
 8009700:	1ac2      	subs	r2, r0, r3
 8009702:	bf1c      	itt	ne
 8009704:	1a1b      	subne	r3, r3, r0
 8009706:	50a3      	strne	r3, [r4, r2]
 8009708:	e7af      	b.n	800966a <_malloc_r+0x22>
 800970a:	6862      	ldr	r2, [r4, #4]
 800970c:	42a3      	cmp	r3, r4
 800970e:	bf0c      	ite	eq
 8009710:	f8c8 2000 	streq.w	r2, [r8]
 8009714:	605a      	strne	r2, [r3, #4]
 8009716:	e7eb      	b.n	80096f0 <_malloc_r+0xa8>
 8009718:	4623      	mov	r3, r4
 800971a:	6864      	ldr	r4, [r4, #4]
 800971c:	e7ae      	b.n	800967c <_malloc_r+0x34>
 800971e:	463c      	mov	r4, r7
 8009720:	687f      	ldr	r7, [r7, #4]
 8009722:	e7b6      	b.n	8009692 <_malloc_r+0x4a>
 8009724:	461a      	mov	r2, r3
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	42a3      	cmp	r3, r4
 800972a:	d1fb      	bne.n	8009724 <_malloc_r+0xdc>
 800972c:	2300      	movs	r3, #0
 800972e:	6053      	str	r3, [r2, #4]
 8009730:	e7de      	b.n	80096f0 <_malloc_r+0xa8>
 8009732:	230c      	movs	r3, #12
 8009734:	6033      	str	r3, [r6, #0]
 8009736:	4630      	mov	r0, r6
 8009738:	f000 f80c 	bl	8009754 <__malloc_unlock>
 800973c:	e794      	b.n	8009668 <_malloc_r+0x20>
 800973e:	6005      	str	r5, [r0, #0]
 8009740:	e7d6      	b.n	80096f0 <_malloc_r+0xa8>
 8009742:	bf00      	nop
 8009744:	20001468 	.word	0x20001468

08009748 <__malloc_lock>:
 8009748:	4801      	ldr	r0, [pc, #4]	@ (8009750 <__malloc_lock+0x8>)
 800974a:	f7ff bf01 	b.w	8009550 <__retarget_lock_acquire_recursive>
 800974e:	bf00      	nop
 8009750:	20001460 	.word	0x20001460

08009754 <__malloc_unlock>:
 8009754:	4801      	ldr	r0, [pc, #4]	@ (800975c <__malloc_unlock+0x8>)
 8009756:	f7ff befc 	b.w	8009552 <__retarget_lock_release_recursive>
 800975a:	bf00      	nop
 800975c:	20001460 	.word	0x20001460

08009760 <__ssputs_r>:
 8009760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009764:	688e      	ldr	r6, [r1, #8]
 8009766:	461f      	mov	r7, r3
 8009768:	42be      	cmp	r6, r7
 800976a:	680b      	ldr	r3, [r1, #0]
 800976c:	4682      	mov	sl, r0
 800976e:	460c      	mov	r4, r1
 8009770:	4690      	mov	r8, r2
 8009772:	d82d      	bhi.n	80097d0 <__ssputs_r+0x70>
 8009774:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009778:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800977c:	d026      	beq.n	80097cc <__ssputs_r+0x6c>
 800977e:	6965      	ldr	r5, [r4, #20]
 8009780:	6909      	ldr	r1, [r1, #16]
 8009782:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009786:	eba3 0901 	sub.w	r9, r3, r1
 800978a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800978e:	1c7b      	adds	r3, r7, #1
 8009790:	444b      	add	r3, r9
 8009792:	106d      	asrs	r5, r5, #1
 8009794:	429d      	cmp	r5, r3
 8009796:	bf38      	it	cc
 8009798:	461d      	movcc	r5, r3
 800979a:	0553      	lsls	r3, r2, #21
 800979c:	d527      	bpl.n	80097ee <__ssputs_r+0x8e>
 800979e:	4629      	mov	r1, r5
 80097a0:	f7ff ff52 	bl	8009648 <_malloc_r>
 80097a4:	4606      	mov	r6, r0
 80097a6:	b360      	cbz	r0, 8009802 <__ssputs_r+0xa2>
 80097a8:	6921      	ldr	r1, [r4, #16]
 80097aa:	464a      	mov	r2, r9
 80097ac:	f7ff fed2 	bl	8009554 <memcpy>
 80097b0:	89a3      	ldrh	r3, [r4, #12]
 80097b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80097b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097ba:	81a3      	strh	r3, [r4, #12]
 80097bc:	6126      	str	r6, [r4, #16]
 80097be:	6165      	str	r5, [r4, #20]
 80097c0:	444e      	add	r6, r9
 80097c2:	eba5 0509 	sub.w	r5, r5, r9
 80097c6:	6026      	str	r6, [r4, #0]
 80097c8:	60a5      	str	r5, [r4, #8]
 80097ca:	463e      	mov	r6, r7
 80097cc:	42be      	cmp	r6, r7
 80097ce:	d900      	bls.n	80097d2 <__ssputs_r+0x72>
 80097d0:	463e      	mov	r6, r7
 80097d2:	6820      	ldr	r0, [r4, #0]
 80097d4:	4632      	mov	r2, r6
 80097d6:	4641      	mov	r1, r8
 80097d8:	f000 faa6 	bl	8009d28 <memmove>
 80097dc:	68a3      	ldr	r3, [r4, #8]
 80097de:	1b9b      	subs	r3, r3, r6
 80097e0:	60a3      	str	r3, [r4, #8]
 80097e2:	6823      	ldr	r3, [r4, #0]
 80097e4:	4433      	add	r3, r6
 80097e6:	6023      	str	r3, [r4, #0]
 80097e8:	2000      	movs	r0, #0
 80097ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ee:	462a      	mov	r2, r5
 80097f0:	f000 fac4 	bl	8009d7c <_realloc_r>
 80097f4:	4606      	mov	r6, r0
 80097f6:	2800      	cmp	r0, #0
 80097f8:	d1e0      	bne.n	80097bc <__ssputs_r+0x5c>
 80097fa:	6921      	ldr	r1, [r4, #16]
 80097fc:	4650      	mov	r0, sl
 80097fe:	f7ff feb7 	bl	8009570 <_free_r>
 8009802:	230c      	movs	r3, #12
 8009804:	f8ca 3000 	str.w	r3, [sl]
 8009808:	89a3      	ldrh	r3, [r4, #12]
 800980a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800980e:	81a3      	strh	r3, [r4, #12]
 8009810:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009814:	e7e9      	b.n	80097ea <__ssputs_r+0x8a>
	...

08009818 <_svfiprintf_r>:
 8009818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981c:	4698      	mov	r8, r3
 800981e:	898b      	ldrh	r3, [r1, #12]
 8009820:	061b      	lsls	r3, r3, #24
 8009822:	b09d      	sub	sp, #116	@ 0x74
 8009824:	4607      	mov	r7, r0
 8009826:	460d      	mov	r5, r1
 8009828:	4614      	mov	r4, r2
 800982a:	d510      	bpl.n	800984e <_svfiprintf_r+0x36>
 800982c:	690b      	ldr	r3, [r1, #16]
 800982e:	b973      	cbnz	r3, 800984e <_svfiprintf_r+0x36>
 8009830:	2140      	movs	r1, #64	@ 0x40
 8009832:	f7ff ff09 	bl	8009648 <_malloc_r>
 8009836:	6028      	str	r0, [r5, #0]
 8009838:	6128      	str	r0, [r5, #16]
 800983a:	b930      	cbnz	r0, 800984a <_svfiprintf_r+0x32>
 800983c:	230c      	movs	r3, #12
 800983e:	603b      	str	r3, [r7, #0]
 8009840:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009844:	b01d      	add	sp, #116	@ 0x74
 8009846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984a:	2340      	movs	r3, #64	@ 0x40
 800984c:	616b      	str	r3, [r5, #20]
 800984e:	2300      	movs	r3, #0
 8009850:	9309      	str	r3, [sp, #36]	@ 0x24
 8009852:	2320      	movs	r3, #32
 8009854:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009858:	f8cd 800c 	str.w	r8, [sp, #12]
 800985c:	2330      	movs	r3, #48	@ 0x30
 800985e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80099fc <_svfiprintf_r+0x1e4>
 8009862:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009866:	f04f 0901 	mov.w	r9, #1
 800986a:	4623      	mov	r3, r4
 800986c:	469a      	mov	sl, r3
 800986e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009872:	b10a      	cbz	r2, 8009878 <_svfiprintf_r+0x60>
 8009874:	2a25      	cmp	r2, #37	@ 0x25
 8009876:	d1f9      	bne.n	800986c <_svfiprintf_r+0x54>
 8009878:	ebba 0b04 	subs.w	fp, sl, r4
 800987c:	d00b      	beq.n	8009896 <_svfiprintf_r+0x7e>
 800987e:	465b      	mov	r3, fp
 8009880:	4622      	mov	r2, r4
 8009882:	4629      	mov	r1, r5
 8009884:	4638      	mov	r0, r7
 8009886:	f7ff ff6b 	bl	8009760 <__ssputs_r>
 800988a:	3001      	adds	r0, #1
 800988c:	f000 80a7 	beq.w	80099de <_svfiprintf_r+0x1c6>
 8009890:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009892:	445a      	add	r2, fp
 8009894:	9209      	str	r2, [sp, #36]	@ 0x24
 8009896:	f89a 3000 	ldrb.w	r3, [sl]
 800989a:	2b00      	cmp	r3, #0
 800989c:	f000 809f 	beq.w	80099de <_svfiprintf_r+0x1c6>
 80098a0:	2300      	movs	r3, #0
 80098a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80098a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098aa:	f10a 0a01 	add.w	sl, sl, #1
 80098ae:	9304      	str	r3, [sp, #16]
 80098b0:	9307      	str	r3, [sp, #28]
 80098b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80098b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80098b8:	4654      	mov	r4, sl
 80098ba:	2205      	movs	r2, #5
 80098bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c0:	484e      	ldr	r0, [pc, #312]	@ (80099fc <_svfiprintf_r+0x1e4>)
 80098c2:	f7f6 fc85 	bl	80001d0 <memchr>
 80098c6:	9a04      	ldr	r2, [sp, #16]
 80098c8:	b9d8      	cbnz	r0, 8009902 <_svfiprintf_r+0xea>
 80098ca:	06d0      	lsls	r0, r2, #27
 80098cc:	bf44      	itt	mi
 80098ce:	2320      	movmi	r3, #32
 80098d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098d4:	0711      	lsls	r1, r2, #28
 80098d6:	bf44      	itt	mi
 80098d8:	232b      	movmi	r3, #43	@ 0x2b
 80098da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098de:	f89a 3000 	ldrb.w	r3, [sl]
 80098e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80098e4:	d015      	beq.n	8009912 <_svfiprintf_r+0xfa>
 80098e6:	9a07      	ldr	r2, [sp, #28]
 80098e8:	4654      	mov	r4, sl
 80098ea:	2000      	movs	r0, #0
 80098ec:	f04f 0c0a 	mov.w	ip, #10
 80098f0:	4621      	mov	r1, r4
 80098f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098f6:	3b30      	subs	r3, #48	@ 0x30
 80098f8:	2b09      	cmp	r3, #9
 80098fa:	d94b      	bls.n	8009994 <_svfiprintf_r+0x17c>
 80098fc:	b1b0      	cbz	r0, 800992c <_svfiprintf_r+0x114>
 80098fe:	9207      	str	r2, [sp, #28]
 8009900:	e014      	b.n	800992c <_svfiprintf_r+0x114>
 8009902:	eba0 0308 	sub.w	r3, r0, r8
 8009906:	fa09 f303 	lsl.w	r3, r9, r3
 800990a:	4313      	orrs	r3, r2
 800990c:	9304      	str	r3, [sp, #16]
 800990e:	46a2      	mov	sl, r4
 8009910:	e7d2      	b.n	80098b8 <_svfiprintf_r+0xa0>
 8009912:	9b03      	ldr	r3, [sp, #12]
 8009914:	1d19      	adds	r1, r3, #4
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	9103      	str	r1, [sp, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	bfbb      	ittet	lt
 800991e:	425b      	neglt	r3, r3
 8009920:	f042 0202 	orrlt.w	r2, r2, #2
 8009924:	9307      	strge	r3, [sp, #28]
 8009926:	9307      	strlt	r3, [sp, #28]
 8009928:	bfb8      	it	lt
 800992a:	9204      	strlt	r2, [sp, #16]
 800992c:	7823      	ldrb	r3, [r4, #0]
 800992e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009930:	d10a      	bne.n	8009948 <_svfiprintf_r+0x130>
 8009932:	7863      	ldrb	r3, [r4, #1]
 8009934:	2b2a      	cmp	r3, #42	@ 0x2a
 8009936:	d132      	bne.n	800999e <_svfiprintf_r+0x186>
 8009938:	9b03      	ldr	r3, [sp, #12]
 800993a:	1d1a      	adds	r2, r3, #4
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	9203      	str	r2, [sp, #12]
 8009940:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009944:	3402      	adds	r4, #2
 8009946:	9305      	str	r3, [sp, #20]
 8009948:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009a0c <_svfiprintf_r+0x1f4>
 800994c:	7821      	ldrb	r1, [r4, #0]
 800994e:	2203      	movs	r2, #3
 8009950:	4650      	mov	r0, sl
 8009952:	f7f6 fc3d 	bl	80001d0 <memchr>
 8009956:	b138      	cbz	r0, 8009968 <_svfiprintf_r+0x150>
 8009958:	9b04      	ldr	r3, [sp, #16]
 800995a:	eba0 000a 	sub.w	r0, r0, sl
 800995e:	2240      	movs	r2, #64	@ 0x40
 8009960:	4082      	lsls	r2, r0
 8009962:	4313      	orrs	r3, r2
 8009964:	3401      	adds	r4, #1
 8009966:	9304      	str	r3, [sp, #16]
 8009968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800996c:	4824      	ldr	r0, [pc, #144]	@ (8009a00 <_svfiprintf_r+0x1e8>)
 800996e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009972:	2206      	movs	r2, #6
 8009974:	f7f6 fc2c 	bl	80001d0 <memchr>
 8009978:	2800      	cmp	r0, #0
 800997a:	d036      	beq.n	80099ea <_svfiprintf_r+0x1d2>
 800997c:	4b21      	ldr	r3, [pc, #132]	@ (8009a04 <_svfiprintf_r+0x1ec>)
 800997e:	bb1b      	cbnz	r3, 80099c8 <_svfiprintf_r+0x1b0>
 8009980:	9b03      	ldr	r3, [sp, #12]
 8009982:	3307      	adds	r3, #7
 8009984:	f023 0307 	bic.w	r3, r3, #7
 8009988:	3308      	adds	r3, #8
 800998a:	9303      	str	r3, [sp, #12]
 800998c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800998e:	4433      	add	r3, r6
 8009990:	9309      	str	r3, [sp, #36]	@ 0x24
 8009992:	e76a      	b.n	800986a <_svfiprintf_r+0x52>
 8009994:	fb0c 3202 	mla	r2, ip, r2, r3
 8009998:	460c      	mov	r4, r1
 800999a:	2001      	movs	r0, #1
 800999c:	e7a8      	b.n	80098f0 <_svfiprintf_r+0xd8>
 800999e:	2300      	movs	r3, #0
 80099a0:	3401      	adds	r4, #1
 80099a2:	9305      	str	r3, [sp, #20]
 80099a4:	4619      	mov	r1, r3
 80099a6:	f04f 0c0a 	mov.w	ip, #10
 80099aa:	4620      	mov	r0, r4
 80099ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099b0:	3a30      	subs	r2, #48	@ 0x30
 80099b2:	2a09      	cmp	r2, #9
 80099b4:	d903      	bls.n	80099be <_svfiprintf_r+0x1a6>
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d0c6      	beq.n	8009948 <_svfiprintf_r+0x130>
 80099ba:	9105      	str	r1, [sp, #20]
 80099bc:	e7c4      	b.n	8009948 <_svfiprintf_r+0x130>
 80099be:	fb0c 2101 	mla	r1, ip, r1, r2
 80099c2:	4604      	mov	r4, r0
 80099c4:	2301      	movs	r3, #1
 80099c6:	e7f0      	b.n	80099aa <_svfiprintf_r+0x192>
 80099c8:	ab03      	add	r3, sp, #12
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	462a      	mov	r2, r5
 80099ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009a08 <_svfiprintf_r+0x1f0>)
 80099d0:	a904      	add	r1, sp, #16
 80099d2:	4638      	mov	r0, r7
 80099d4:	f3af 8000 	nop.w
 80099d8:	1c42      	adds	r2, r0, #1
 80099da:	4606      	mov	r6, r0
 80099dc:	d1d6      	bne.n	800998c <_svfiprintf_r+0x174>
 80099de:	89ab      	ldrh	r3, [r5, #12]
 80099e0:	065b      	lsls	r3, r3, #25
 80099e2:	f53f af2d 	bmi.w	8009840 <_svfiprintf_r+0x28>
 80099e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099e8:	e72c      	b.n	8009844 <_svfiprintf_r+0x2c>
 80099ea:	ab03      	add	r3, sp, #12
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	462a      	mov	r2, r5
 80099f0:	4b05      	ldr	r3, [pc, #20]	@ (8009a08 <_svfiprintf_r+0x1f0>)
 80099f2:	a904      	add	r1, sp, #16
 80099f4:	4638      	mov	r0, r7
 80099f6:	f000 f879 	bl	8009aec <_printf_i>
 80099fa:	e7ed      	b.n	80099d8 <_svfiprintf_r+0x1c0>
 80099fc:	0800a0e4 	.word	0x0800a0e4
 8009a00:	0800a0ee 	.word	0x0800a0ee
 8009a04:	00000000 	.word	0x00000000
 8009a08:	08009761 	.word	0x08009761
 8009a0c:	0800a0ea 	.word	0x0800a0ea

08009a10 <_printf_common>:
 8009a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a14:	4616      	mov	r6, r2
 8009a16:	4698      	mov	r8, r3
 8009a18:	688a      	ldr	r2, [r1, #8]
 8009a1a:	690b      	ldr	r3, [r1, #16]
 8009a1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a20:	4293      	cmp	r3, r2
 8009a22:	bfb8      	it	lt
 8009a24:	4613      	movlt	r3, r2
 8009a26:	6033      	str	r3, [r6, #0]
 8009a28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a2c:	4607      	mov	r7, r0
 8009a2e:	460c      	mov	r4, r1
 8009a30:	b10a      	cbz	r2, 8009a36 <_printf_common+0x26>
 8009a32:	3301      	adds	r3, #1
 8009a34:	6033      	str	r3, [r6, #0]
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	0699      	lsls	r1, r3, #26
 8009a3a:	bf42      	ittt	mi
 8009a3c:	6833      	ldrmi	r3, [r6, #0]
 8009a3e:	3302      	addmi	r3, #2
 8009a40:	6033      	strmi	r3, [r6, #0]
 8009a42:	6825      	ldr	r5, [r4, #0]
 8009a44:	f015 0506 	ands.w	r5, r5, #6
 8009a48:	d106      	bne.n	8009a58 <_printf_common+0x48>
 8009a4a:	f104 0a19 	add.w	sl, r4, #25
 8009a4e:	68e3      	ldr	r3, [r4, #12]
 8009a50:	6832      	ldr	r2, [r6, #0]
 8009a52:	1a9b      	subs	r3, r3, r2
 8009a54:	42ab      	cmp	r3, r5
 8009a56:	dc26      	bgt.n	8009aa6 <_printf_common+0x96>
 8009a58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009a5c:	6822      	ldr	r2, [r4, #0]
 8009a5e:	3b00      	subs	r3, #0
 8009a60:	bf18      	it	ne
 8009a62:	2301      	movne	r3, #1
 8009a64:	0692      	lsls	r2, r2, #26
 8009a66:	d42b      	bmi.n	8009ac0 <_printf_common+0xb0>
 8009a68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009a6c:	4641      	mov	r1, r8
 8009a6e:	4638      	mov	r0, r7
 8009a70:	47c8      	blx	r9
 8009a72:	3001      	adds	r0, #1
 8009a74:	d01e      	beq.n	8009ab4 <_printf_common+0xa4>
 8009a76:	6823      	ldr	r3, [r4, #0]
 8009a78:	6922      	ldr	r2, [r4, #16]
 8009a7a:	f003 0306 	and.w	r3, r3, #6
 8009a7e:	2b04      	cmp	r3, #4
 8009a80:	bf02      	ittt	eq
 8009a82:	68e5      	ldreq	r5, [r4, #12]
 8009a84:	6833      	ldreq	r3, [r6, #0]
 8009a86:	1aed      	subeq	r5, r5, r3
 8009a88:	68a3      	ldr	r3, [r4, #8]
 8009a8a:	bf0c      	ite	eq
 8009a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a90:	2500      	movne	r5, #0
 8009a92:	4293      	cmp	r3, r2
 8009a94:	bfc4      	itt	gt
 8009a96:	1a9b      	subgt	r3, r3, r2
 8009a98:	18ed      	addgt	r5, r5, r3
 8009a9a:	2600      	movs	r6, #0
 8009a9c:	341a      	adds	r4, #26
 8009a9e:	42b5      	cmp	r5, r6
 8009aa0:	d11a      	bne.n	8009ad8 <_printf_common+0xc8>
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	e008      	b.n	8009ab8 <_printf_common+0xa8>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	4652      	mov	r2, sl
 8009aaa:	4641      	mov	r1, r8
 8009aac:	4638      	mov	r0, r7
 8009aae:	47c8      	blx	r9
 8009ab0:	3001      	adds	r0, #1
 8009ab2:	d103      	bne.n	8009abc <_printf_common+0xac>
 8009ab4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009abc:	3501      	adds	r5, #1
 8009abe:	e7c6      	b.n	8009a4e <_printf_common+0x3e>
 8009ac0:	18e1      	adds	r1, r4, r3
 8009ac2:	1c5a      	adds	r2, r3, #1
 8009ac4:	2030      	movs	r0, #48	@ 0x30
 8009ac6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009aca:	4422      	add	r2, r4
 8009acc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ad0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ad4:	3302      	adds	r3, #2
 8009ad6:	e7c7      	b.n	8009a68 <_printf_common+0x58>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	4622      	mov	r2, r4
 8009adc:	4641      	mov	r1, r8
 8009ade:	4638      	mov	r0, r7
 8009ae0:	47c8      	blx	r9
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	d0e6      	beq.n	8009ab4 <_printf_common+0xa4>
 8009ae6:	3601      	adds	r6, #1
 8009ae8:	e7d9      	b.n	8009a9e <_printf_common+0x8e>
	...

08009aec <_printf_i>:
 8009aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009af0:	7e0f      	ldrb	r7, [r1, #24]
 8009af2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009af4:	2f78      	cmp	r7, #120	@ 0x78
 8009af6:	4691      	mov	r9, r2
 8009af8:	4680      	mov	r8, r0
 8009afa:	460c      	mov	r4, r1
 8009afc:	469a      	mov	sl, r3
 8009afe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009b02:	d807      	bhi.n	8009b14 <_printf_i+0x28>
 8009b04:	2f62      	cmp	r7, #98	@ 0x62
 8009b06:	d80a      	bhi.n	8009b1e <_printf_i+0x32>
 8009b08:	2f00      	cmp	r7, #0
 8009b0a:	f000 80d1 	beq.w	8009cb0 <_printf_i+0x1c4>
 8009b0e:	2f58      	cmp	r7, #88	@ 0x58
 8009b10:	f000 80b8 	beq.w	8009c84 <_printf_i+0x198>
 8009b14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009b1c:	e03a      	b.n	8009b94 <_printf_i+0xa8>
 8009b1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009b22:	2b15      	cmp	r3, #21
 8009b24:	d8f6      	bhi.n	8009b14 <_printf_i+0x28>
 8009b26:	a101      	add	r1, pc, #4	@ (adr r1, 8009b2c <_printf_i+0x40>)
 8009b28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b2c:	08009b85 	.word	0x08009b85
 8009b30:	08009b99 	.word	0x08009b99
 8009b34:	08009b15 	.word	0x08009b15
 8009b38:	08009b15 	.word	0x08009b15
 8009b3c:	08009b15 	.word	0x08009b15
 8009b40:	08009b15 	.word	0x08009b15
 8009b44:	08009b99 	.word	0x08009b99
 8009b48:	08009b15 	.word	0x08009b15
 8009b4c:	08009b15 	.word	0x08009b15
 8009b50:	08009b15 	.word	0x08009b15
 8009b54:	08009b15 	.word	0x08009b15
 8009b58:	08009c97 	.word	0x08009c97
 8009b5c:	08009bc3 	.word	0x08009bc3
 8009b60:	08009c51 	.word	0x08009c51
 8009b64:	08009b15 	.word	0x08009b15
 8009b68:	08009b15 	.word	0x08009b15
 8009b6c:	08009cb9 	.word	0x08009cb9
 8009b70:	08009b15 	.word	0x08009b15
 8009b74:	08009bc3 	.word	0x08009bc3
 8009b78:	08009b15 	.word	0x08009b15
 8009b7c:	08009b15 	.word	0x08009b15
 8009b80:	08009c59 	.word	0x08009c59
 8009b84:	6833      	ldr	r3, [r6, #0]
 8009b86:	1d1a      	adds	r2, r3, #4
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	6032      	str	r2, [r6, #0]
 8009b8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b94:	2301      	movs	r3, #1
 8009b96:	e09c      	b.n	8009cd2 <_printf_i+0x1e6>
 8009b98:	6833      	ldr	r3, [r6, #0]
 8009b9a:	6820      	ldr	r0, [r4, #0]
 8009b9c:	1d19      	adds	r1, r3, #4
 8009b9e:	6031      	str	r1, [r6, #0]
 8009ba0:	0606      	lsls	r6, r0, #24
 8009ba2:	d501      	bpl.n	8009ba8 <_printf_i+0xbc>
 8009ba4:	681d      	ldr	r5, [r3, #0]
 8009ba6:	e003      	b.n	8009bb0 <_printf_i+0xc4>
 8009ba8:	0645      	lsls	r5, r0, #25
 8009baa:	d5fb      	bpl.n	8009ba4 <_printf_i+0xb8>
 8009bac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009bb0:	2d00      	cmp	r5, #0
 8009bb2:	da03      	bge.n	8009bbc <_printf_i+0xd0>
 8009bb4:	232d      	movs	r3, #45	@ 0x2d
 8009bb6:	426d      	negs	r5, r5
 8009bb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bbc:	4858      	ldr	r0, [pc, #352]	@ (8009d20 <_printf_i+0x234>)
 8009bbe:	230a      	movs	r3, #10
 8009bc0:	e011      	b.n	8009be6 <_printf_i+0xfa>
 8009bc2:	6821      	ldr	r1, [r4, #0]
 8009bc4:	6833      	ldr	r3, [r6, #0]
 8009bc6:	0608      	lsls	r0, r1, #24
 8009bc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8009bcc:	d402      	bmi.n	8009bd4 <_printf_i+0xe8>
 8009bce:	0649      	lsls	r1, r1, #25
 8009bd0:	bf48      	it	mi
 8009bd2:	b2ad      	uxthmi	r5, r5
 8009bd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8009bd6:	4852      	ldr	r0, [pc, #328]	@ (8009d20 <_printf_i+0x234>)
 8009bd8:	6033      	str	r3, [r6, #0]
 8009bda:	bf14      	ite	ne
 8009bdc:	230a      	movne	r3, #10
 8009bde:	2308      	moveq	r3, #8
 8009be0:	2100      	movs	r1, #0
 8009be2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009be6:	6866      	ldr	r6, [r4, #4]
 8009be8:	60a6      	str	r6, [r4, #8]
 8009bea:	2e00      	cmp	r6, #0
 8009bec:	db05      	blt.n	8009bfa <_printf_i+0x10e>
 8009bee:	6821      	ldr	r1, [r4, #0]
 8009bf0:	432e      	orrs	r6, r5
 8009bf2:	f021 0104 	bic.w	r1, r1, #4
 8009bf6:	6021      	str	r1, [r4, #0]
 8009bf8:	d04b      	beq.n	8009c92 <_printf_i+0x1a6>
 8009bfa:	4616      	mov	r6, r2
 8009bfc:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c00:	fb03 5711 	mls	r7, r3, r1, r5
 8009c04:	5dc7      	ldrb	r7, [r0, r7]
 8009c06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c0a:	462f      	mov	r7, r5
 8009c0c:	42bb      	cmp	r3, r7
 8009c0e:	460d      	mov	r5, r1
 8009c10:	d9f4      	bls.n	8009bfc <_printf_i+0x110>
 8009c12:	2b08      	cmp	r3, #8
 8009c14:	d10b      	bne.n	8009c2e <_printf_i+0x142>
 8009c16:	6823      	ldr	r3, [r4, #0]
 8009c18:	07df      	lsls	r7, r3, #31
 8009c1a:	d508      	bpl.n	8009c2e <_printf_i+0x142>
 8009c1c:	6923      	ldr	r3, [r4, #16]
 8009c1e:	6861      	ldr	r1, [r4, #4]
 8009c20:	4299      	cmp	r1, r3
 8009c22:	bfde      	ittt	le
 8009c24:	2330      	movle	r3, #48	@ 0x30
 8009c26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c2a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009c2e:	1b92      	subs	r2, r2, r6
 8009c30:	6122      	str	r2, [r4, #16]
 8009c32:	f8cd a000 	str.w	sl, [sp]
 8009c36:	464b      	mov	r3, r9
 8009c38:	aa03      	add	r2, sp, #12
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	4640      	mov	r0, r8
 8009c3e:	f7ff fee7 	bl	8009a10 <_printf_common>
 8009c42:	3001      	adds	r0, #1
 8009c44:	d14a      	bne.n	8009cdc <_printf_i+0x1f0>
 8009c46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c4a:	b004      	add	sp, #16
 8009c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c50:	6823      	ldr	r3, [r4, #0]
 8009c52:	f043 0320 	orr.w	r3, r3, #32
 8009c56:	6023      	str	r3, [r4, #0]
 8009c58:	4832      	ldr	r0, [pc, #200]	@ (8009d24 <_printf_i+0x238>)
 8009c5a:	2778      	movs	r7, #120	@ 0x78
 8009c5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	6831      	ldr	r1, [r6, #0]
 8009c64:	061f      	lsls	r7, r3, #24
 8009c66:	f851 5b04 	ldr.w	r5, [r1], #4
 8009c6a:	d402      	bmi.n	8009c72 <_printf_i+0x186>
 8009c6c:	065f      	lsls	r7, r3, #25
 8009c6e:	bf48      	it	mi
 8009c70:	b2ad      	uxthmi	r5, r5
 8009c72:	6031      	str	r1, [r6, #0]
 8009c74:	07d9      	lsls	r1, r3, #31
 8009c76:	bf44      	itt	mi
 8009c78:	f043 0320 	orrmi.w	r3, r3, #32
 8009c7c:	6023      	strmi	r3, [r4, #0]
 8009c7e:	b11d      	cbz	r5, 8009c88 <_printf_i+0x19c>
 8009c80:	2310      	movs	r3, #16
 8009c82:	e7ad      	b.n	8009be0 <_printf_i+0xf4>
 8009c84:	4826      	ldr	r0, [pc, #152]	@ (8009d20 <_printf_i+0x234>)
 8009c86:	e7e9      	b.n	8009c5c <_printf_i+0x170>
 8009c88:	6823      	ldr	r3, [r4, #0]
 8009c8a:	f023 0320 	bic.w	r3, r3, #32
 8009c8e:	6023      	str	r3, [r4, #0]
 8009c90:	e7f6      	b.n	8009c80 <_printf_i+0x194>
 8009c92:	4616      	mov	r6, r2
 8009c94:	e7bd      	b.n	8009c12 <_printf_i+0x126>
 8009c96:	6833      	ldr	r3, [r6, #0]
 8009c98:	6825      	ldr	r5, [r4, #0]
 8009c9a:	6961      	ldr	r1, [r4, #20]
 8009c9c:	1d18      	adds	r0, r3, #4
 8009c9e:	6030      	str	r0, [r6, #0]
 8009ca0:	062e      	lsls	r6, r5, #24
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	d501      	bpl.n	8009caa <_printf_i+0x1be>
 8009ca6:	6019      	str	r1, [r3, #0]
 8009ca8:	e002      	b.n	8009cb0 <_printf_i+0x1c4>
 8009caa:	0668      	lsls	r0, r5, #25
 8009cac:	d5fb      	bpl.n	8009ca6 <_printf_i+0x1ba>
 8009cae:	8019      	strh	r1, [r3, #0]
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	6123      	str	r3, [r4, #16]
 8009cb4:	4616      	mov	r6, r2
 8009cb6:	e7bc      	b.n	8009c32 <_printf_i+0x146>
 8009cb8:	6833      	ldr	r3, [r6, #0]
 8009cba:	1d1a      	adds	r2, r3, #4
 8009cbc:	6032      	str	r2, [r6, #0]
 8009cbe:	681e      	ldr	r6, [r3, #0]
 8009cc0:	6862      	ldr	r2, [r4, #4]
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	f7f6 fa83 	bl	80001d0 <memchr>
 8009cca:	b108      	cbz	r0, 8009cd0 <_printf_i+0x1e4>
 8009ccc:	1b80      	subs	r0, r0, r6
 8009cce:	6060      	str	r0, [r4, #4]
 8009cd0:	6863      	ldr	r3, [r4, #4]
 8009cd2:	6123      	str	r3, [r4, #16]
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cda:	e7aa      	b.n	8009c32 <_printf_i+0x146>
 8009cdc:	6923      	ldr	r3, [r4, #16]
 8009cde:	4632      	mov	r2, r6
 8009ce0:	4649      	mov	r1, r9
 8009ce2:	4640      	mov	r0, r8
 8009ce4:	47d0      	blx	sl
 8009ce6:	3001      	adds	r0, #1
 8009ce8:	d0ad      	beq.n	8009c46 <_printf_i+0x15a>
 8009cea:	6823      	ldr	r3, [r4, #0]
 8009cec:	079b      	lsls	r3, r3, #30
 8009cee:	d413      	bmi.n	8009d18 <_printf_i+0x22c>
 8009cf0:	68e0      	ldr	r0, [r4, #12]
 8009cf2:	9b03      	ldr	r3, [sp, #12]
 8009cf4:	4298      	cmp	r0, r3
 8009cf6:	bfb8      	it	lt
 8009cf8:	4618      	movlt	r0, r3
 8009cfa:	e7a6      	b.n	8009c4a <_printf_i+0x15e>
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	4632      	mov	r2, r6
 8009d00:	4649      	mov	r1, r9
 8009d02:	4640      	mov	r0, r8
 8009d04:	47d0      	blx	sl
 8009d06:	3001      	adds	r0, #1
 8009d08:	d09d      	beq.n	8009c46 <_printf_i+0x15a>
 8009d0a:	3501      	adds	r5, #1
 8009d0c:	68e3      	ldr	r3, [r4, #12]
 8009d0e:	9903      	ldr	r1, [sp, #12]
 8009d10:	1a5b      	subs	r3, r3, r1
 8009d12:	42ab      	cmp	r3, r5
 8009d14:	dcf2      	bgt.n	8009cfc <_printf_i+0x210>
 8009d16:	e7eb      	b.n	8009cf0 <_printf_i+0x204>
 8009d18:	2500      	movs	r5, #0
 8009d1a:	f104 0619 	add.w	r6, r4, #25
 8009d1e:	e7f5      	b.n	8009d0c <_printf_i+0x220>
 8009d20:	0800a0f5 	.word	0x0800a0f5
 8009d24:	0800a106 	.word	0x0800a106

08009d28 <memmove>:
 8009d28:	4288      	cmp	r0, r1
 8009d2a:	b510      	push	{r4, lr}
 8009d2c:	eb01 0402 	add.w	r4, r1, r2
 8009d30:	d902      	bls.n	8009d38 <memmove+0x10>
 8009d32:	4284      	cmp	r4, r0
 8009d34:	4623      	mov	r3, r4
 8009d36:	d807      	bhi.n	8009d48 <memmove+0x20>
 8009d38:	1e43      	subs	r3, r0, #1
 8009d3a:	42a1      	cmp	r1, r4
 8009d3c:	d008      	beq.n	8009d50 <memmove+0x28>
 8009d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d46:	e7f8      	b.n	8009d3a <memmove+0x12>
 8009d48:	4402      	add	r2, r0
 8009d4a:	4601      	mov	r1, r0
 8009d4c:	428a      	cmp	r2, r1
 8009d4e:	d100      	bne.n	8009d52 <memmove+0x2a>
 8009d50:	bd10      	pop	{r4, pc}
 8009d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d5a:	e7f7      	b.n	8009d4c <memmove+0x24>

08009d5c <_sbrk_r>:
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	4d06      	ldr	r5, [pc, #24]	@ (8009d78 <_sbrk_r+0x1c>)
 8009d60:	2300      	movs	r3, #0
 8009d62:	4604      	mov	r4, r0
 8009d64:	4608      	mov	r0, r1
 8009d66:	602b      	str	r3, [r5, #0]
 8009d68:	f7f8 fe44 	bl	80029f4 <_sbrk>
 8009d6c:	1c43      	adds	r3, r0, #1
 8009d6e:	d102      	bne.n	8009d76 <_sbrk_r+0x1a>
 8009d70:	682b      	ldr	r3, [r5, #0]
 8009d72:	b103      	cbz	r3, 8009d76 <_sbrk_r+0x1a>
 8009d74:	6023      	str	r3, [r4, #0]
 8009d76:	bd38      	pop	{r3, r4, r5, pc}
 8009d78:	2000145c 	.word	0x2000145c

08009d7c <_realloc_r>:
 8009d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d80:	4607      	mov	r7, r0
 8009d82:	4614      	mov	r4, r2
 8009d84:	460d      	mov	r5, r1
 8009d86:	b921      	cbnz	r1, 8009d92 <_realloc_r+0x16>
 8009d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8c:	4611      	mov	r1, r2
 8009d8e:	f7ff bc5b 	b.w	8009648 <_malloc_r>
 8009d92:	b92a      	cbnz	r2, 8009da0 <_realloc_r+0x24>
 8009d94:	f7ff fbec 	bl	8009570 <_free_r>
 8009d98:	4625      	mov	r5, r4
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009da0:	f000 f81a 	bl	8009dd8 <_malloc_usable_size_r>
 8009da4:	4284      	cmp	r4, r0
 8009da6:	4606      	mov	r6, r0
 8009da8:	d802      	bhi.n	8009db0 <_realloc_r+0x34>
 8009daa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009dae:	d8f4      	bhi.n	8009d9a <_realloc_r+0x1e>
 8009db0:	4621      	mov	r1, r4
 8009db2:	4638      	mov	r0, r7
 8009db4:	f7ff fc48 	bl	8009648 <_malloc_r>
 8009db8:	4680      	mov	r8, r0
 8009dba:	b908      	cbnz	r0, 8009dc0 <_realloc_r+0x44>
 8009dbc:	4645      	mov	r5, r8
 8009dbe:	e7ec      	b.n	8009d9a <_realloc_r+0x1e>
 8009dc0:	42b4      	cmp	r4, r6
 8009dc2:	4622      	mov	r2, r4
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	bf28      	it	cs
 8009dc8:	4632      	movcs	r2, r6
 8009dca:	f7ff fbc3 	bl	8009554 <memcpy>
 8009dce:	4629      	mov	r1, r5
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	f7ff fbcd 	bl	8009570 <_free_r>
 8009dd6:	e7f1      	b.n	8009dbc <_realloc_r+0x40>

08009dd8 <_malloc_usable_size_r>:
 8009dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ddc:	1f18      	subs	r0, r3, #4
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	bfbc      	itt	lt
 8009de2:	580b      	ldrlt	r3, [r1, r0]
 8009de4:	18c0      	addlt	r0, r0, r3
 8009de6:	4770      	bx	lr

08009de8 <_init>:
 8009de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dea:	bf00      	nop
 8009dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dee:	bc08      	pop	{r3}
 8009df0:	469e      	mov	lr, r3
 8009df2:	4770      	bx	lr

08009df4 <_fini>:
 8009df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df6:	bf00      	nop
 8009df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dfa:	bc08      	pop	{r3}
 8009dfc:	469e      	mov	lr, r3
 8009dfe:	4770      	bx	lr
