
hylight_auto_mann.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fe0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800a170  0800a170  0000b170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a488  0800a488  0000c060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a488  0800a488  0000b488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a490  0800a490  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a490  0800a490  0000b490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a494  0800a494  0000b494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800a498  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001400  20000060  0800a4f8  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001460  0800a4f8  0000c460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000217a2  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047be  00000000  00000000  0002d832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  00031ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014b6  00000000  00000000  00033a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c3d  00000000  00000000  00034f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f56f  00000000  00000000  00059b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9920  00000000  00000000  000790f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00152a12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074b8  00000000  00000000  00152a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00159f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a158 	.word	0x0800a158

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800a158 	.word	0x0800a158

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800028e:	f000 b9d3 	b.w	8000638 <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f84d 	bl	8000340 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f840 	bl	8000340 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f82f 	bl	8000340 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f821 	bl	8000340 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2203      	movs	r2, #3
 8000648:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2200      	movs	r2, #0
 800064e:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2203      	movs	r2, #3
 8000654:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2203      	movs	r2, #3
 800065a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2203      	movs	r2, #3
 8000660:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2203      	movs	r2, #3
 8000666:	715a      	strb	r2, [r3, #5]
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af04      	add	r7, sp, #16
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	460b      	mov	r3, r1
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800068e:	7afb      	ldrb	r3, [r7, #11]
 8000690:	b29a      	uxth	r2, r3
 8000692:	8af9      	ldrh	r1, [r7, #22]
 8000694:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	2302      	movs	r3, #2
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2301      	movs	r3, #1
 80006a6:	f004 f9d9 	bl	8004a5c <HAL_I2C_Mem_Read>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d10c      	bne.n	80006ca <read_register16+0x56>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80006b0:	7d7b      	ldrb	r3, [r7, #21]
 80006b2:	b21b      	sxth	r3, r3
 80006b4:	021b      	lsls	r3, r3, #8
 80006b6:	b21a      	sxth	r2, r3
 80006b8:	7d3b      	ldrb	r3, [r7, #20]
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	4313      	orrs	r3, r2
 80006be:	b21b      	sxth	r3, r3
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	801a      	strh	r2, [r3, #0]
		return true;
 80006c6:	2301      	movs	r3, #1
 80006c8:	e000      	b.n	80006cc <read_register16+0x58>
	} else
		return false;
 80006ca:	2300      	movs	r3, #0

}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b08b      	sub	sp, #44	@ 0x2c
 80006d8:	af04      	add	r7, sp, #16
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	607a      	str	r2, [r7, #4]
 80006de:	461a      	mov	r2, r3
 80006e0:	460b      	mov	r3, r1
 80006e2:	72fb      	strb	r3, [r7, #11]
 80006e4:	4613      	mov	r3, r2
 80006e6:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80006f4:	7afb      	ldrb	r3, [r7, #11]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	7abb      	ldrb	r3, [r7, #10]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	8af9      	ldrh	r1, [r7, #22]
 80006fe:	f241 3488 	movw	r4, #5000	@ 0x1388
 8000702:	9402      	str	r4, [sp, #8]
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	2301      	movs	r3, #1
 800070c:	f004 f9a6 	bl	8004a5c <HAL_I2C_Mem_Read>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d101      	bne.n	800071a <read_data+0x46>
		return 0;
 8000716:	2300      	movs	r3, #0
 8000718:	e000      	b.n	800071c <read_data+0x48>
	else
		return 1;
 800071a:	2301      	movs	r3, #1

}
 800071c:	4618      	mov	r0, r3
 800071e:	371c      	adds	r7, #28
 8000720:	46bd      	mov	sp, r7
 8000722:	bd90      	pop	{r4, r7, pc}

08000724 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	461a      	mov	r2, r3
 8000730:	2188      	movs	r1, #136	@ 0x88
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff ff9e 	bl	8000674 <read_register16>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d06f      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	3302      	adds	r3, #2
 8000742:	461a      	mov	r2, r3
 8000744:	218a      	movs	r1, #138	@ 0x8a
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ff94 	bl	8000674 <read_register16>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d065      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	3304      	adds	r3, #4
 8000756:	461a      	mov	r2, r3
 8000758:	218c      	movs	r1, #140	@ 0x8c
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff ff8a 	bl	8000674 <read_register16>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d05b      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3306      	adds	r3, #6
 800076a:	461a      	mov	r2, r3
 800076c:	218e      	movs	r1, #142	@ 0x8e
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff80 	bl	8000674 <read_register16>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d051      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3308      	adds	r3, #8
 800077e:	461a      	mov	r2, r3
 8000780:	2190      	movs	r1, #144	@ 0x90
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff ff76 	bl	8000674 <read_register16>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d047      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	330a      	adds	r3, #10
 8000792:	461a      	mov	r2, r3
 8000794:	2192      	movs	r1, #146	@ 0x92
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ff6c 	bl	8000674 <read_register16>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d03d      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	330c      	adds	r3, #12
 80007a6:	461a      	mov	r2, r3
 80007a8:	2194      	movs	r1, #148	@ 0x94
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ff62 	bl	8000674 <read_register16>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d033      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	330e      	adds	r3, #14
 80007ba:	461a      	mov	r2, r3
 80007bc:	2196      	movs	r1, #150	@ 0x96
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ff58 	bl	8000674 <read_register16>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d029      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3310      	adds	r3, #16
 80007ce:	461a      	mov	r2, r3
 80007d0:	2198      	movs	r1, #152	@ 0x98
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ff4e 	bl	8000674 <read_register16>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d01f      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3312      	adds	r3, #18
 80007e2:	461a      	mov	r2, r3
 80007e4:	219a      	movs	r1, #154	@ 0x9a
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ff44 	bl	8000674 <read_register16>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d015      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3314      	adds	r3, #20
 80007f6:	461a      	mov	r2, r3
 80007f8:	219c      	movs	r1, #156	@ 0x9c
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff3a 	bl	8000674 <read_register16>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d00b      	beq.n	800081e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 800080a:	461a      	mov	r2, r3
 800080c:	219e      	movs	r1, #158	@ 0x9e
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ff30 	bl	8000674 <read_register16>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <read_calibration_data+0xfa>

		return true;
 800081a:	2301      	movs	r3, #1
 800081c:	e000      	b.n	8000820 <read_calibration_data+0xfc>
	}

	return false;
 800081e:	2300      	movs	r3, #0
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f103 0218 	add.w	r2, r3, #24
 8000836:	2301      	movs	r3, #1
 8000838:	21a1      	movs	r1, #161	@ 0xa1
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff ff4a 	bl	80006d4 <read_data>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d14c      	bne.n	80008e0 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	331a      	adds	r3, #26
 800084a:	461a      	mov	r2, r3
 800084c:	21e1      	movs	r1, #225	@ 0xe1
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff ff10 	bl	8000674 <read_register16>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d042      	beq.n	80008e0 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f103 021c 	add.w	r2, r3, #28
 8000860:	2301      	movs	r3, #1
 8000862:	21e3      	movs	r1, #227	@ 0xe3
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ff35 	bl	80006d4 <read_data>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d137      	bne.n	80008e0 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe4, &h4)
 8000870:	f107 030e 	add.w	r3, r7, #14
 8000874:	461a      	mov	r2, r3
 8000876:	21e4      	movs	r1, #228	@ 0xe4
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff fefb 	bl	8000674 <read_register16>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d02d      	beq.n	80008e0 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe5, &h5)
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	461a      	mov	r2, r3
 800088a:	21e5      	movs	r1, #229	@ 0xe5
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff fef1 	bl	8000674 <read_register16>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d023      	beq.n	80008e0 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 800089e:	2301      	movs	r3, #1
 80008a0:	21e7      	movs	r1, #231	@ 0xe7
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff ff16 	bl	80006d4 <read_data>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d118      	bne.n	80008e0 <read_hum_calibration_data+0xb8>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80008ae:	89fb      	ldrh	r3, [r7, #14]
 80008b0:	b21b      	sxth	r3, r3
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80008ba:	b21a      	sxth	r2, r3
 80008bc:	89fb      	ldrh	r3, [r7, #14]
 80008be:	121b      	asrs	r3, r3, #8
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	f003 030f 	and.w	r3, r3, #15
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	4313      	orrs	r3, r2
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80008d0:	89bb      	ldrh	r3, [r7, #12]
 80008d2:	091b      	lsrs	r3, r3, #4
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	841a      	strh	r2, [r3, #32]

		return true;
 80008dc:	2301      	movs	r3, #1
 80008de:	e000      	b.n	80008e2 <read_hum_calibration_data+0xba>
	}

	return false;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b088      	sub	sp, #32
 80008ee:	af04      	add	r7, sp, #16
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	460b      	mov	r3, r1
 80008f4:	70fb      	strb	r3, [r7, #3]
 80008f6:	4613      	mov	r3, r2
 80008f8:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000906:	78fb      	ldrb	r3, [r7, #3]
 8000908:	b29a      	uxth	r2, r3
 800090a:	89f9      	ldrh	r1, [r7, #14]
 800090c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000910:	9302      	str	r3, [sp, #8]
 8000912:	2301      	movs	r3, #1
 8000914:	9301      	str	r3, [sp, #4]
 8000916:	1cbb      	adds	r3, r7, #2
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	2301      	movs	r3, #1
 800091c:	f003 ff8a 	bl	8004834 <HAL_I2C_Mem_Write>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d101      	bne.n	800092a <write_register8+0x40>
		return false;
 8000926:	2300      	movs	r3, #0
 8000928:	e000      	b.n	800092c <write_register8+0x42>
	else
		return true;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000942:	2b76      	cmp	r3, #118	@ 0x76
 8000944:	d005      	beq.n	8000952 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800094a:	2b77      	cmp	r3, #119	@ 0x77
 800094c:	d001      	beq.n	8000952 <bmp280_init+0x1e>

		return false;
 800094e:	2300      	movs	r3, #0
 8000950:	e09d      	b.n	8000a8e <bmp280_init+0x15a>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8000958:	2301      	movs	r3, #1
 800095a:	21d0      	movs	r1, #208	@ 0xd0
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff feb9 	bl	80006d4 <read_data>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <bmp280_init+0x38>
		return false;
 8000968:	2300      	movs	r3, #0
 800096a:	e090      	b.n	8000a8e <bmp280_init+0x15a>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8000972:	2b58      	cmp	r3, #88	@ 0x58
 8000974:	d006      	beq.n	8000984 <bmp280_init+0x50>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800097c:	2b60      	cmp	r3, #96	@ 0x60
 800097e:	d001      	beq.n	8000984 <bmp280_init+0x50>

		return false;
 8000980:	2300      	movs	r3, #0
 8000982:	e084      	b.n	8000a8e <bmp280_init+0x15a>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8000984:	22b6      	movs	r2, #182	@ 0xb6
 8000986:	21e0      	movs	r1, #224	@ 0xe0
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff ffae 	bl	80008ea <write_register8>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <bmp280_init+0x64>
		return false;
 8000994:	2300      	movs	r3, #0
 8000996:	e07a      	b.n	8000a8e <bmp280_init+0x15a>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8000998:	f107 020c 	add.w	r2, r7, #12
 800099c:	2301      	movs	r3, #1
 800099e:	21f3      	movs	r1, #243	@ 0xf3
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff fe97 	bl	80006d4 <read_data>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1f5      	bne.n	8000998 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80009ac:	7b3b      	ldrb	r3, [r7, #12]
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1f0      	bne.n	8000998 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff feb4 	bl	8000724 <read_calibration_data>
 80009bc:	4603      	mov	r3, r0
 80009be:	f083 0301 	eor.w	r3, r3, #1
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d100      	bne.n	80009ca <bmp280_init+0x96>
 80009c8:	e001      	b.n	80009ce <bmp280_init+0x9a>
		return false;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e05f      	b.n	8000a8e <bmp280_init+0x15a>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80009d4:	2b60      	cmp	r3, #96	@ 0x60
 80009d6:	d10a      	bne.n	80009ee <bmp280_init+0xba>
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ff25 	bl	8000828 <read_hum_calibration_data>
 80009de:	4603      	mov	r3, r0
 80009e0:	f083 0301 	eor.w	r3, r3, #1
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <bmp280_init+0xba>
		return false;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e04f      	b.n	8000a8e <bmp280_init+0x15a>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	795b      	ldrb	r3, [r3, #5]
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	015b      	lsls	r3, r3, #5
 80009f6:	b25a      	sxtb	r2, r3
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	785b      	ldrb	r3, [r3, #1]
 80009fc:	b25b      	sxtb	r3, r3
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b25b      	sxtb	r3, r3
 8000a06:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	21f5      	movs	r1, #245	@ 0xf5
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ff6b 	bl	80008ea <write_register8>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <bmp280_init+0xea>
		return false;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e037      	b.n	8000a8e <bmp280_init+0x15a>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d102      	bne.n	8000a2c <bmp280_init+0xf8>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	78db      	ldrb	r3, [r3, #3]
			| (params->oversampling_pressure << 2) | (params->mode);
 8000a30:	b25b      	sxtb	r3, r3
 8000a32:	015b      	lsls	r3, r3, #5
 8000a34:	b25a      	sxtb	r2, r3
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	789b      	ldrb	r3, [r3, #2]
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	b25b      	sxtb	r3, r3
 8000a40:	4313      	orrs	r3, r2
 8000a42:	b25a      	sxtb	r2, r3
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000a4e:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8000a56:	2b60      	cmp	r3, #96	@ 0x60
 8000a58:	d10d      	bne.n	8000a76 <bmp280_init+0x142>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	791b      	ldrb	r3, [r3, #4]
 8000a5e:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8000a60:	7b7b      	ldrb	r3, [r7, #13]
 8000a62:	461a      	mov	r2, r3
 8000a64:	21f2      	movs	r1, #242	@ 0xf2
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ff3f 	bl	80008ea <write_register8>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <bmp280_init+0x142>
			return false;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e00b      	b.n	8000a8e <bmp280_init+0x15a>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	21f4      	movs	r1, #244	@ 0xf4
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ff34 	bl	80008ea <write_register8>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <bmp280_init+0x158>
		return false;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e000      	b.n	8000a8e <bmp280_init+0x15a>
	}

	return true;
 8000a8c:	2301      	movs	r3, #1
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <bmp280_force_measurement>:

bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b084      	sub	sp, #16
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
	uint8_t ctrl;
	if (read_data(dev, BMP280_REG_CTRL, &ctrl, 1))
 8000a9e:	f107 020f 	add.w	r2, r7, #15
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	21f4      	movs	r1, #244	@ 0xf4
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff fe14 	bl	80006d4 <read_data>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <bmp280_force_measurement+0x20>
		return false;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e015      	b.n	8000ae2 <bmp280_force_measurement+0x4c>
	ctrl &= ~0b11;  // clear two lower bits
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	f023 0303 	bic.w	r3, r3, #3
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	73fb      	strb	r3, [r7, #15]
	ctrl |= BMP280_MODE_FORCED;
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	461a      	mov	r2, r3
 8000ace:	21f4      	movs	r1, #244	@ 0xf4
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ff0a 	bl	80008ea <write_register8>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <bmp280_force_measurement+0x4a>
		return false;
 8000adc:	2300      	movs	r3, #0
 8000ade:	e000      	b.n	8000ae2 <bmp280_force_measurement+0x4c>
	}
	return true;
 8000ae0:	2301      	movs	r3, #1
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <bmp280_is_measuring>:

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b084      	sub	sp, #16
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
	uint8_t status;
	if (read_data(dev, BMP280_REG_STATUS, &status, 1))
 8000af2:	f107 020f 	add.w	r2, r7, #15
 8000af6:	2301      	movs	r3, #1
 8000af8:	21f3      	movs	r1, #243	@ 0xf3
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff fdea 	bl	80006d4 <read_data>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <bmp280_is_measuring+0x20>
		return false;
 8000b06:	2300      	movs	r3, #0
 8000b08:	e007      	b.n	8000b1a <bmp280_is_measuring+0x30>
	if (status & (1 << 3)) {
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <bmp280_is_measuring+0x2e>
		return true;
 8000b14:	2301      	movs	r3, #1
 8000b16:	e000      	b.n	8000b1a <bmp280_is_measuring+0x30>
	}
	return false;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8000b22:	b480      	push	{r7}
 8000b24:	b087      	sub	sp, #28
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	60f8      	str	r0, [r7, #12]
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	10da      	asrs	r2, r3, #3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000b44:	12db      	asrs	r3, r3, #11
 8000b46:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	111b      	asrs	r3, r3, #4
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	8812      	ldrh	r2, [r2, #0]
 8000b50:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	1112      	asrs	r2, r2, #4
 8000b56:	68f9      	ldr	r1, [r7, #12]
 8000b58:	8809      	ldrh	r1, [r1, #0]
 8000b5a:	1a52      	subs	r2, r2, r1
 8000b5c:	fb02 f303 	mul.w	r3, r2, r3
 8000b60:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000b68:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000b6c:	139b      	asrs	r3, r3, #14
 8000b6e:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000b70:	697a      	ldr	r2, [r7, #20]
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	441a      	add	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	3380      	adds	r3, #128	@ 0x80
 8000b86:	121b      	asrs	r3, r3, #8
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	371c      	adds	r7, #28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b98:	b0cc      	sub	sp, #304	@ 0x130
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8000ba0:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8000ba4:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000bac:	17da      	asrs	r2, r3, #31
 8000bae:	461c      	mov	r4, r3
 8000bb0:	4615      	mov	r5, r2
 8000bb2:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000bb6:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 8000bba:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000bbe:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000bc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000bc6:	fb03 f102 	mul.w	r1, r3, r2
 8000bca:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000bce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000bd2:	fb02 f303 	mul.w	r3, r2, r3
 8000bd6:	18ca      	adds	r2, r1, r3
 8000bd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000bdc:	fba3 8903 	umull	r8, r9, r3, r3
 8000be0:	eb02 0309 	add.w	r3, r2, r9
 8000be4:	4699      	mov	r9, r3
 8000be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000bea:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	17da      	asrs	r2, r3, #31
 8000bf2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000bf6:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000bfa:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000bfe:	4603      	mov	r3, r0
 8000c00:	fb03 f209 	mul.w	r2, r3, r9
 8000c04:	460b      	mov	r3, r1
 8000c06:	fb08 f303 	mul.w	r3, r8, r3
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	fba8 1202 	umull	r1, r2, r8, r2
 8000c12:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000c16:	460a      	mov	r2, r1
 8000c18:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000c1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000c20:	4413      	add	r3, r2
 8000c22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000c26:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000c2a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8000c2e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8000c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c36:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	17da      	asrs	r2, r3, #31
 8000c3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000c42:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000c46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000c4a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000c4e:	462a      	mov	r2, r5
 8000c50:	fb02 f203 	mul.w	r2, r2, r3
 8000c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000c58:	4621      	mov	r1, r4
 8000c5a:	fb01 f303 	mul.w	r3, r1, r3
 8000c5e:	441a      	add	r2, r3
 8000c60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000c64:	4621      	mov	r1, r4
 8000c66:	fba3 1301 	umull	r1, r3, r3, r1
 8000c6a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000c6e:	460b      	mov	r3, r1
 8000c70:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000c78:	18d3      	adds	r3, r2, r3
 8000c7a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000c7e:	f04f 0000 	mov.w	r0, #0
 8000c82:	f04f 0100 	mov.w	r1, #0
 8000c86:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000c8a:	462b      	mov	r3, r5
 8000c8c:	0459      	lsls	r1, r3, #17
 8000c8e:	4623      	mov	r3, r4
 8000c90:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000c94:	4623      	mov	r3, r4
 8000c96:	0458      	lsls	r0, r3, #17
 8000c98:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c9c:	1814      	adds	r4, r2, r0
 8000c9e:	643c      	str	r4, [r7, #64]	@ 0x40
 8000ca0:	414b      	adcs	r3, r1
 8000ca2:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ca4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000ca8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8000cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000cb0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	17da      	asrs	r2, r3, #31
 8000cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000cbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	f04f 0100 	mov.w	r1, #0
 8000cc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000ccc:	00d9      	lsls	r1, r3, #3
 8000cce:	2000      	movs	r0, #0
 8000cd0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000cd4:	1814      	adds	r4, r2, r0
 8000cd6:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000cd8:	414b      	adcs	r3, r1
 8000cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000cdc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000ce0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000ce4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000ce8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000cec:	fb03 f102 	mul.w	r1, r3, r2
 8000cf0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000cf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000cf8:	fb02 f303 	mul.w	r3, r2, r3
 8000cfc:	18ca      	adds	r2, r1, r3
 8000cfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000d02:	fba3 1303 	umull	r1, r3, r3, r3
 8000d06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000d14:	18d3      	adds	r3, r2, r3
 8000d16:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d1e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d22:	b21b      	sxth	r3, r3
 8000d24:	17da      	asrs	r2, r3, #31
 8000d26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000d2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000d2e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000d32:	462b      	mov	r3, r5
 8000d34:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000d38:	4642      	mov	r2, r8
 8000d3a:	fb02 f203 	mul.w	r2, r2, r3
 8000d3e:	464b      	mov	r3, r9
 8000d40:	4621      	mov	r1, r4
 8000d42:	fb01 f303 	mul.w	r3, r1, r3
 8000d46:	4413      	add	r3, r2
 8000d48:	4622      	mov	r2, r4
 8000d4a:	4641      	mov	r1, r8
 8000d4c:	fba2 1201 	umull	r1, r2, r2, r1
 8000d50:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000d54:	460a      	mov	r2, r1
 8000d56:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000d5a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000d5e:	4413      	add	r3, r2
 8000d60:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000d64:	f04f 0000 	mov.w	r0, #0
 8000d68:	f04f 0100 	mov.w	r1, #0
 8000d6c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000d70:	4623      	mov	r3, r4
 8000d72:	0a18      	lsrs	r0, r3, #8
 8000d74:	462b      	mov	r3, r5
 8000d76:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000d7a:	462b      	mov	r3, r5
 8000d7c:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8000d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	17da      	asrs	r2, r3, #31
 8000d8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000d8e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000d92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000d96:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000d9a:	464a      	mov	r2, r9
 8000d9c:	fb02 f203 	mul.w	r2, r2, r3
 8000da0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000da4:	4644      	mov	r4, r8
 8000da6:	fb04 f303 	mul.w	r3, r4, r3
 8000daa:	441a      	add	r2, r3
 8000dac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000db0:	4644      	mov	r4, r8
 8000db2:	fba3 4304 	umull	r4, r3, r3, r4
 8000db6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000dba:	4623      	mov	r3, r4
 8000dbc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000dc0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000dc4:	18d3      	adds	r3, r2, r3
 8000dc6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000dd6:	464c      	mov	r4, r9
 8000dd8:	0323      	lsls	r3, r4, #12
 8000dda:	4644      	mov	r4, r8
 8000ddc:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000de0:	4644      	mov	r4, r8
 8000de2:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000de4:	1884      	adds	r4, r0, r2
 8000de6:	633c      	str	r4, [r7, #48]	@ 0x30
 8000de8:	eb41 0303 	adc.w	r3, r1, r3
 8000dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8000dee:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000df2:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8000df6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000dfa:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000dfe:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000e02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e0a:	88db      	ldrh	r3, [r3, #6]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000e14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000e18:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000e1c:	462b      	mov	r3, r5
 8000e1e:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000e22:	4642      	mov	r2, r8
 8000e24:	fb02 f203 	mul.w	r2, r2, r3
 8000e28:	464b      	mov	r3, r9
 8000e2a:	4621      	mov	r1, r4
 8000e2c:	fb01 f303 	mul.w	r3, r1, r3
 8000e30:	4413      	add	r3, r2
 8000e32:	4622      	mov	r2, r4
 8000e34:	4641      	mov	r1, r8
 8000e36:	fba2 1201 	umull	r1, r2, r2, r1
 8000e3a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000e3e:	460a      	mov	r2, r1
 8000e40:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000e44:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000e48:	4413      	add	r3, r2
 8000e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000e5a:	4629      	mov	r1, r5
 8000e5c:	104a      	asrs	r2, r1, #1
 8000e5e:	4629      	mov	r1, r5
 8000e60:	17cb      	asrs	r3, r1, #31
 8000e62:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8000e66:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e148      	b.n	8001104 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8000e72:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e76:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000e7a:	17da      	asrs	r2, r3, #31
 8000e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000e80:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000e84:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8000e88:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000e8c:	105b      	asrs	r3, r3, #1
 8000e8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000e92:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000e96:	07db      	lsls	r3, r3, #31
 8000e98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000e9c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ea0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000ea4:	4621      	mov	r1, r4
 8000ea6:	1a89      	subs	r1, r1, r2
 8000ea8:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000eaa:	4629      	mov	r1, r5
 8000eac:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000eb2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000eb6:	4622      	mov	r2, r4
 8000eb8:	462b      	mov	r3, r5
 8000eba:	1891      	adds	r1, r2, r2
 8000ebc:	6239      	str	r1, [r7, #32]
 8000ebe:	415b      	adcs	r3, r3
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ec2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ec6:	4621      	mov	r1, r4
 8000ec8:	1851      	adds	r1, r2, r1
 8000eca:	61b9      	str	r1, [r7, #24]
 8000ecc:	4629      	mov	r1, r5
 8000ece:	414b      	adcs	r3, r1
 8000ed0:	61fb      	str	r3, [r7, #28]
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	f04f 0300 	mov.w	r3, #0
 8000eda:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000ede:	4649      	mov	r1, r9
 8000ee0:	018b      	lsls	r3, r1, #6
 8000ee2:	4641      	mov	r1, r8
 8000ee4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000ee8:	4641      	mov	r1, r8
 8000eea:	018a      	lsls	r2, r1, #6
 8000eec:	4641      	mov	r1, r8
 8000eee:	1889      	adds	r1, r1, r2
 8000ef0:	6139      	str	r1, [r7, #16]
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	eb43 0101 	adc.w	r1, r3, r1
 8000ef8:	6179      	str	r1, [r7, #20]
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000f06:	4649      	mov	r1, r9
 8000f08:	008b      	lsls	r3, r1, #2
 8000f0a:	4641      	mov	r1, r8
 8000f0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000f10:	4641      	mov	r1, r8
 8000f12:	008a      	lsls	r2, r1, #2
 8000f14:	4610      	mov	r0, r2
 8000f16:	4619      	mov	r1, r3
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4622      	mov	r2, r4
 8000f1c:	189b      	adds	r3, r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	460b      	mov	r3, r1
 8000f22:	462a      	mov	r2, r5
 8000f24:	eb42 0303 	adc.w	r3, r2, r3
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	f04f 0300 	mov.w	r3, #0
 8000f32:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000f36:	4649      	mov	r1, r9
 8000f38:	008b      	lsls	r3, r1, #2
 8000f3a:	4641      	mov	r1, r8
 8000f3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000f40:	4641      	mov	r1, r8
 8000f42:	008a      	lsls	r2, r1, #2
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4622      	mov	r2, r4
 8000f4c:	189b      	adds	r3, r3, r2
 8000f4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8000f50:	462b      	mov	r3, r5
 8000f52:	460a      	mov	r2, r1
 8000f54:	eb42 0303 	adc.w	r3, r2, r3
 8000f58:	677b      	str	r3, [r7, #116]	@ 0x74
 8000f5a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000f5e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000f62:	f7ff f985 	bl	8000270 <__aeabi_ldivmod>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8000f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f72:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	17da      	asrs	r2, r3, #31
 8000f7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000f7c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000f7e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000f82:	f04f 0000 	mov.w	r0, #0
 8000f86:	f04f 0100 	mov.w	r1, #0
 8000f8a:	0b50      	lsrs	r0, r2, #13
 8000f8c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000f90:	1359      	asrs	r1, r3, #13
 8000f92:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000f96:	462b      	mov	r3, r5
 8000f98:	fb00 f203 	mul.w	r2, r0, r3
 8000f9c:	4623      	mov	r3, r4
 8000f9e:	fb03 f301 	mul.w	r3, r3, r1
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4622      	mov	r2, r4
 8000fa6:	fba2 1200 	umull	r1, r2, r2, r0
 8000faa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000fae:	460a      	mov	r2, r1
 8000fb0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000fb4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000fb8:	4413      	add	r3, r2
 8000fba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000fbe:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	f04f 0100 	mov.w	r1, #0
 8000fca:	0b50      	lsrs	r0, r2, #13
 8000fcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000fd0:	1359      	asrs	r1, r3, #13
 8000fd2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000fd6:	462b      	mov	r3, r5
 8000fd8:	fb00 f203 	mul.w	r2, r0, r3
 8000fdc:	4623      	mov	r3, r4
 8000fde:	fb03 f301 	mul.w	r3, r3, r1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4622      	mov	r2, r4
 8000fe6:	fba2 1200 	umull	r1, r2, r2, r0
 8000fea:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000fee:	460a      	mov	r2, r1
 8000ff0:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000ff4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800100a:	4621      	mov	r1, r4
 800100c:	0e4a      	lsrs	r2, r1, #25
 800100e:	4629      	mov	r1, r5
 8001010:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001014:	4629      	mov	r1, r5
 8001016:	164b      	asrs	r3, r1, #25
 8001018:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 800101c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001020:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001024:	b21b      	sxth	r3, r3
 8001026:	17da      	asrs	r2, r3, #31
 8001028:	663b      	str	r3, [r7, #96]	@ 0x60
 800102a:	667a      	str	r2, [r7, #100]	@ 0x64
 800102c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001030:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001034:	462a      	mov	r2, r5
 8001036:	fb02 f203 	mul.w	r2, r2, r3
 800103a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800103e:	4621      	mov	r1, r4
 8001040:	fb01 f303 	mul.w	r3, r1, r3
 8001044:	4413      	add	r3, r2
 8001046:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800104a:	4621      	mov	r1, r4
 800104c:	fba2 1201 	umull	r1, r2, r2, r1
 8001050:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001054:	460a      	mov	r2, r1
 8001056:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800105a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800105e:	4413      	add	r3, r2
 8001060:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001070:	4621      	mov	r1, r4
 8001072:	0cca      	lsrs	r2, r1, #19
 8001074:	4629      	mov	r1, r5
 8001076:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800107a:	4629      	mov	r1, r5
 800107c:	14cb      	asrs	r3, r1, #19
 800107e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001082:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001086:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800108a:	1884      	adds	r4, r0, r2
 800108c:	65bc      	str	r4, [r7, #88]	@ 0x58
 800108e:	eb41 0303 	adc.w	r3, r1, r3
 8001092:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001094:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001098:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800109c:	4621      	mov	r1, r4
 800109e:	1889      	adds	r1, r1, r2
 80010a0:	6539      	str	r1, [r7, #80]	@ 0x50
 80010a2:	4629      	mov	r1, r5
 80010a4:	eb43 0101 	adc.w	r1, r3, r1
 80010a8:	6579      	str	r1, [r7, #84]	@ 0x54
 80010aa:	f04f 0000 	mov.w	r0, #0
 80010ae:	f04f 0100 	mov.w	r1, #0
 80010b2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80010b6:	4623      	mov	r3, r4
 80010b8:	0a18      	lsrs	r0, r3, #8
 80010ba:	462b      	mov	r3, r5
 80010bc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80010c0:	462b      	mov	r3, r5
 80010c2:	1219      	asrs	r1, r3, #8
 80010c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80010c8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	17da      	asrs	r2, r3, #31
 80010d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80010d2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80010e0:	464c      	mov	r4, r9
 80010e2:	0123      	lsls	r3, r4, #4
 80010e4:	4644      	mov	r4, r8
 80010e6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80010ea:	4644      	mov	r4, r8
 80010ec:	0122      	lsls	r2, r4, #4
 80010ee:	1884      	adds	r4, r0, r2
 80010f0:	603c      	str	r4, [r7, #0]
 80010f2:	eb41 0303 	adc.w	r3, r1, r3
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80010fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001100:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8001104:	4618      	mov	r0, r3
 8001106:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800110a:	46bd      	mov	sp, r7
 800110c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001110 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001122:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	039a      	lsls	r2, r3, #14
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800112e:	051b      	lsls	r3, r3, #20
 8001130:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001138:	4619      	mov	r1, r3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	fb01 f303 	mul.w	r3, r1, r3
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001146:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 800114e:	4611      	mov	r1, r2
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	fb01 f202 	mul.w	r2, r1, r2
 8001156:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001158:	68f9      	ldr	r1, [r7, #12]
 800115a:	7f09      	ldrb	r1, [r1, #28]
 800115c:	4608      	mov	r0, r1
 800115e:	6979      	ldr	r1, [r7, #20]
 8001160:	fb00 f101 	mul.w	r1, r0, r1
 8001164:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001166:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800116a:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800116e:	1292      	asrs	r2, r2, #10
 8001170:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001174:	68f9      	ldr	r1, [r7, #12]
 8001176:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800117a:	fb01 f202 	mul.w	r2, r1, r2
 800117e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001182:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	13db      	asrs	r3, r3, #15
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	13d2      	asrs	r2, r2, #15
 8001192:	fb02 f303 	mul.w	r3, r2, r3
 8001196:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	7e12      	ldrb	r2, [r2, #24]
 800119c:	fb02 f303 	mul.w	r3, r2, r3
 80011a0:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80011ae:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 80011b6:	bfa8      	it	ge
 80011b8:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 80011bc:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	131b      	asrs	r3, r3, #12
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	371c      	adds	r7, #28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b08c      	sub	sp, #48	@ 0x30
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80011e2:	2b60      	cmp	r3, #96	@ 0x60
 80011e4:	d007      	beq.n	80011f6 <bmp280_read_fixed+0x28>
		if (humidity)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <bmp280_read_fixed+0x24>
			*humidity = 0;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <bmp280_read_fixed+0x32>
 80011fc:	2308      	movs	r3, #8
 80011fe:	e000      	b.n	8001202 <bmp280_read_fixed+0x34>
 8001200:	2306      	movs	r3, #6
 8001202:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f107 0218 	add.w	r2, r7, #24
 800120c:	21f7      	movs	r1, #247	@ 0xf7
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f7ff fa60 	bl	80006d4 <read_data>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <bmp280_read_fixed+0x50>
		return false;
 800121a:	2300      	movs	r3, #0
 800121c:	e038      	b.n	8001290 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800121e:	7e3b      	ldrb	r3, [r7, #24]
 8001220:	031a      	lsls	r2, r3, #12
 8001222:	7e7b      	ldrb	r3, [r7, #25]
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	4313      	orrs	r3, r2
 8001228:	7eba      	ldrb	r2, [r7, #26]
 800122a:	0912      	lsrs	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	4313      	orrs	r3, r2
 8001230:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001232:	7efb      	ldrb	r3, [r7, #27]
 8001234:	031a      	lsls	r2, r3, #12
 8001236:	7f3b      	ldrb	r3, [r7, #28]
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	4313      	orrs	r3, r2
 800123c:	7f7a      	ldrb	r2, [r7, #29]
 800123e:	0912      	lsrs	r2, r2, #4
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	4313      	orrs	r3, r2
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	461a      	mov	r2, r3
 800124c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f7ff fc67 	bl	8000b22 <compensate_temperature>
 8001254:	4602      	mov	r2, r0
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	461a      	mov	r2, r3
 800125e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f7ff fc97 	bl	8000b94 <compensate_pressure>
 8001266:	4602      	mov	r2, r0
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	601a      	str	r2, [r3, #0]

	if (humidity) {
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00d      	beq.n	800128e <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001272:	7fbb      	ldrb	r3, [r7, #30]
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	7ffa      	ldrb	r2, [r7, #31]
 8001278:	4313      	orrs	r3, r2
 800127a:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	461a      	mov	r2, r3
 8001280:	6a39      	ldr	r1, [r7, #32]
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f7ff ff44 	bl	8001110 <compensate_humidity>
 8001288:	4602      	mov	r2, r0
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	601a      	str	r2, [r3, #0]
	}

	return true;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3730      	adds	r7, #48	@ 0x30
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <calculate_crc16>:
#include <stdio.h>

// CRC16-CCITT polynomial: 0x1021
#define CRC16_POLY 0x1021

uint16_t calculate_crc16(const uint8_t *data, size_t length) {
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 80012a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012a6:	82fb      	strh	r3, [r7, #22]
    
    for (size_t i = 0; i < length; i++) {
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	e029      	b.n	8001302 <calculate_crc16+0x6a>
        crc ^= (uint16_t)data[i] << 8;
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4413      	add	r3, r2
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012c0:	4053      	eors	r3, r2
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	82fb      	strh	r3, [r7, #22]
        
        for (int j = 0; j < 8; j++) {
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	e014      	b.n	80012f6 <calculate_crc16+0x5e>
            if (crc & 0x8000) {
 80012cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	da0a      	bge.n	80012ea <calculate_crc16+0x52>
                crc = (crc << 1) ^ CRC16_POLY;
 80012d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	b21b      	sxth	r3, r3
 80012dc:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 80012e0:	f083 0301 	eor.w	r3, r3, #1
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	82fb      	strh	r3, [r7, #22]
 80012e8:	e002      	b.n	80012f0 <calculate_crc16+0x58>
            } else {
                crc <<= 1;
 80012ea:	8afb      	ldrh	r3, [r7, #22]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	82fb      	strh	r3, [r7, #22]
        for (int j = 0; j < 8; j++) {
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3301      	adds	r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2b07      	cmp	r3, #7
 80012fa:	dde7      	ble.n	80012cc <calculate_crc16+0x34>
    for (size_t i = 0; i < length; i++) {
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	3301      	adds	r3, #1
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	d3d1      	bcc.n	80012ae <calculate_crc16+0x16>
            }
        }
    }
    
    return crc;
 800130a:	8afb      	ldrh	r3, [r7, #22]
}
 800130c:	4618      	mov	r0, r3
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <create_uart_tx_packet>:

uart_tx_logging_t create_uart_tx_packet(const raw_data_t *raw_data) {
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
    uart_tx_logging_t tx_packet;
    
    // Copy raw data
    tx_packet.live_data = *raw_data;
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	6810      	ldr	r0, [r2, #0]
 800132a:	6851      	ldr	r1, [r2, #4]
 800132c:	c303      	stmia	r3!, {r0, r1}
 800132e:	8912      	ldrh	r2, [r2, #8]
 8001330:	801a      	strh	r2, [r3, #0]
    
    // Calculate CRC16 over the raw data portion
    uint8_t *data_ptr = (uint8_t *)&tx_packet.live_data;
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	617b      	str	r3, [r7, #20]
    tx_packet.CRC16 = calculate_crc16(data_ptr, sizeof(raw_data_t));
 8001338:	210a      	movs	r1, #10
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f7ff ffac 	bl	8001298 <calculate_crc16>
 8001340:	4603      	mov	r3, r0
 8001342:	827b      	strh	r3, [r7, #18]
    
    return tx_packet;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	461c      	mov	r4, r3
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800134e:	6020      	str	r0, [r4, #0]
 8001350:	6061      	str	r1, [r4, #4]
 8001352:	60a2      	str	r2, [r4, #8]
}
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	371c      	adds	r7, #28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd90      	pop	{r4, r7, pc}

0800135c <cobs_encode>:

size_t cobs_encode(const uint8_t *input, size_t input_size, uint8_t *output, size_t output_size) {
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	@ 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
    if (input_size == 0 || output_size < input_size + 2) {
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d004      	beq.n	800137a <cobs_encode+0x1e>
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	3302      	adds	r3, #2
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d201      	bcs.n	800137e <cobs_encode+0x22>
        return 0; // Not enough space
 800137a:	2300      	movs	r3, #0
 800137c:	e060      	b.n	8001440 <cobs_encode+0xe4>
    }
    
    size_t read_index = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
    size_t write_index = 1;
 8001382:	2301      	movs	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
    size_t code_index = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
    uint8_t code = 1;
 800138a:	2301      	movs	r3, #1
 800138c:	74fb      	strb	r3, [r7, #19]
    
    while (read_index < input_size) {
 800138e:	e040      	b.n	8001412 <cobs_encode+0xb6>
        if (input[read_index] == 0) {
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	4413      	add	r3, r2
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d110      	bne.n	80013be <cobs_encode+0x62>
            output[code_index] = code;
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	4413      	add	r3, r2
 80013a2:	7cfa      	ldrb	r2, [r7, #19]
 80013a4:	701a      	strb	r2, [r3, #0]
            code = 1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	74fb      	strb	r3, [r7, #19]
            code_index = write_index++;
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	1c5a      	adds	r2, r3, #1
 80013ae:	61ba      	str	r2, [r7, #24]
 80013b0:	617b      	str	r3, [r7, #20]
            if (write_index >= output_size) return 0;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d328      	bcc.n	800140c <cobs_encode+0xb0>
 80013ba:	2300      	movs	r3, #0
 80013bc:	e040      	b.n	8001440 <cobs_encode+0xe4>
        } else {
            output[write_index++] = input[read_index];
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	441a      	add	r2, r3
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	1c59      	adds	r1, r3, #1
 80013c8:	61b9      	str	r1, [r7, #24]
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	440b      	add	r3, r1
 80013ce:	7812      	ldrb	r2, [r2, #0]
 80013d0:	701a      	strb	r2, [r3, #0]
            code++;
 80013d2:	7cfb      	ldrb	r3, [r7, #19]
 80013d4:	3301      	adds	r3, #1
 80013d6:	74fb      	strb	r3, [r7, #19]
            if (write_index >= output_size) return 0;
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d301      	bcc.n	80013e4 <cobs_encode+0x88>
 80013e0:	2300      	movs	r3, #0
 80013e2:	e02d      	b.n	8001440 <cobs_encode+0xe4>
            
            if (code == 0xFF) {
 80013e4:	7cfb      	ldrb	r3, [r7, #19]
 80013e6:	2bff      	cmp	r3, #255	@ 0xff
 80013e8:	d110      	bne.n	800140c <cobs_encode+0xb0>
                output[code_index] = code;
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	4413      	add	r3, r2
 80013f0:	7cfa      	ldrb	r2, [r7, #19]
 80013f2:	701a      	strb	r2, [r3, #0]
                code = 1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	74fb      	strb	r3, [r7, #19]
                code_index = write_index++;
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	61ba      	str	r2, [r7, #24]
 80013fe:	617b      	str	r3, [r7, #20]
                if (write_index >= output_size) return 0;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d301      	bcc.n	800140c <cobs_encode+0xb0>
 8001408:	2300      	movs	r3, #0
 800140a:	e019      	b.n	8001440 <cobs_encode+0xe4>
            }
        }
        read_index++;
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	3301      	adds	r3, #1
 8001410:	61fb      	str	r3, [r7, #28]
    while (read_index < input_size) {
 8001412:	69fa      	ldr	r2, [r7, #28]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	429a      	cmp	r2, r3
 8001418:	d3ba      	bcc.n	8001390 <cobs_encode+0x34>
    }
    
    output[code_index] = code;
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	4413      	add	r3, r2
 8001420:	7cfa      	ldrb	r2, [r7, #19]
 8001422:	701a      	strb	r2, [r3, #0]
    
    // Add delimiter
    if (write_index >= output_size) return 0;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	429a      	cmp	r2, r3
 800142a:	d301      	bcc.n	8001430 <cobs_encode+0xd4>
 800142c:	2300      	movs	r3, #0
 800142e:	e007      	b.n	8001440 <cobs_encode+0xe4>
    output[write_index++] = 0x00;
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	61ba      	str	r2, [r7, #24]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
    
    return write_index;
 800143e:	69bb      	ldr	r3, [r7, #24]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3724      	adds	r7, #36	@ 0x24
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <cobs_decode>:

static size_t cobs_decode(const uint8_t *input, size_t input_size, uint8_t *output, size_t output_size) {
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	@ 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]
    if (input_size < 2 || input[input_size - 1] != 0x00) {
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d906      	bls.n	800146e <cobs_decode+0x22>
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	3b01      	subs	r3, #1
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	4413      	add	r3, r2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <cobs_decode+0x26>
        return 0; // Invalid COBS packet (should end with delimiter)
 800146e:	2300      	movs	r3, #0
 8001470:	e04c      	b.n	800150c <cobs_decode+0xc0>
    }
    
    // Remove delimiter for processing
    input_size--;
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	3b01      	subs	r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
    
    size_t read_index = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
    size_t write_index = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
    
    while (read_index < input_size) {
 8001480:	e03f      	b.n	8001502 <cobs_decode+0xb6>
        uint8_t code = input[read_index++];
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	61fa      	str	r2, [r7, #28]
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	74fb      	strb	r3, [r7, #19]
        
        if (code == 0) {
 8001490:	7cfb      	ldrb	r3, [r7, #19]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <cobs_decode+0x4e>
            return 0; // Invalid: zero found in encoded data
 8001496:	2300      	movs	r3, #0
 8001498:	e038      	b.n	800150c <cobs_decode+0xc0>
        }
        
        for (int i = 1; i < code && read_index < input_size; i++) {
 800149a:	2301      	movs	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	e014      	b.n	80014ca <cobs_decode+0x7e>
            if (write_index >= output_size) return 0;
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d301      	bcc.n	80014ac <cobs_decode+0x60>
 80014a8:	2300      	movs	r3, #0
 80014aa:	e02f      	b.n	800150c <cobs_decode+0xc0>
            output[write_index++] = input[read_index++];
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	61fa      	str	r2, [r7, #28]
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	441a      	add	r2, r3
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	1c59      	adds	r1, r3, #1
 80014ba:	61b9      	str	r1, [r7, #24]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	440b      	add	r3, r1
 80014c0:	7812      	ldrb	r2, [r2, #0]
 80014c2:	701a      	strb	r2, [r3, #0]
        for (int i = 1; i < code && read_index < input_size; i++) {
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3301      	adds	r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	7cfb      	ldrb	r3, [r7, #19]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	da03      	bge.n	80014da <cobs_decode+0x8e>
 80014d2:	69fa      	ldr	r2, [r7, #28]
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d3e2      	bcc.n	80014a0 <cobs_decode+0x54>
        }
        
        if (code < 0xFF && read_index < input_size) {
 80014da:	7cfb      	ldrb	r3, [r7, #19]
 80014dc:	2bff      	cmp	r3, #255	@ 0xff
 80014de:	d010      	beq.n	8001502 <cobs_decode+0xb6>
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d20c      	bcs.n	8001502 <cobs_decode+0xb6>
            if (write_index >= output_size) return 0;
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d301      	bcc.n	80014f4 <cobs_decode+0xa8>
 80014f0:	2300      	movs	r3, #0
 80014f2:	e00b      	b.n	800150c <cobs_decode+0xc0>
            output[write_index++] = 0x00;
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	61ba      	str	r2, [r7, #24]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
    while (read_index < input_size) {
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	429a      	cmp	r2, r3
 8001508:	d3bb      	bcc.n	8001482 <cobs_decode+0x36>
        }
    }
    
    return write_index;
 800150a:	69bb      	ldr	r3, [r7, #24]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3724      	adds	r7, #36	@ 0x24
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <encode_uart_tx_packet>:

size_t encode_uart_tx_packet(const uart_tx_logging_t *tx_packet, uint8_t *encoded_buffer, size_t buffer_size) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b08c      	sub	sp, #48	@ 0x30
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
    // Convert struct to byte array
    uint8_t raw_bytes[sizeof(uart_tx_logging_t)];
    memcpy(raw_bytes, tx_packet, sizeof(uart_tx_logging_t));
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152a:	6810      	ldr	r0, [r2, #0]
 800152c:	6851      	ldr	r1, [r2, #4]
 800152e:	6892      	ldr	r2, [r2, #8]
 8001530:	c307      	stmia	r3!, {r0, r1, r2}
    
    // Calculate CRC for the entire packet
    uint16_t packet_crc = calculate_crc16(raw_bytes, sizeof(uart_tx_logging_t));
 8001532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001536:	210c      	movs	r1, #12
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fead 	bl	8001298 <calculate_crc16>
 800153e:	4603      	mov	r3, r0
 8001540:	847b      	strh	r3, [r7, #34]	@ 0x22
    
    // Create extended packet with CRC
    uint8_t extended_packet[sizeof(uart_tx_logging_t) + sizeof(uint16_t)];
    memcpy(extended_packet, raw_bytes, sizeof(uart_tx_logging_t));
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800154a:	ca07      	ldmia	r2, {r0, r1, r2}
 800154c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    memcpy(extended_packet + sizeof(uart_tx_logging_t), &packet_crc, sizeof(uint16_t));
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	330c      	adds	r3, #12
 8001556:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8001558:	801a      	strh	r2, [r3, #0]
    
    // COBS encode
    return cobs_encode(extended_packet, sizeof(extended_packet), encoded_buffer, buffer_size);
 800155a:	f107 0014 	add.w	r0, r7, #20
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	210e      	movs	r1, #14
 8001564:	f7ff fefa 	bl	800135c <cobs_encode>
 8001568:	4603      	mov	r3, r0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3730      	adds	r7, #48	@ 0x30
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <verify_cobs_encoding>:

bool verify_cobs_encoding(const uint8_t *original_data, size_t original_size, 
                         const uint8_t *encoded_data, size_t encoded_size) {
 8001572:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001576:	b089      	sub	sp, #36	@ 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	466b      	mov	r3, sp
 8001584:	461e      	mov	r6, r3
    uint8_t temp_buffer[original_size * 2 + 10]; // Safe size for re-encoding
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	3305      	adds	r3, #5
 800158a:	0059      	lsls	r1, r3, #1
 800158c:	460b      	mov	r3, r1
 800158e:	3b01      	subs	r3, #1
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	2300      	movs	r3, #0
 8001594:	4688      	mov	r8, r1
 8001596:	4699      	mov	r9, r3
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015ac:	2300      	movs	r3, #0
 80015ae:	460c      	mov	r4, r1
 80015b0:	461d      	mov	r5, r3
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	00eb      	lsls	r3, r5, #3
 80015bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015c0:	00e2      	lsls	r2, r4, #3
 80015c2:	1dcb      	adds	r3, r1, #7
 80015c4:	08db      	lsrs	r3, r3, #3
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	ebad 0d03 	sub.w	sp, sp, r3
 80015cc:	466b      	mov	r3, sp
 80015ce:	3300      	adds	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
    
    size_t re_encoded_size = cobs_encode(original_data, original_size, temp_buffer, sizeof(temp_buffer));
 80015d2:	460b      	mov	r3, r1
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	68b9      	ldr	r1, [r7, #8]
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f7ff febf 	bl	800135c <cobs_encode>
 80015de:	6178      	str	r0, [r7, #20]
    
    if (re_encoded_size != encoded_size) {
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <verify_cobs_encoding+0x7a>
        return false;
 80015e8:	2300      	movs	r3, #0
 80015ea:	e00a      	b.n	8001602 <verify_cobs_encoding+0x90>
    }
    
    return memcmp(temp_buffer, encoded_data, encoded_size) == 0;
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	69b8      	ldr	r0, [r7, #24]
 80015f2:	f008 f8c5 	bl	8009780 <memcmp>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf0c      	ite	eq
 80015fc:	2301      	moveq	r3, #1
 80015fe:	2300      	movne	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	46b5      	mov	sp, r6
}
 8001604:	4618      	mov	r0, r3
 8001606:	3724      	adds	r7, #36	@ 0x24
 8001608:	46bd      	mov	sp, r7
 800160a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800160e <decode_uart_rx_command>:
                       uint8_t *decoded_buffer, size_t buffer_size) {
    return cobs_decode(encoded_data, encoded_size, decoded_buffer, buffer_size);
}

bool decode_uart_rx_command(const uint8_t *encoded_data, size_t encoded_size, 
                           uart_rx_command_t *rx_command) {
 800160e:	b580      	push	{r7, lr}
 8001610:	b08c      	sub	sp, #48	@ 0x30
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
    uint8_t decoded_buffer[sizeof(uart_rx_command_t) + sizeof(uint16_t) + 10];
    
    // Decode COBS data
    size_t decoded_size = cobs_decode(encoded_data, encoded_size, decoded_buffer, sizeof(decoded_buffer));
 800161a:	f107 0218 	add.w	r2, r7, #24
 800161e:	2310      	movs	r3, #16
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f7ff ff12 	bl	800144c <cobs_decode>
 8001628:	62f8      	str	r0, [r7, #44]	@ 0x2c
    
    if (decoded_size < sizeof(uart_rx_command_t)) {
 800162a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162c:	2b03      	cmp	r3, #3
 800162e:	d801      	bhi.n	8001634 <decode_uart_rx_command+0x26>
        return false; // Not enough data
 8001630:	2300      	movs	r3, #0
 8001632:	e02c      	b.n	800168e <decode_uart_rx_command+0x80>
    }
    
    // Extract command structure
    memcpy(rx_command, decoded_buffer, sizeof(uart_rx_command_t));
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	601a      	str	r2, [r3, #0]
    
    // Verify CRC
    uint8_t command_data = rx_command->commandvalue;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	75fb      	strb	r3, [r7, #23]
    uint16_t calculated_crc = calculate_crc16(&command_data, sizeof(uint8_t));
 8001640:	f107 0317 	add.w	r3, r7, #23
 8001644:	2101      	movs	r1, #1
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fe26 	bl	8001298 <calculate_crc16>
 800164c:	4603      	mov	r3, r0
 800164e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    
    if (calculated_crc != rx_command->CRC16) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	885b      	ldrh	r3, [r3, #2]
 8001654:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001656:	429a      	cmp	r2, r3
 8001658:	d001      	beq.n	800165e <decode_uart_rx_command+0x50>
        return false; // CRC mismatch
 800165a:	2300      	movs	r3, #0
 800165c:	e017      	b.n	800168e <decode_uart_rx_command+0x80>
    }
    
    // Additional verification: check if there's a packet CRC after the command structure
    if (decoded_size >= sizeof(uart_rx_command_t) + sizeof(uint16_t)) {
 800165e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001660:	2b05      	cmp	r3, #5
 8001662:	d913      	bls.n	800168c <decode_uart_rx_command+0x7e>
        uint16_t packet_crc;
        memcpy(&packet_crc, decoded_buffer + sizeof(uart_rx_command_t), sizeof(uint16_t));
 8001664:	f107 0318 	add.w	r3, r7, #24
 8001668:	3304      	adds	r3, #4
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	b29b      	uxth	r3, r3
 800166e:	82bb      	strh	r3, [r7, #20]
        
        uint16_t calculated_packet_crc = calculate_crc16(decoded_buffer, sizeof(uart_rx_command_t));
 8001670:	f107 0318 	add.w	r3, r7, #24
 8001674:	2104      	movs	r1, #4
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fe0e 	bl	8001298 <calculate_crc16>
 800167c:	4603      	mov	r3, r0
 800167e:	853b      	strh	r3, [r7, #40]	@ 0x28
        
        if (calculated_packet_crc != packet_crc) {
 8001680:	8abb      	ldrh	r3, [r7, #20]
 8001682:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <decode_uart_rx_command+0x7e>
            return false; // Packet CRC mismatch
 8001688:	2300      	movs	r3, #0
 800168a:	e000      	b.n	800168e <decode_uart_rx_command+0x80>
        }
    }
    
    return true;
 800168c:	2301      	movs	r3, #1
}
 800168e:	4618      	mov	r0, r3
 8001690:	3730      	adds	r7, #48	@ 0x30
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80016a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	4a06      	ldr	r2, [pc, #24]	@ (80016c8 <vApplicationGetIdleTaskMemory+0x30>)
 80016ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2280      	movs	r2, #128	@ 0x80
 80016b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	2000007c 	.word	0x2000007c
 80016c8:	2000011c 	.word	0x2000011c

080016cc <i2c_mux_reset>:
// All times are defined using milliseconds
#define I2C_MUX_TIMEOUT 1		// Depends on bit rate. At 400kHz, 1ms should be fine
#define I2C_MUX_RESET_TIME_LOW 1	// Minimum 6ns reset pulse according to datasheet
#define I2C_MUX_RESET_TIME_HIGH 0	// Start condition can begin immediately after reset

int i2c_mux_reset(i2c_mux_t* mux) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	if (mux->rst_port == NULL || mux->rst_pin == 0) return 1;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <i2c_mux_reset+0x18>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	891b      	ldrh	r3, [r3, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <i2c_mux_reset+0x1c>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e01a      	b.n	800171e <i2c_mux_reset+0x52>
	
	// Pull reset pin low
	HAL_GPIO_WritePin(mux->rst_port, mux->rst_pin, GPIO_PIN_RESET);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6858      	ldr	r0, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	891b      	ldrh	r3, [r3, #8]
 80016f0:	2200      	movs	r2, #0
 80016f2:	4619      	mov	r1, r3
 80016f4:	f002 fddc 	bl	80042b0 <HAL_GPIO_WritePin>
	HAL_Delay(I2C_MUX_RESET_TIME_LOW);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f001 ff0f 	bl	800351c <HAL_Delay>

	// Bring multiplexer out of reset
	HAL_GPIO_WritePin(mux->rst_port, mux->rst_pin, GPIO_PIN_SET);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6858      	ldr	r0, [r3, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	891b      	ldrh	r3, [r3, #8]
 8001706:	2201      	movs	r2, #1
 8001708:	4619      	mov	r1, r3
 800170a:	f002 fdd1 	bl	80042b0 <HAL_GPIO_WritePin>
	HAL_Delay(I2C_MUX_RESET_TIME_HIGH);
 800170e:	2000      	movs	r0, #0
 8001710:	f001 ff04 	bl	800351c <HAL_Delay>

	// Ensure all channels are disabled by default
	return i2c_mux_select_multi(mux, 0);
 8001714:	2100      	movs	r1, #0
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f805 	bl	8001726 <i2c_mux_select_multi>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <i2c_mux_select_multi>:

int i2c_mux_select_multi(i2c_mux_t* mux, uint8_t mask) {
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af02      	add	r7, sp, #8
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	460b      	mov	r3, r1
 8001730:	70fb      	strb	r3, [r7, #3]
	if (mux->hi2c == NULL) return 1;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <i2c_mux_select_multi+0x18>
 800173a:	2301      	movs	r3, #1
 800173c:	e02f      	b.n	800179e <i2c_mux_select_multi+0x78>

	// Transmit bitmask to multiplexer
	uint8_t addr = (I2C_MUX_BASE_ADDR + mux->addr_offset) << 1;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7a9b      	ldrb	r3, [r3, #10]
 8001742:	3370      	adds	r3, #112	@ 0x70
 8001744:	b2db      	uxtb	r3, r3
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef res;
	res = HAL_I2C_Master_Transmit(mux->hi2c, addr, &mask, 1, I2C_MUX_TIMEOUT);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	b299      	uxth	r1, r3
 8001752:	1cfa      	adds	r2, r7, #3
 8001754:	2301      	movs	r3, #1
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2301      	movs	r3, #1
 800175a:	f002 fe5d 	bl	8004418 <HAL_I2C_Master_Transmit>
 800175e:	4603      	mov	r3, r0
 8001760:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK) return 1;
 8001762:	7bbb      	ldrb	r3, [r7, #14]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <i2c_mux_select_multi+0x46>
 8001768:	2301      	movs	r3, #1
 800176a:	e018      	b.n	800179e <i2c_mux_select_multi+0x78>

	// Read back bitmask from multiplexer to verify
	uint8_t mask_check = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	737b      	strb	r3, [r7, #13]
	res = HAL_I2C_Master_Receive(mux->hi2c, addr, &mask_check, 1, I2C_MUX_TIMEOUT);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	b299      	uxth	r1, r3
 8001778:	f107 020d 	add.w	r2, r7, #13
 800177c:	2301      	movs	r3, #1
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	2301      	movs	r3, #1
 8001782:	f002 ff61 	bl	8004648 <HAL_I2C_Master_Receive>
 8001786:	4603      	mov	r3, r0
 8001788:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK || mask_check != mask) return 1;
 800178a:	7bbb      	ldrb	r3, [r7, #14]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d103      	bne.n	8001798 <i2c_mux_select_multi+0x72>
 8001790:	7b7a      	ldrb	r2, [r7, #13]
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <i2c_mux_select_multi+0x76>
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <i2c_mux_select_multi+0x78>
	return 0;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <i2c_mux_select>:

int i2c_mux_select(i2c_mux_t* mux, int ch) {
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b084      	sub	sp, #16
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]

	// If ch is in range 0-7 then one channel is enabled, else all are disabled
	uint8_t mask = 1 << ch;
 80017b0:	2201      	movs	r2, #1
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	73fb      	strb	r3, [r7, #15]
	return i2c_mux_select_multi(mux, mask);
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	4619      	mov	r1, r3
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ffb1 	bl	8001726 <i2c_mux_select_multi>
 80017c4:	4603      	mov	r3, r0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <MAX6650_Init>:
static bool max6650_write_register(max6650_handle_t *handle, uint8_t reg, uint8_t data);
static bool max6650_read_register(max6650_handle_t *handle, uint8_t reg, uint8_t *data);
static uint16_t calculate_rpm_from_tacho(uint8_t tacho_count, max6650_kscale_t k_scale);

bool MAX6650_Init(max6650_handle_t *handle, max6650_config_t *config)
{
 80017ce:	b590      	push	{r4, r7, lr}
 80017d0:	b085      	sub	sp, #20
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
    if (handle == NULL || config == NULL || config->hi2c == NULL) {
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d006      	beq.n	80017ec <MAX6650_Init+0x1e>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <MAX6650_Init+0x1e>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <MAX6650_Init+0x22>
        return false;
 80017ec:	2300      	movs	r3, #0
 80017ee:	e05f      	b.n	80018b0 <MAX6650_Init+0xe2>
    }

    // Copy configuration
    handle->config = *config;
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	4614      	mov	r4, r2
 80017f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    handle->i2c_address = get_i2c_address(config->add_line_connection);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	791b      	ldrb	r3, [r3, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	f000 f903 	bl	8001a0c <get_i2c_address>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	741a      	strb	r2, [r3, #16]
    handle->initialized = false;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	745a      	strb	r2, [r3, #17]

    // Set default timeout if not specified
    if (handle->config.i2c_timeout == 0) {
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d103      	bne.n	8001824 <MAX6650_Init+0x56>
        handle->config.i2c_timeout = MAX6650_DEFAULT_TIMEOUT;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001822:	60da      	str	r2, [r3, #12]
    }

    // Configure the MAX6650
    uint8_t config_byte = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	73fb      	strb	r3, [r7, #15]
    config_byte |= (config->operating_mode & 0x03) << MAX6650_CONFIG_MODE_SHIFT;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	795b      	ldrb	r3, [r3, #5]
 800182c:	b25b      	sxtb	r3, r3
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	b25b      	sxtb	r3, r3
 8001832:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001836:	b25a      	sxtb	r2, r3
 8001838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183c:	4313      	orrs	r3, r2
 800183e:	b25b      	sxtb	r3, r3
 8001840:	73fb      	strb	r3, [r7, #15]
    config_byte |= (config->fan_voltage & 0x01) << MAX6650_CONFIG_VOLTAGE_SHIFT;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	799b      	ldrb	r3, [r3, #6]
 8001846:	b25b      	sxtb	r3, r3
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	b25b      	sxtb	r3, r3
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	b25a      	sxtb	r2, r3
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	4313      	orrs	r3, r2
 8001858:	b25b      	sxtb	r3, r3
 800185a:	73fb      	strb	r3, [r7, #15]
    config_byte |= (config->k_scale & 0x07);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	79db      	ldrb	r3, [r3, #7]
 8001860:	b25b      	sxtb	r3, r3
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	b25a      	sxtb	r2, r3
 8001868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186c:	4313      	orrs	r3, r2
 800186e:	b25b      	sxtb	r3, r3
 8001870:	73fb      	strb	r3, [r7, #15]

    // Write configuration register
    if (!max6650_write_register(handle, MAX6650_CONFIG_REG, config_byte)) {
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	461a      	mov	r2, r3
 8001876:	2102      	movs	r1, #2
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f8eb 	bl	8001a54 <max6650_write_register>
 800187e:	4603      	mov	r3, r0
 8001880:	f083 0301 	eor.w	r3, r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MAX6650_Init+0xc0>
        return false;
 800188a:	2300      	movs	r3, #0
 800188c:	e010      	b.n	80018b0 <MAX6650_Init+0xe2>
    }

    // Set count time register
    if (!max6650_write_register(handle, MAX6650_COUNT_REG, MAX6650_DEFAULT_COUNT_TIME)) {
 800188e:	2202      	movs	r2, #2
 8001890:	2116      	movs	r1, #22
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f8de 	bl	8001a54 <max6650_write_register>
 8001898:	4603      	mov	r3, r0
 800189a:	f083 0301 	eor.w	r3, r3, #1
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MAX6650_Init+0xda>
        return false;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e003      	b.n	80018b0 <MAX6650_Init+0xe2>
    }

    handle->initialized = true;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	745a      	strb	r2, [r3, #17]
    return true;
 80018ae:	2301      	movs	r3, #1
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd90      	pop	{r4, r7, pc}

080018b8 <MAX6650_ReadData>:

bool MAX6650_ReadData(max6650_handle_t *handle, max6650_data_t *data)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
    if (handle == NULL || data == NULL || !handle->initialized) {
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d009      	beq.n	80018dc <MAX6650_ReadData+0x24>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d006      	beq.n	80018dc <MAX6650_ReadData+0x24>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	7c5b      	ldrb	r3, [r3, #17]
 80018d2:	f083 0301 	eor.w	r3, r3, #1
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MAX6650_ReadData+0x28>
        return false;
 80018dc:	2300      	movs	r3, #0
 80018de:	e030      	b.n	8001942 <MAX6650_ReadData+0x8a>
    }

    uint8_t tacho_count = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]
    uint8_t alarm_status = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73bb      	strb	r3, [r7, #14]

    // Read tachometer count
    if (!max6650_read_register(handle, MAX6650_TACHO_0_REG, &tacho_count)) {
 80018e8:	f107 030f 	add.w	r3, r7, #15
 80018ec:	461a      	mov	r2, r3
 80018ee:	210c      	movs	r1, #12
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f8d5 	bl	8001aa0 <max6650_read_register>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f083 0301 	eor.w	r3, r3, #1
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MAX6650_ReadData+0x4e>
        return false;
 8001902:	2300      	movs	r3, #0
 8001904:	e01d      	b.n	8001942 <MAX6650_ReadData+0x8a>
    }

    // Read alarm status
    if (!max6650_read_register(handle, MAX6650_ALARM_REG, &alarm_status)) {
 8001906:	f107 030e 	add.w	r3, r7, #14
 800190a:	461a      	mov	r2, r3
 800190c:	210a      	movs	r1, #10
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f8c6 	bl	8001aa0 <max6650_read_register>
 8001914:	4603      	mov	r3, r0
 8001916:	f083 0301 	eor.w	r3, r3, #1
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MAX6650_ReadData+0x6c>
        return false;
 8001920:	2300      	movs	r3, #0
 8001922:	e00e      	b.n	8001942 <MAX6650_ReadData+0x8a>
    }

    // Calculate RPM from tachometer count
    data->fan_rpm = calculate_rpm_from_tacho(tacho_count, handle->config.k_scale);
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	79db      	ldrb	r3, [r3, #7]
 800192a:	4619      	mov	r1, r3
 800192c:	4610      	mov	r0, r2
 800192e:	f000 f8dc 	bl	8001aea <calculate_rpm_from_tacho>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	801a      	strh	r2, [r3, #0]
    data->status_flag = alarm_status;
 800193a:	7bba      	ldrb	r2, [r7, #14]
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	709a      	strb	r2, [r3, #2]

    return true;
 8001940:	2301      	movs	r3, #1
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <MAX6650_ControlFan>:

bool MAX6650_ControlFan(max6650_handle_t *handle, uint8_t control_flag)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL || !handle->initialized) {
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d006      	beq.n	800196a <MAX6650_ControlFan+0x20>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7c5b      	ldrb	r3, [r3, #17]
 8001960:	f083 0301 	eor.w	r3, r3, #1
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MAX6650_ControlFan+0x24>
        return false;
 800196a:	2300      	movs	r3, #0
 800196c:	e049      	b.n	8001a02 <MAX6650_ControlFan+0xb8>
    }

    uint8_t config_byte = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	73bb      	strb	r3, [r7, #14]
    max6650_operating_mode_t new_mode;

    switch (control_flag) {
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d00c      	beq.n	8001992 <MAX6650_ControlFan+0x48>
 8001978:	2b03      	cmp	r3, #3
 800197a:	dc0d      	bgt.n	8001998 <MAX6650_ControlFan+0x4e>
 800197c:	2b01      	cmp	r3, #1
 800197e:	d002      	beq.n	8001986 <MAX6650_ControlFan+0x3c>
 8001980:	2b02      	cmp	r3, #2
 8001982:	d003      	beq.n	800198c <MAX6650_ControlFan+0x42>
 8001984:	e008      	b.n	8001998 <MAX6650_ControlFan+0x4e>
        case CFF_ON:
            new_mode = MAX6650_MODE_SOFTWARE_FULL_ON;
 8001986:	2300      	movs	r3, #0
 8001988:	73fb      	strb	r3, [r7, #15]
            break;
 800198a:	e007      	b.n	800199c <MAX6650_ControlFan+0x52>
        case CFF_OFF:
            new_mode = MAX6650_MODE_SOFTWARE_OFF;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
            break;
 8001990:	e004      	b.n	800199c <MAX6650_ControlFan+0x52>
        case CFF_AUTO:
            new_mode = MAX6650_MODE_CLOSED_LOOP;
 8001992:	2302      	movs	r3, #2
 8001994:	73fb      	strb	r3, [r7, #15]
            break;
 8001996:	e001      	b.n	800199c <MAX6650_ControlFan+0x52>
        default:
            return false;
 8001998:	2300      	movs	r3, #0
 800199a:	e032      	b.n	8001a02 <MAX6650_ControlFan+0xb8>
    }

    // Read current configuration
    if (!max6650_read_register(handle, MAX6650_CONFIG_REG, &config_byte)) {
 800199c:	f107 030e 	add.w	r3, r7, #14
 80019a0:	461a      	mov	r2, r3
 80019a2:	2102      	movs	r1, #2
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f87b 	bl	8001aa0 <max6650_read_register>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f083 0301 	eor.w	r3, r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MAX6650_ControlFan+0x70>
        return false;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e023      	b.n	8001a02 <MAX6650_ControlFan+0xb8>
    }

    // Update mode bits
    config_byte &= ~MAX6650_CONFIG_MODE_MASK;
 80019ba:	7bbb      	ldrb	r3, [r7, #14]
 80019bc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	73bb      	strb	r3, [r7, #14]
    config_byte |= (new_mode & 0x03) << MAX6650_CONFIG_MODE_SHIFT;
 80019c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	b25b      	sxtb	r3, r3
 80019cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80019d0:	b25a      	sxtb	r2, r3
 80019d2:	7bbb      	ldrb	r3, [r7, #14]
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	4313      	orrs	r3, r2
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	73bb      	strb	r3, [r7, #14]

    // Write updated configuration
    if (!max6650_write_register(handle, MAX6650_CONFIG_REG, config_byte)) {
 80019de:	7bbb      	ldrb	r3, [r7, #14]
 80019e0:	461a      	mov	r2, r3
 80019e2:	2102      	movs	r1, #2
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f835 	bl	8001a54 <max6650_write_register>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f083 0301 	eor.w	r3, r3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MAX6650_ControlFan+0xb0>
        return false;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e003      	b.n	8001a02 <MAX6650_ControlFan+0xb8>
    }

    // Update handle configuration
    handle->config.operating_mode = new_mode;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	7bfa      	ldrb	r2, [r7, #15]
 80019fe:	715a      	strb	r2, [r3, #5]
    return true;
 8001a00:	2301      	movs	r3, #1
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <get_i2c_address>:
}

// Private function implementations

static uint8_t get_i2c_address(max6650_add_line_t add_line)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
    switch (add_line) {
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d813      	bhi.n	8001a44 <get_i2c_address+0x38>
 8001a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a24 <get_i2c_address+0x18>)
 8001a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a22:	bf00      	nop
 8001a24:	08001a35 	.word	0x08001a35
 8001a28:	08001a39 	.word	0x08001a39
 8001a2c:	08001a3d 	.word	0x08001a3d
 8001a30:	08001a41 	.word	0x08001a41
        case MAX6650_ADD_LINE_GND:
            return MAX6650_I2C_ADDR_GND;
 8001a34:	2348      	movs	r3, #72	@ 0x48
 8001a36:	e006      	b.n	8001a46 <get_i2c_address+0x3a>
        case MAX6650_ADD_LINE_VCC:
            return MAX6650_I2C_ADDR_VCC;
 8001a38:	234b      	movs	r3, #75	@ 0x4b
 8001a3a:	e004      	b.n	8001a46 <get_i2c_address+0x3a>
        case MAX6650_ADD_LINE_NOT_CONNECTED:
            return MAX6650_I2C_ADDR_NC;
 8001a3c:	231b      	movs	r3, #27
 8001a3e:	e002      	b.n	8001a46 <get_i2c_address+0x3a>
        case MAX6650_ADD_LINE_RES10K:
            return MAX6650_I2C_ADDR_RES10K;
 8001a40:	231f      	movs	r3, #31
 8001a42:	e000      	b.n	8001a46 <get_i2c_address+0x3a>
        default:
            return MAX6650_I2C_ADDR_GND;
 8001a44:	2348      	movs	r3, #72	@ 0x48
    }
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <max6650_write_register>:
        default:                return 4;
    }
}

static bool max6650_write_register(max6650_handle_t *handle, uint8_t reg, uint8_t data)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af04      	add	r7, sp, #16
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	70fb      	strb	r3, [r7, #3]
 8001a60:	4613      	mov	r3, r2
 8001a62:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Write(handle->config.hi2c, 
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6818      	ldr	r0, [r3, #0]
                               handle->i2c_address << 1, 
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	7c1b      	ldrb	r3, [r3, #16]
    status = HAL_I2C_Mem_Write(handle->config.hi2c, 
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	b299      	uxth	r1, r3
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	9302      	str	r3, [sp, #8]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	1cbb      	adds	r3, r7, #2
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2301      	movs	r3, #1
 8001a84:	f002 fed6 	bl	8004834 <HAL_I2C_Mem_Write>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	73fb      	strb	r3, [r7, #15]
                               reg, 
                               I2C_MEMADD_SIZE_8BIT, 
                               &data, 
                               1, 
                               handle->config.i2c_timeout);
    return (status == HAL_OK);
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	bf0c      	ite	eq
 8001a92:	2301      	moveq	r3, #1
 8001a94:	2300      	movne	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <max6650_read_register>:

static bool max6650_read_register(max6650_handle_t *handle, uint8_t reg, uint8_t *data)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	@ 0x28
 8001aa4:	af04      	add	r7, sp, #16
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Read(handle->config.hi2c, 
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6818      	ldr	r0, [r3, #0]
                              handle->i2c_address << 1, 
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	7c1b      	ldrb	r3, [r3, #16]
    status = HAL_I2C_Mem_Read(handle->config.hi2c, 
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	b299      	uxth	r1, r3
 8001aba:	7afb      	ldrb	r3, [r7, #11]
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	9302      	str	r3, [sp, #8]
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2301      	movs	r3, #1
 8001ace:	f002 ffc5 	bl	8004a5c <HAL_I2C_Mem_Read>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	75fb      	strb	r3, [r7, #23]
                              reg, 
                              I2C_MEMADD_SIZE_8BIT, 
                              data, 
                              1, 
                              handle->config.i2c_timeout);
    return (status == HAL_OK);
 8001ad6:	7dfb      	ldrb	r3, [r7, #23]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <calculate_rpm_from_tacho>:

static uint16_t calculate_rpm_from_tacho(uint8_t tacho_count, max6650_kscale_t k_scale)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	460a      	mov	r2, r1
 8001af4:	71fb      	strb	r3, [r7, #7]
 8001af6:	4613      	mov	r3, r2
 8001af8:	71bb      	strb	r3, [r7, #6]
    if (tacho_count == 0) {
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <calculate_rpm_from_tacho+0x1a>
        return 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	e00a      	b.n	8001b1a <calculate_rpm_from_tacho+0x30>
    }

    // Based on datasheet formula: FanSpeed = (tacho / 2) x count_t
    // Then multiply by 60 to convert from RPS to RPM
    uint16_t rps = (tacho_count / 2) / MAX6650_DEFAULT_COUNT_TIME;
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	089b      	lsrs	r3, r3, #2
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	81fb      	strh	r3, [r7, #14]
    uint16_t rpm = rps * 60;
 8001b0c:	89fb      	ldrh	r3, [r7, #14]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	0112      	lsls	r2, r2, #4
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	81bb      	strh	r3, [r7, #12]

    return rpm;
 8001b18:	89bb      	ldrh	r3, [r7, #12]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <bmp280_multi_init>:
                       GPIO_TypeDef *rst_port,
                       uint16_t rst_pin,
                       uint8_t mux_addr_offset,
                       uint8_t sensor_addresses[NUM_BMP280_SENSORS],
                       uint8_t sensor_channels[NUM_BMP280_SENSORS])
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	807b      	strh	r3, [r7, #2]
    if (system == NULL || hi2c == NULL || sensor_addresses == NULL || sensor_channels == NULL) {
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d008      	beq.n	8001b4c <bmp280_multi_init+0x26>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <bmp280_multi_init+0x26>
 8001b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <bmp280_multi_init+0x26>
 8001b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <bmp280_multi_init+0x2a>
        return false;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	e08f      	b.n	8001c70 <bmp280_multi_init+0x14a>
    }

    // Initialize multiplexer
    system->mux.hi2c = hi2c;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	601a      	str	r2, [r3, #0]
    system->mux.rst_port = rst_port;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	605a      	str	r2, [r3, #4]
    system->mux.rst_pin = rst_pin;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	887a      	ldrh	r2, [r7, #2]
 8001b60:	811a      	strh	r2, [r3, #8]
    system->mux.addr_offset = mux_addr_offset;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b68:	729a      	strb	r2, [r3, #10]

    // Reset multiplexer if reset pin is provided
    if (rst_port != NULL && rst_pin != 0) {
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00b      	beq.n	8001b88 <bmp280_multi_init+0x62>
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d008      	beq.n	8001b88 <bmp280_multi_init+0x62>
        if (i2c_mux_reset(&system->mux) != 0) {
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fda7 	bl	80016cc <i2c_mux_reset>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <bmp280_multi_init+0x62>
            return false;
 8001b84:	2300      	movs	r3, #0
 8001b86:	e073      	b.n	8001c70 <bmp280_multi_init+0x14a>
        }
    }

    // Initialize default parameters for all sensors
    bmp280_init_default_params(&system->sensor_params);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fd54 	bl	800063c <bmp280_init_default_params>
    system->sensor_params.mode = BMP280_MODE_FORCED; // Use forced mode for better control
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144

    // Initialize all sensors
    for (uint8_t i = 0; i < NUM_BMP280_SENSORS; i++) {
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	75fb      	strb	r3, [r7, #23]
 8001ba0:	e05d      	b.n	8001c5e <bmp280_multi_init+0x138>
        // Store channel mapping
        system->sensor_channels[i] = sensor_channels[i];
 8001ba2:	7dfb      	ldrb	r3, [r7, #23]
 8001ba4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ba6:	441a      	add	r2, r3
 8001ba8:	7dfb      	ldrb	r3, [r7, #23]
 8001baa:	7811      	ldrb	r1, [r2, #0]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	460a      	mov	r2, r1
 8001bb2:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a
        
        // Initialize sensor structure
        system->sensors[i].addr = sensor_addresses[i];
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bba:	4413      	add	r3, r2
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	2134      	movs	r1, #52	@ 0x34
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3330      	adds	r3, #48	@ 0x30
 8001bce:	4602      	mov	r2, r0
 8001bd0:	801a      	strh	r2, [r3, #0]
        system->sensors[i].i2c = hi2c;
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	2134      	movs	r1, #52	@ 0x34
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	3334      	adds	r3, #52	@ 0x34
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	601a      	str	r2, [r3, #0]
        
        // Select multiplexer channel
        if (i2c_mux_select(&system->mux, sensor_channels[i]) != 0) {
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	7dfb      	ldrb	r3, [r7, #23]
 8001be8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f7ff fdd9 	bl	80017a6 <i2c_mux_select>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d006      	beq.n	8001c08 <bmp280_multi_init+0xe2>
            system->sensors_initialized[i] = false;
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
            continue;
 8001c06:	e027      	b.n	8001c58 <bmp280_multi_init+0x132>
        }

        // Initialize BMP280 sensor
        if (bmp280_init(&system->sensors[i], &system->sensor_params)) {
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	2234      	movs	r2, #52	@ 0x34
 8001c0c:	fb02 f303 	mul.w	r3, r2, r3
 8001c10:	3308      	adds	r3, #8
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	4413      	add	r3, r2
 8001c16:	1d1a      	adds	r2, r3, #4
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4610      	mov	r0, r2
 8001c22:	f7fe fe87 	bl	8000934 <bmp280_init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00c      	beq.n	8001c46 <bmp280_multi_init+0x120>
            system->sensors_initialized[i] = true;
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4413      	add	r3, r2
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
            system->last_pressures[i] = 0;
 8001c38:	7dfa      	ldrb	r2, [r7, #23]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3254      	adds	r2, #84	@ 0x54
 8001c3e:	2100      	movs	r1, #0
 8001c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001c44:	e005      	b.n	8001c52 <bmp280_multi_init+0x12c>
        } else {
            system->sensors_initialized[i] = false;
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
        }

        // Small delay between sensor initializations
        HAL_Delay(10);
 8001c52:	200a      	movs	r0, #10
 8001c54:	f001 fc62 	bl	800351c <HAL_Delay>
    for (uint8_t i = 0; i < NUM_BMP280_SENSORS; i++) {
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	75fb      	strb	r3, [r7, #23]
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d99e      	bls.n	8001ba2 <bmp280_multi_init+0x7c>
    }

    // Disable all multiplexer channels
    i2c_mux_select(&system->mux, 8); // Invalid channel disables all
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2108      	movs	r1, #8
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fd9c 	bl	80017a6 <i2c_mux_select>

    return true;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <bmp280_multi_read_sensor>:

bool bmp280_multi_read_sensor(bmp280_multi_system_t *system, 
                              uint8_t sensor_index, 
                              float *pressure)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	460b      	mov	r3, r1
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	72fb      	strb	r3, [r7, #11]
    if (system == NULL || pressure == NULL || sensor_index >= NUM_BMP280_SENSORS) {
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <bmp280_multi_read_sensor+0x20>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <bmp280_multi_read_sensor+0x20>
 8001c92:	7afb      	ldrb	r3, [r7, #11]
 8001c94:	2b05      	cmp	r3, #5
 8001c96:	d901      	bls.n	8001c9c <bmp280_multi_read_sensor+0x24>
        return false;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e043      	b.n	8001d24 <bmp280_multi_read_sensor+0xac>
    }

    if (!system->sensors_initialized[sensor_index]) {
 8001c9c:	7afb      	ldrb	r3, [r7, #11]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 8001ca6:	f083 0301 	eor.w	r3, r3, #1
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <bmp280_multi_read_sensor+0x3c>
        return false;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e037      	b.n	8001d24 <bmp280_multi_read_sensor+0xac>
    }

    // Select multiplexer channel
    if (i2c_mux_select(&system->mux, system->sensor_channels[sensor_index]) != 0) {
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	7afb      	ldrb	r3, [r7, #11]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f7ff fd70 	bl	80017a6 <i2c_mux_select>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <bmp280_multi_read_sensor+0x58>
        return false;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e029      	b.n	8001d24 <bmp280_multi_read_sensor+0xac>

    // Read sensor data
    int32_t temperature;
    uint32_t pressure_fixed;
    
    if (!bmp280_read_fixed(&system->sensors[sensor_index], &temperature, &pressure_fixed, NULL)) {
 8001cd0:	7afb      	ldrb	r3, [r7, #11]
 8001cd2:	2234      	movs	r2, #52	@ 0x34
 8001cd4:	fb02 f303 	mul.w	r3, r2, r3
 8001cd8:	3308      	adds	r3, #8
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4413      	add	r3, r2
 8001cde:	1d18      	adds	r0, r3, #4
 8001ce0:	f107 0210 	add.w	r2, r7, #16
 8001ce4:	f107 0114 	add.w	r1, r7, #20
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f7ff fa70 	bl	80011ce <bmp280_read_fixed>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f083 0301 	eor.w	r3, r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <bmp280_multi_read_sensor+0x86>
        return false;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e012      	b.n	8001d24 <bmp280_multi_read_sensor+0xac>
    }

    // Convert to float pressure in Pascals
    *pressure = PRESSURE_FIXED_TO_FLOAT(pressure_fixed);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	ee07 3a90 	vmov	s15, r3
 8001d04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d08:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001d2c <bmp280_multi_read_sensor+0xb4>
 8001d0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	edc3 7a00 	vstr	s15, [r3]
    
    // Store for later use
    system->last_pressures[sensor_index] = pressure_fixed;
 8001d16:	7afa      	ldrb	r2, [r7, #11]
 8001d18:	6939      	ldr	r1, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3254      	adds	r2, #84	@ 0x54
 8001d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    return true;
 8001d22:	2301      	movs	r3, #1
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	43800000 	.word	0x43800000

08001d30 <bmp280_multi_force_measurement>:

bool bmp280_multi_force_measurement(bmp280_multi_system_t *system)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
    if (system == NULL) {
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <bmp280_multi_force_measurement+0x12>
        return false;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e041      	b.n	8001dc6 <bmp280_multi_force_measurement+0x96>
    }

    bool success = true;
 8001d42:	2301      	movs	r3, #1
 8001d44:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < NUM_BMP280_SENSORS; i++) {
 8001d46:	2300      	movs	r3, #0
 8001d48:	73bb      	strb	r3, [r7, #14]
 8001d4a:	e033      	b.n	8001db4 <bmp280_multi_force_measurement+0x84>
        if (!system->sensors_initialized[i]) {
 8001d4c:	7bbb      	ldrb	r3, [r7, #14]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 8001d56:	f083 0301 	eor.w	r3, r3, #1
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d125      	bne.n	8001dac <bmp280_multi_force_measurement+0x7c>
            continue;
        }

        // Select multiplexer channel
        if (i2c_mux_select(&system->mux, system->sensor_channels[i]) != 0) {
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	7bbb      	ldrb	r3, [r7, #14]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f7ff fd1a 	bl	80017a6 <i2c_mux_select>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <bmp280_multi_force_measurement+0x4e>
            success = false;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	73fb      	strb	r3, [r7, #15]
            continue;
 8001d7c:	e017      	b.n	8001dae <bmp280_multi_force_measurement+0x7e>
        }

        // Force measurement
        if (!bmp280_force_measurement(&system->sensors[i])) {
 8001d7e:	7bbb      	ldrb	r3, [r7, #14]
 8001d80:	2234      	movs	r2, #52	@ 0x34
 8001d82:	fb02 f303 	mul.w	r3, r2, r3
 8001d86:	3308      	adds	r3, #8
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fe81 	bl	8000a96 <bmp280_force_measurement>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f083 0301 	eor.w	r3, r3, #1
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <bmp280_multi_force_measurement+0x74>
            success = false;
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]
        }

        // Small delay between operations
        HAL_Delay(1);
 8001da4:	2001      	movs	r0, #1
 8001da6:	f001 fbb9 	bl	800351c <HAL_Delay>
 8001daa:	e000      	b.n	8001dae <bmp280_multi_force_measurement+0x7e>
            continue;
 8001dac:	bf00      	nop
    for (uint8_t i = 0; i < NUM_BMP280_SENSORS; i++) {
 8001dae:	7bbb      	ldrb	r3, [r7, #14]
 8001db0:	3301      	adds	r3, #1
 8001db2:	73bb      	strb	r3, [r7, #14]
 8001db4:	7bbb      	ldrb	r3, [r7, #14]
 8001db6:	2b05      	cmp	r3, #5
 8001db8:	d9c8      	bls.n	8001d4c <bmp280_multi_force_measurement+0x1c>
    }

    // Disable all multiplexer channels
    i2c_mux_select(&system->mux, 8);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2108      	movs	r1, #8
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fcf1 	bl	80017a6 <i2c_mux_select>

    return success;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <bmp280_multi_is_measuring>:

bool bmp280_multi_is_measuring(bmp280_multi_system_t *system)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
    if (system == NULL) {
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <bmp280_multi_is_measuring+0x12>
        return false;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	e032      	b.n	8001e46 <bmp280_multi_is_measuring+0x78>
    }

    for (uint8_t i = 0; i < NUM_BMP280_SENSORS; i++) {
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	e02b      	b.n	8001e3e <bmp280_multi_is_measuring+0x70>
        if (!system->sensors_initialized[i]) {
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	4413      	add	r3, r2
 8001dec:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 8001df0:	f083 0301 	eor.w	r3, r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d11b      	bne.n	8001e32 <bmp280_multi_is_measuring+0x64>
            continue;
        }

        // Select multiplexer channel
        if (i2c_mux_select(&system->mux, system->sensor_channels[i]) != 0) {
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001e06:	4619      	mov	r1, r3
 8001e08:	f7ff fccd 	bl	80017a6 <i2c_mux_select>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d111      	bne.n	8001e36 <bmp280_multi_is_measuring+0x68>
            continue;
        }

        // Check if measuring
        if (bmp280_is_measuring(&system->sensors[i])) {
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	2234      	movs	r2, #52	@ 0x34
 8001e16:	fb02 f303 	mul.w	r3, r2, r3
 8001e1a:	3308      	adds	r3, #8
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4413      	add	r3, r2
 8001e20:	3304      	adds	r3, #4
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fe61 	bl	8000aea <bmp280_is_measuring>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <bmp280_multi_is_measuring+0x6a>
            return true;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e009      	b.n	8001e46 <bmp280_multi_is_measuring+0x78>
            continue;
 8001e32:	bf00      	nop
 8001e34:	e000      	b.n	8001e38 <bmp280_multi_is_measuring+0x6a>
            continue;
 8001e36:	bf00      	nop
    for (uint8_t i = 0; i < NUM_BMP280_SENSORS; i++) {
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d9d0      	bls.n	8001de6 <bmp280_multi_is_measuring+0x18>
        }
    }

    return false;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <bmp280_multi_read_differences>:

bool bmp280_multi_read_differences(bmp280_multi_system_t *system, 
                                   bmp280_sensors_data_t *data)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08c      	sub	sp, #48	@ 0x30
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
    if (system == NULL || data == NULL) {
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <bmp280_multi_read_differences+0x16>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <bmp280_multi_read_differences+0x1a>
        return false;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e0e7      	b.n	800203a <bmp280_multi_read_differences+0x1ea>
    }

    float pressures[NUM_BMP280_SENSORS];
    uint8_t valid_readings = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Read all sensors
    for (uint8_t i = 0; i < NUM_BMP280_SENSORS; i++) {
 8001e70:	2300      	movs	r3, #0
 8001e72:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001e76:	e029      	b.n	8001ecc <bmp280_multi_read_differences+0x7c>
        if (bmp280_multi_read_sensor(system, i, &pressures[i])) {
 8001e78:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e7c:	f107 0208 	add.w	r2, r7, #8
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	441a      	add	r2, r3
 8001e84:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e88:	4619      	mov	r1, r3
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fef4 	bl	8001c78 <bmp280_multi_read_sensor>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00c      	beq.n	8001eb0 <bmp280_multi_read_differences+0x60>
            valid_readings |= (1 << i);
 8001e96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	b25a      	sxtb	r2, r3
 8001ea2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	b25b      	sxtb	r3, r3
 8001eaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001eae:	e008      	b.n	8001ec2 <bmp280_multi_read_differences+0x72>
        } else {
            pressures[i] = 0.0f;
 8001eb0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	3330      	adds	r3, #48	@ 0x30
 8001eb8:	443b      	add	r3, r7
 8001eba:	3b28      	subs	r3, #40	@ 0x28
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_BMP280_SENSORS; i++) {
 8001ec2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001ecc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d9d1      	bls.n	8001e78 <bmp280_multi_read_differences+0x28>

    // Calculate differences between sensor pairs
    // Only calculate if both sensors in the pair are valid
    
    // delta_pres_0: difference between sensor1 (index 0) and sensor2 (index 1)
    if ((valid_readings & 0x03) == 0x03) { // Both sensor 0 and 1 are valid
 8001ed4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d128      	bne.n	8001f32 <bmp280_multi_read_differences+0xe2>
        float diff = pressures[0] - pressures[1];
 8001ee0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ee4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eec:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        // Convert to int16_t (Pa), clamp to prevent overflow
        if (diff > 32767.0f) diff = 32767.0f;
 8001ef0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001ef4:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8002044 <bmp280_multi_read_differences+0x1f4>
 8001ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f00:	dd01      	ble.n	8001f06 <bmp280_multi_read_differences+0xb6>
 8001f02:	4b51      	ldr	r3, [pc, #324]	@ (8002048 <bmp280_multi_read_differences+0x1f8>)
 8001f04:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (diff < -32768.0f) diff = -32768.0f;
 8001f06:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001f0a:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800204c <bmp280_multi_read_differences+0x1fc>
 8001f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f16:	d502      	bpl.n	8001f1e <bmp280_multi_read_differences+0xce>
 8001f18:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 8001f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
        data->delta_pres_0 = (int16_t)diff;
 8001f1e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f26:	ee17 3a90 	vmov	r3, s15
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	801a      	strh	r2, [r3, #0]
 8001f30:	e002      	b.n	8001f38 <bmp280_multi_read_differences+0xe8>
    } else {
        data->delta_pres_0 = 0;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2200      	movs	r2, #0
 8001f36:	801a      	strh	r2, [r3, #0]
    }

    // delta_pres_1: difference between sensor3 (index 2) and sensor4 (index 3)
    if ((valid_readings & 0x0C) == 0x0C) { // Both sensor 2 and 3 are valid
 8001f38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b0c      	cmp	r3, #12
 8001f42:	d128      	bne.n	8001f96 <bmp280_multi_read_differences+0x146>
        float diff = pressures[2] - pressures[3];
 8001f44:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f48:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f50:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        if (diff > 32767.0f) diff = 32767.0f;
 8001f54:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f58:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8002044 <bmp280_multi_read_differences+0x1f4>
 8001f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f64:	dd01      	ble.n	8001f6a <bmp280_multi_read_differences+0x11a>
 8001f66:	4b38      	ldr	r3, [pc, #224]	@ (8002048 <bmp280_multi_read_differences+0x1f8>)
 8001f68:	627b      	str	r3, [r7, #36]	@ 0x24
        if (diff < -32768.0f) diff = -32768.0f;
 8001f6a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f6e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800204c <bmp280_multi_read_differences+0x1fc>
 8001f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7a:	d502      	bpl.n	8001f82 <bmp280_multi_read_differences+0x132>
 8001f7c:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
        data->delta_pres_1 = (int16_t)diff;
 8001f82:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f8a:	ee17 3a90 	vmov	r3, s15
 8001f8e:	b21a      	sxth	r2, r3
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	805a      	strh	r2, [r3, #2]
 8001f94:	e002      	b.n	8001f9c <bmp280_multi_read_differences+0x14c>
    } else {
        data->delta_pres_1 = 0;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	805a      	strh	r2, [r3, #2]
    }

    // delta_pres_2: difference between sensor5 (index 4) and sensor6 (index 5)
    if ((valid_readings & 0x30) == 0x30) { // Both sensor 4 and 5 are valid
 8001f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fa0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001fa4:	2b30      	cmp	r3, #48	@ 0x30
 8001fa6:	d128      	bne.n	8001ffa <bmp280_multi_read_differences+0x1aa>
        float diff = pressures[4] - pressures[5];
 8001fa8:	ed97 7a06 	vldr	s14, [r7, #24]
 8001fac:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb4:	edc7 7a08 	vstr	s15, [r7, #32]
        if (diff > 32767.0f) diff = 32767.0f;
 8001fb8:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fbc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002044 <bmp280_multi_read_differences+0x1f4>
 8001fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc8:	dd01      	ble.n	8001fce <bmp280_multi_read_differences+0x17e>
 8001fca:	4b1f      	ldr	r3, [pc, #124]	@ (8002048 <bmp280_multi_read_differences+0x1f8>)
 8001fcc:	623b      	str	r3, [r7, #32]
        if (diff < -32768.0f) diff = -32768.0f;
 8001fce:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fd2:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800204c <bmp280_multi_read_differences+0x1fc>
 8001fd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fde:	d502      	bpl.n	8001fe6 <bmp280_multi_read_differences+0x196>
 8001fe0:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 8001fe4:	623b      	str	r3, [r7, #32]
        data->delta_pres_2 = (int16_t)diff;
 8001fe6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fee:	ee17 3a90 	vmov	r3, s15
 8001ff2:	b21a      	sxth	r2, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	809a      	strh	r2, [r3, #4]
 8001ff8:	e002      	b.n	8002000 <bmp280_multi_read_differences+0x1b0>
    } else {
        data->delta_pres_2 = 0;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	809a      	strh	r2, [r3, #4]
    }

    // Disable all multiplexer channels
    i2c_mux_select(&system->mux, 8);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2108      	movs	r1, #8
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fbce 	bl	80017a6 <i2c_mux_select>

    // Return true if at least one pair was successfully read
    return ((valid_readings & 0x03) == 0x03) || 
 800200a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800200e:	f003 0303 	and.w	r3, r3, #3
           ((valid_readings & 0x0C) == 0x0C) || 
 8002012:	2b03      	cmp	r3, #3
 8002014:	d00b      	beq.n	800202e <bmp280_multi_read_differences+0x1de>
 8002016:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800201a:	f003 030c 	and.w	r3, r3, #12
    return ((valid_readings & 0x03) == 0x03) || 
 800201e:	2b0c      	cmp	r3, #12
 8002020:	d005      	beq.n	800202e <bmp280_multi_read_differences+0x1de>
           ((valid_readings & 0x30) == 0x30);
 8002022:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002026:	f003 0330 	and.w	r3, r3, #48	@ 0x30
           ((valid_readings & 0x0C) == 0x0C) || 
 800202a:	2b30      	cmp	r3, #48	@ 0x30
 800202c:	d101      	bne.n	8002032 <bmp280_multi_read_differences+0x1e2>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <bmp280_multi_read_differences+0x1e4>
 8002032:	2300      	movs	r3, #0
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
}
 800203a:	4618      	mov	r0, r3
 800203c:	3730      	adds	r7, #48	@ 0x30
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	46fffe00 	.word	0x46fffe00
 8002048:	46fffe00 	.word	0x46fffe00
 800204c:	c7000000 	.word	0xc7000000

08002050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002050:	b5b0      	push	{r4, r5, r7, lr}
 8002052:	b0a0      	sub	sp, #128	@ 0x80
 8002054:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002056:	f001 fa28 	bl	80034aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800205a:	f000 f891 	bl	8002180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800205e:	f000 f9d1 	bl	8002404 <MX_GPIO_Init>
  MX_DMA_Init();
 8002062:	f000 f9a9 	bl	80023b8 <MX_DMA_Init>
  MX_CAN1_Init();
 8002066:	f000 f8d1 	bl	800220c <MX_CAN1_Init>
  MX_USART1_UART_Init();
 800206a:	f000 f945 	bl	80022f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800206e:	f000 f973 	bl	8002358 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002072:	f000 f901 	bl	8002278 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  can_gpio_verification = (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)==GPIO_PIN_SET);
 8002076:	2140      	movs	r1, #64	@ 0x40
 8002078:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800207c:	f002 f900 	bl	8004280 <HAL_GPIO_ReadPin>
 8002080:	4603      	mov	r3, r0
 8002082:	2b01      	cmp	r3, #1
 8002084:	bf0c      	ite	eq
 8002086:	2301      	moveq	r3, #1
 8002088:	2300      	movne	r3, #0
 800208a:	b2da      	uxtb	r2, r3
 800208c:	4b2d      	ldr	r3, [pc, #180]	@ (8002144 <main+0xf4>)
 800208e:	701a      	strb	r2, [r3, #0]
  perform_setup_threads(&huart1,&huart2,&hi2c1,&hi2c1,&hdma_usart1_rx,USART1,&hcan1);
 8002090:	4b2d      	ldr	r3, [pc, #180]	@ (8002148 <main+0xf8>)
 8002092:	9302      	str	r3, [sp, #8]
 8002094:	4b2d      	ldr	r3, [pc, #180]	@ (800214c <main+0xfc>)
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	4b2d      	ldr	r3, [pc, #180]	@ (8002150 <main+0x100>)
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	4b2d      	ldr	r3, [pc, #180]	@ (8002154 <main+0x104>)
 800209e:	4a2d      	ldr	r2, [pc, #180]	@ (8002154 <main+0x104>)
 80020a0:	492d      	ldr	r1, [pc, #180]	@ (8002158 <main+0x108>)
 80020a2:	482e      	ldr	r0, [pc, #184]	@ (800215c <main+0x10c>)
 80020a4:	f001 f9a8 	bl	80033f8 <perform_setup_threads>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of CAN_Transmit */
  osThreadDef(CAN_Transmit, can_logger_cycle, osPriorityBelowNormal, 0, 128);
 80020a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002160 <main+0x110>)
 80020aa:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80020ae:	461d      	mov	r5, r3
 80020b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CAN_TransmitHandle = osThreadCreate(osThread(CAN_Transmit), NULL);
 80020bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f006 f8b9 	bl	800823a <osThreadCreate>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4a26      	ldr	r2, [pc, #152]	@ (8002164 <main+0x114>)
 80020cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_Reception */
  osThreadDef(UART_Reception, uart_notifications_cycle, osPriorityBelowNormal, 0, 128);
 80020ce:	4b26      	ldr	r3, [pc, #152]	@ (8002168 <main+0x118>)
 80020d0:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80020d4:	461d      	mov	r5, r3
 80020d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_ReceptionHandle = osThreadCreate(osThread(UART_Reception), NULL);
 80020e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f006 f8a6 	bl	800823a <osThreadCreate>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4a1e      	ldr	r2, [pc, #120]	@ (800216c <main+0x11c>)
 80020f2:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_Transmit */
  osThreadDef(UART_Transmit, uart_logger_cycle, osPriorityBelowNormal, 0, 128);
 80020f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002170 <main+0x120>)
 80020f6:	f107 041c 	add.w	r4, r7, #28
 80020fa:	461d      	mov	r5, r3
 80020fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002100:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002104:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_TransmitHandle = osThreadCreate(osThread(UART_Transmit), NULL);
 8002108:	f107 031c 	add.w	r3, r7, #28
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f006 f893 	bl	800823a <osThreadCreate>
 8002114:	4603      	mov	r3, r0
 8002116:	4a17      	ldr	r2, [pc, #92]	@ (8002174 <main+0x124>)
 8002118:	6013      	str	r3, [r2, #0]

  /* definition and creation of MUX_PRES */
  osThreadDef(MUX_PRES, mux_pres_cycle, osPriorityBelowNormal, 0, 128);
 800211a:	4b17      	ldr	r3, [pc, #92]	@ (8002178 <main+0x128>)
 800211c:	463c      	mov	r4, r7
 800211e:	461d      	mov	r5, r3
 8002120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002124:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002128:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MUX_PRESHandle = osThreadCreate(osThread(MUX_PRES), NULL);
 800212c:	463b      	mov	r3, r7
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f006 f882 	bl	800823a <osThreadCreate>
 8002136:	4603      	mov	r3, r0
 8002138:	4a10      	ldr	r2, [pc, #64]	@ (800217c <main+0x12c>)
 800213a:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800213c:	f006 f876 	bl	800822c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <main+0xf0>
 8002144:	200005b4 	.word	0x200005b4
 8002148:	2000031c 	.word	0x2000031c
 800214c:	40013800 	.word	0x40013800
 8002150:	200004a8 	.word	0x200004a8
 8002154:	20000344 	.word	0x20000344
 8002158:	20000420 	.word	0x20000420
 800215c:	20000398 	.word	0x20000398
 8002160:	0800a180 	.word	0x0800a180
 8002164:	20000538 	.word	0x20000538
 8002168:	0800a1ac 	.word	0x0800a1ac
 800216c:	2000053c 	.word	0x2000053c
 8002170:	0800a1d8 	.word	0x0800a1d8
 8002174:	20000540 	.word	0x20000540
 8002178:	0800a200 	.word	0x0800a200
 800217c:	20000544 	.word	0x20000544

08002180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b096      	sub	sp, #88	@ 0x58
 8002184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	2244      	movs	r2, #68	@ 0x44
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f007 fb06 	bl	80097a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002194:	463b      	mov	r3, r7
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
 80021a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80021a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80021a6:	f003 f967 	bl	8005478 <HAL_PWREx_ControlVoltageScaling>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80021b0:	f000 f970 	bl	8002494 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80021b4:	2310      	movs	r3, #16
 80021b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80021b8:	2301      	movs	r3, #1
 80021ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80021c0:	2360      	movs	r3, #96	@ 0x60
 80021c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	4618      	mov	r0, r3
 80021ce:	f003 f9a9 	bl	8005524 <HAL_RCC_OscConfig>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80021d8:	f000 f95c 	bl	8002494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021dc:	230f      	movs	r3, #15
 80021de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80021e0:	2300      	movs	r3, #0
 80021e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80021f0:	463b      	mov	r3, r7
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f003 fda9 	bl	8005d4c <HAL_RCC_ClockConfig>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002200:	f000 f948 	bl	8002494 <Error_Handler>
  }
}
 8002204:	bf00      	nop
 8002206:	3758      	adds	r7, #88	@ 0x58
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002210:	4b17      	ldr	r3, [pc, #92]	@ (8002270 <MX_CAN1_Init+0x64>)
 8002212:	4a18      	ldr	r2, [pc, #96]	@ (8002274 <MX_CAN1_Init+0x68>)
 8002214:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8002216:	4b16      	ldr	r3, [pc, #88]	@ (8002270 <MX_CAN1_Init+0x64>)
 8002218:	2210      	movs	r2, #16
 800221a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800221c:	4b14      	ldr	r3, [pc, #80]	@ (8002270 <MX_CAN1_Init+0x64>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002222:	4b13      	ldr	r3, [pc, #76]	@ (8002270 <MX_CAN1_Init+0x64>)
 8002224:	2200      	movs	r2, #0
 8002226:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002228:	4b11      	ldr	r3, [pc, #68]	@ (8002270 <MX_CAN1_Init+0x64>)
 800222a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800222e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002230:	4b0f      	ldr	r3, [pc, #60]	@ (8002270 <MX_CAN1_Init+0x64>)
 8002232:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002236:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002238:	4b0d      	ldr	r3, [pc, #52]	@ (8002270 <MX_CAN1_Init+0x64>)
 800223a:	2200      	movs	r2, #0
 800223c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800223e:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <MX_CAN1_Init+0x64>)
 8002240:	2200      	movs	r2, #0
 8002242:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002244:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <MX_CAN1_Init+0x64>)
 8002246:	2200      	movs	r2, #0
 8002248:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800224a:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <MX_CAN1_Init+0x64>)
 800224c:	2200      	movs	r2, #0
 800224e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002250:	4b07      	ldr	r3, [pc, #28]	@ (8002270 <MX_CAN1_Init+0x64>)
 8002252:	2200      	movs	r2, #0
 8002254:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002256:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <MX_CAN1_Init+0x64>)
 8002258:	2200      	movs	r2, #0
 800225a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800225c:	4804      	ldr	r0, [pc, #16]	@ (8002270 <MX_CAN1_Init+0x64>)
 800225e:	f001 f981 	bl	8003564 <HAL_CAN_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002268:	f000 f914 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}
 8002270:	2000031c 	.word	0x2000031c
 8002274:	40006400 	.word	0x40006400

08002278 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800227c:	4b1b      	ldr	r3, [pc, #108]	@ (80022ec <MX_I2C1_Init+0x74>)
 800227e:	4a1c      	ldr	r2, [pc, #112]	@ (80022f0 <MX_I2C1_Init+0x78>)
 8002280:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 8002282:	4b1a      	ldr	r3, [pc, #104]	@ (80022ec <MX_I2C1_Init+0x74>)
 8002284:	4a1b      	ldr	r2, [pc, #108]	@ (80022f4 <MX_I2C1_Init+0x7c>)
 8002286:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002288:	4b18      	ldr	r3, [pc, #96]	@ (80022ec <MX_I2C1_Init+0x74>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800228e:	4b17      	ldr	r3, [pc, #92]	@ (80022ec <MX_I2C1_Init+0x74>)
 8002290:	2201      	movs	r2, #1
 8002292:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002294:	4b15      	ldr	r3, [pc, #84]	@ (80022ec <MX_I2C1_Init+0x74>)
 8002296:	2200      	movs	r2, #0
 8002298:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800229a:	4b14      	ldr	r3, [pc, #80]	@ (80022ec <MX_I2C1_Init+0x74>)
 800229c:	2200      	movs	r2, #0
 800229e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022a0:	4b12      	ldr	r3, [pc, #72]	@ (80022ec <MX_I2C1_Init+0x74>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022a6:	4b11      	ldr	r3, [pc, #68]	@ (80022ec <MX_I2C1_Init+0x74>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022ac:	4b0f      	ldr	r3, [pc, #60]	@ (80022ec <MX_I2C1_Init+0x74>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022b2:	480e      	ldr	r0, [pc, #56]	@ (80022ec <MX_I2C1_Init+0x74>)
 80022b4:	f002 f814 	bl	80042e0 <HAL_I2C_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80022be:	f000 f8e9 	bl	8002494 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022c2:	2100      	movs	r1, #0
 80022c4:	4809      	ldr	r0, [pc, #36]	@ (80022ec <MX_I2C1_Init+0x74>)
 80022c6:	f003 f831 	bl	800532c <HAL_I2CEx_ConfigAnalogFilter>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80022d0:	f000 f8e0 	bl	8002494 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80022d4:	2100      	movs	r1, #0
 80022d6:	4805      	ldr	r0, [pc, #20]	@ (80022ec <MX_I2C1_Init+0x74>)
 80022d8:	f003 f873 	bl	80053c2 <HAL_I2CEx_ConfigDigitalFilter>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80022e2:	f000 f8d7 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000344 	.word	0x20000344
 80022f0:	40005400 	.word	0x40005400
 80022f4:	00100d14 	.word	0x00100d14

080022f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022fc:	4b14      	ldr	r3, [pc, #80]	@ (8002350 <MX_USART1_UART_Init+0x58>)
 80022fe:	4a15      	ldr	r2, [pc, #84]	@ (8002354 <MX_USART1_UART_Init+0x5c>)
 8002300:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002302:	4b13      	ldr	r3, [pc, #76]	@ (8002350 <MX_USART1_UART_Init+0x58>)
 8002304:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002308:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800230a:	4b11      	ldr	r3, [pc, #68]	@ (8002350 <MX_USART1_UART_Init+0x58>)
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002310:	4b0f      	ldr	r3, [pc, #60]	@ (8002350 <MX_USART1_UART_Init+0x58>)
 8002312:	2200      	movs	r2, #0
 8002314:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002316:	4b0e      	ldr	r3, [pc, #56]	@ (8002350 <MX_USART1_UART_Init+0x58>)
 8002318:	2200      	movs	r2, #0
 800231a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800231c:	4b0c      	ldr	r3, [pc, #48]	@ (8002350 <MX_USART1_UART_Init+0x58>)
 800231e:	220c      	movs	r2, #12
 8002320:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002322:	4b0b      	ldr	r3, [pc, #44]	@ (8002350 <MX_USART1_UART_Init+0x58>)
 8002324:	2200      	movs	r2, #0
 8002326:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002328:	4b09      	ldr	r3, [pc, #36]	@ (8002350 <MX_USART1_UART_Init+0x58>)
 800232a:	2200      	movs	r2, #0
 800232c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800232e:	4b08      	ldr	r3, [pc, #32]	@ (8002350 <MX_USART1_UART_Init+0x58>)
 8002330:	2200      	movs	r2, #0
 8002332:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002334:	4b06      	ldr	r3, [pc, #24]	@ (8002350 <MX_USART1_UART_Init+0x58>)
 8002336:	2200      	movs	r2, #0
 8002338:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800233a:	4805      	ldr	r0, [pc, #20]	@ (8002350 <MX_USART1_UART_Init+0x58>)
 800233c:	f004 fcb8 	bl	8006cb0 <HAL_UART_Init>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002346:	f000 f8a5 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000398 	.word	0x20000398
 8002354:	40013800 	.word	0x40013800

08002358 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800235c:	4b14      	ldr	r3, [pc, #80]	@ (80023b0 <MX_USART2_UART_Init+0x58>)
 800235e:	4a15      	ldr	r2, [pc, #84]	@ (80023b4 <MX_USART2_UART_Init+0x5c>)
 8002360:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002362:	4b13      	ldr	r3, [pc, #76]	@ (80023b0 <MX_USART2_UART_Init+0x58>)
 8002364:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002368:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800236a:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <MX_USART2_UART_Init+0x58>)
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002370:	4b0f      	ldr	r3, [pc, #60]	@ (80023b0 <MX_USART2_UART_Init+0x58>)
 8002372:	2200      	movs	r2, #0
 8002374:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002376:	4b0e      	ldr	r3, [pc, #56]	@ (80023b0 <MX_USART2_UART_Init+0x58>)
 8002378:	2200      	movs	r2, #0
 800237a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800237c:	4b0c      	ldr	r3, [pc, #48]	@ (80023b0 <MX_USART2_UART_Init+0x58>)
 800237e:	220c      	movs	r2, #12
 8002380:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002382:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <MX_USART2_UART_Init+0x58>)
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002388:	4b09      	ldr	r3, [pc, #36]	@ (80023b0 <MX_USART2_UART_Init+0x58>)
 800238a:	2200      	movs	r2, #0
 800238c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800238e:	4b08      	ldr	r3, [pc, #32]	@ (80023b0 <MX_USART2_UART_Init+0x58>)
 8002390:	2200      	movs	r2, #0
 8002392:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002394:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <MX_USART2_UART_Init+0x58>)
 8002396:	2200      	movs	r2, #0
 8002398:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800239a:	4805      	ldr	r0, [pc, #20]	@ (80023b0 <MX_USART2_UART_Init+0x58>)
 800239c:	f004 fc88 	bl	8006cb0 <HAL_UART_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80023a6:	f000 f875 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000420 	.word	0x20000420
 80023b4:	40004400 	.word	0x40004400

080023b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023be:	4b10      	ldr	r3, [pc, #64]	@ (8002400 <MX_DMA_Init+0x48>)
 80023c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c2:	4a0f      	ldr	r2, [pc, #60]	@ (8002400 <MX_DMA_Init+0x48>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80023ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002400 <MX_DMA_Init+0x48>)
 80023cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2105      	movs	r1, #5
 80023da:	200f      	movs	r0, #15
 80023dc:	f001 fb46 	bl	8003a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80023e0:	200f      	movs	r0, #15
 80023e2:	f001 fb5f 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2105      	movs	r1, #5
 80023ea:	2010      	movs	r0, #16
 80023ec:	f001 fb3e 	bl	8003a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80023f0:	2010      	movs	r0, #16
 80023f2:	f001 fb57 	bl	8003aa4 <HAL_NVIC_EnableIRQ>

}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000

08002404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240a:	f107 030c 	add.w	r3, r7, #12
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800241a:	4b14      	ldr	r3, [pc, #80]	@ (800246c <MX_GPIO_Init+0x68>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241e:	4a13      	ldr	r2, [pc, #76]	@ (800246c <MX_GPIO_Init+0x68>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002426:	4b11      	ldr	r3, [pc, #68]	@ (800246c <MX_GPIO_Init+0x68>)
 8002428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002432:	4b0e      	ldr	r3, [pc, #56]	@ (800246c <MX_GPIO_Init+0x68>)
 8002434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002436:	4a0d      	ldr	r2, [pc, #52]	@ (800246c <MX_GPIO_Init+0x68>)
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800243e:	4b0b      	ldr	r3, [pc, #44]	@ (800246c <MX_GPIO_Init+0x68>)
 8002440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800244a:	2340      	movs	r3, #64	@ 0x40
 800244c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800244e:	2300      	movs	r3, #0
 8002450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002456:	f107 030c 	add.w	r3, r7, #12
 800245a:	4619      	mov	r1, r3
 800245c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002460:	f001 fda4 	bl	8003fac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002464:	bf00      	nop
 8002466:	3720      	adds	r7, #32
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000

08002470 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a04      	ldr	r2, [pc, #16]	@ (8002490 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d101      	bne.n	8002486 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002482:	f001 f82b 	bl	80034dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40012c00 	.word	0x40012c00

08002494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002498:	b672      	cpsid	i
}
 800249a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800249c:	bf00      	nop
 800249e:	e7fd      	b.n	800249c <Error_Handler+0x8>

080024a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	4b11      	ldr	r3, [pc, #68]	@ (80024ec <HAL_MspInit+0x4c>)
 80024a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024aa:	4a10      	ldr	r2, [pc, #64]	@ (80024ec <HAL_MspInit+0x4c>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80024b2:	4b0e      	ldr	r3, [pc, #56]	@ (80024ec <HAL_MspInit+0x4c>)
 80024b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	4b0b      	ldr	r3, [pc, #44]	@ (80024ec <HAL_MspInit+0x4c>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c2:	4a0a      	ldr	r2, [pc, #40]	@ (80024ec <HAL_MspInit+0x4c>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80024ca:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <HAL_MspInit+0x4c>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	210f      	movs	r1, #15
 80024da:	f06f 0001 	mvn.w	r0, #1
 80024de:	f001 fac5 	bl	8003a6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000

080024f0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	@ 0x28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a18      	ldr	r2, [pc, #96]	@ (8002570 <HAL_CAN_MspInit+0x80>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d129      	bne.n	8002566 <HAL_CAN_MspInit+0x76>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002512:	4b18      	ldr	r3, [pc, #96]	@ (8002574 <HAL_CAN_MspInit+0x84>)
 8002514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002516:	4a17      	ldr	r2, [pc, #92]	@ (8002574 <HAL_CAN_MspInit+0x84>)
 8002518:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800251c:	6593      	str	r3, [r2, #88]	@ 0x58
 800251e:	4b15      	ldr	r3, [pc, #84]	@ (8002574 <HAL_CAN_MspInit+0x84>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252a:	4b12      	ldr	r3, [pc, #72]	@ (8002574 <HAL_CAN_MspInit+0x84>)
 800252c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800252e:	4a11      	ldr	r2, [pc, #68]	@ (8002574 <HAL_CAN_MspInit+0x84>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002536:	4b0f      	ldr	r3, [pc, #60]	@ (8002574 <HAL_CAN_MspInit+0x84>)
 8002538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002542:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002550:	2303      	movs	r3, #3
 8002552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002554:	2309      	movs	r3, #9
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	4619      	mov	r1, r3
 800255e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002562:	f001 fd23 	bl	8003fac <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8002566:	bf00      	nop
 8002568:	3728      	adds	r7, #40	@ 0x28
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40006400 	.word	0x40006400
 8002574:	40021000 	.word	0x40021000

08002578 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b09e      	sub	sp, #120	@ 0x78
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002590:	f107 0310 	add.w	r3, r7, #16
 8002594:	2254      	movs	r2, #84	@ 0x54
 8002596:	2100      	movs	r1, #0
 8002598:	4618      	mov	r0, r3
 800259a:	f007 f901 	bl	80097a0 <memset>
  if(hi2c->Instance==I2C1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1e      	ldr	r2, [pc, #120]	@ (800261c <HAL_I2C_MspInit+0xa4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d135      	bne.n	8002614 <HAL_I2C_MspInit+0x9c>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80025a8:	2340      	movs	r3, #64	@ 0x40
 80025aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80025ac:	2300      	movs	r3, #0
 80025ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025b0:	f107 0310 	add.w	r3, r7, #16
 80025b4:	4618      	mov	r0, r3
 80025b6:	f003 fe1f 	bl	80061f8 <HAL_RCCEx_PeriphCLKConfig>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80025c0:	f7ff ff68 	bl	8002494 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c4:	4b16      	ldr	r3, [pc, #88]	@ (8002620 <HAL_I2C_MspInit+0xa8>)
 80025c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c8:	4a15      	ldr	r2, [pc, #84]	@ (8002620 <HAL_I2C_MspInit+0xa8>)
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025d0:	4b13      	ldr	r3, [pc, #76]	@ (8002620 <HAL_I2C_MspInit+0xa8>)
 80025d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025dc:	23c0      	movs	r3, #192	@ 0xc0
 80025de:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025e0:	2312      	movs	r3, #18
 80025e2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e8:	2303      	movs	r3, #3
 80025ea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025ec:	2304      	movs	r3, #4
 80025ee:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025f4:	4619      	mov	r1, r3
 80025f6:	480b      	ldr	r0, [pc, #44]	@ (8002624 <HAL_I2C_MspInit+0xac>)
 80025f8:	f001 fcd8 	bl	8003fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025fc:	4b08      	ldr	r3, [pc, #32]	@ (8002620 <HAL_I2C_MspInit+0xa8>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002600:	4a07      	ldr	r2, [pc, #28]	@ (8002620 <HAL_I2C_MspInit+0xa8>)
 8002602:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002606:	6593      	str	r3, [r2, #88]	@ 0x58
 8002608:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <HAL_I2C_MspInit+0xa8>)
 800260a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002614:	bf00      	nop
 8002616:	3778      	adds	r7, #120	@ 0x78
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40005400 	.word	0x40005400
 8002620:	40021000 	.word	0x40021000
 8002624:	48000400 	.word	0x48000400

08002628 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b0a0      	sub	sp, #128	@ 0x80
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002640:	f107 0318 	add.w	r3, r7, #24
 8002644:	2254      	movs	r2, #84	@ 0x54
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f007 f8a9 	bl	80097a0 <memset>
  if(huart->Instance==USART1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a6f      	ldr	r2, [pc, #444]	@ (8002810 <HAL_UART_MspInit+0x1e8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d169      	bne.n	800272c <HAL_UART_MspInit+0x104>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002658:	2301      	movs	r3, #1
 800265a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800265c:	2300      	movs	r3, #0
 800265e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002660:	f107 0318 	add.w	r3, r7, #24
 8002664:	4618      	mov	r0, r3
 8002666:	f003 fdc7 	bl	80061f8 <HAL_RCCEx_PeriphCLKConfig>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002670:	f7ff ff10 	bl	8002494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002674:	4b67      	ldr	r3, [pc, #412]	@ (8002814 <HAL_UART_MspInit+0x1ec>)
 8002676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002678:	4a66      	ldr	r2, [pc, #408]	@ (8002814 <HAL_UART_MspInit+0x1ec>)
 800267a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800267e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002680:	4b64      	ldr	r3, [pc, #400]	@ (8002814 <HAL_UART_MspInit+0x1ec>)
 8002682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002684:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268c:	4b61      	ldr	r3, [pc, #388]	@ (8002814 <HAL_UART_MspInit+0x1ec>)
 800268e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002690:	4a60      	ldr	r2, [pc, #384]	@ (8002814 <HAL_UART_MspInit+0x1ec>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002698:	4b5e      	ldr	r3, [pc, #376]	@ (8002814 <HAL_UART_MspInit+0x1ec>)
 800269a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026a4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80026a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b2:	2303      	movs	r3, #3
 80026b4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026b6:	2307      	movs	r3, #7
 80026b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ba:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80026be:	4619      	mov	r1, r3
 80026c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026c4:	f001 fc72 	bl	8003fac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80026c8:	4b53      	ldr	r3, [pc, #332]	@ (8002818 <HAL_UART_MspInit+0x1f0>)
 80026ca:	4a54      	ldr	r2, [pc, #336]	@ (800281c <HAL_UART_MspInit+0x1f4>)
 80026cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80026ce:	4b52      	ldr	r3, [pc, #328]	@ (8002818 <HAL_UART_MspInit+0x1f0>)
 80026d0:	2202      	movs	r2, #2
 80026d2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026d4:	4b50      	ldr	r3, [pc, #320]	@ (8002818 <HAL_UART_MspInit+0x1f0>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026da:	4b4f      	ldr	r3, [pc, #316]	@ (8002818 <HAL_UART_MspInit+0x1f0>)
 80026dc:	2200      	movs	r2, #0
 80026de:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002818 <HAL_UART_MspInit+0x1f0>)
 80026e2:	2280      	movs	r2, #128	@ 0x80
 80026e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002818 <HAL_UART_MspInit+0x1f0>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ec:	4b4a      	ldr	r3, [pc, #296]	@ (8002818 <HAL_UART_MspInit+0x1f0>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80026f2:	4b49      	ldr	r3, [pc, #292]	@ (8002818 <HAL_UART_MspInit+0x1f0>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026f8:	4b47      	ldr	r3, [pc, #284]	@ (8002818 <HAL_UART_MspInit+0x1f0>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80026fe:	4846      	ldr	r0, [pc, #280]	@ (8002818 <HAL_UART_MspInit+0x1f0>)
 8002700:	f001 f9de 	bl	8003ac0 <HAL_DMA_Init>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800270a:	f7ff fec3 	bl	8002494 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a41      	ldr	r2, [pc, #260]	@ (8002818 <HAL_UART_MspInit+0x1f0>)
 8002712:	675a      	str	r2, [r3, #116]	@ 0x74
 8002714:	4a40      	ldr	r2, [pc, #256]	@ (8002818 <HAL_UART_MspInit+0x1f0>)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800271a:	2200      	movs	r2, #0
 800271c:	2105      	movs	r1, #5
 800271e:	2025      	movs	r0, #37	@ 0x25
 8002720:	f001 f9a4 	bl	8003a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002724:	2025      	movs	r0, #37	@ 0x25
 8002726:	f001 f9bd 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800272a:	e06c      	b.n	8002806 <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a3b      	ldr	r2, [pc, #236]	@ (8002820 <HAL_UART_MspInit+0x1f8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d167      	bne.n	8002806 <HAL_UART_MspInit+0x1de>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002736:	2302      	movs	r3, #2
 8002738:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800273a:	2300      	movs	r3, #0
 800273c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800273e:	f107 0318 	add.w	r3, r7, #24
 8002742:	4618      	mov	r0, r3
 8002744:	f003 fd58 	bl	80061f8 <HAL_RCCEx_PeriphCLKConfig>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 800274e:	f7ff fea1 	bl	8002494 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002752:	4b30      	ldr	r3, [pc, #192]	@ (8002814 <HAL_UART_MspInit+0x1ec>)
 8002754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002756:	4a2f      	ldr	r2, [pc, #188]	@ (8002814 <HAL_UART_MspInit+0x1ec>)
 8002758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800275c:	6593      	str	r3, [r2, #88]	@ 0x58
 800275e:	4b2d      	ldr	r3, [pc, #180]	@ (8002814 <HAL_UART_MspInit+0x1ec>)
 8002760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276a:	4b2a      	ldr	r3, [pc, #168]	@ (8002814 <HAL_UART_MspInit+0x1ec>)
 800276c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800276e:	4a29      	ldr	r2, [pc, #164]	@ (8002814 <HAL_UART_MspInit+0x1ec>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002776:	4b27      	ldr	r3, [pc, #156]	@ (8002814 <HAL_UART_MspInit+0x1ec>)
 8002778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002782:	230c      	movs	r3, #12
 8002784:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	2302      	movs	r3, #2
 8002788:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278e:	2303      	movs	r3, #3
 8002790:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002792:	2307      	movs	r3, #7
 8002794:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800279a:	4619      	mov	r1, r3
 800279c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027a0:	f001 fc04 	bl	8003fac <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80027a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002824 <HAL_UART_MspInit+0x1fc>)
 80027a6:	4a20      	ldr	r2, [pc, #128]	@ (8002828 <HAL_UART_MspInit+0x200>)
 80027a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80027aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002824 <HAL_UART_MspInit+0x1fc>)
 80027ac:	2202      	movs	r2, #2
 80027ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002824 <HAL_UART_MspInit+0x1fc>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002824 <HAL_UART_MspInit+0x1fc>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027bc:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <HAL_UART_MspInit+0x1fc>)
 80027be:	2280      	movs	r2, #128	@ 0x80
 80027c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027c2:	4b18      	ldr	r3, [pc, #96]	@ (8002824 <HAL_UART_MspInit+0x1fc>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027c8:	4b16      	ldr	r3, [pc, #88]	@ (8002824 <HAL_UART_MspInit+0x1fc>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80027ce:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <HAL_UART_MspInit+0x1fc>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027d4:	4b13      	ldr	r3, [pc, #76]	@ (8002824 <HAL_UART_MspInit+0x1fc>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80027da:	4812      	ldr	r0, [pc, #72]	@ (8002824 <HAL_UART_MspInit+0x1fc>)
 80027dc:	f001 f970 	bl	8003ac0 <HAL_DMA_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 80027e6:	f7ff fe55 	bl	8002494 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002824 <HAL_UART_MspInit+0x1fc>)
 80027ee:	675a      	str	r2, [r3, #116]	@ 0x74
 80027f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002824 <HAL_UART_MspInit+0x1fc>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2105      	movs	r1, #5
 80027fa:	2026      	movs	r0, #38	@ 0x26
 80027fc:	f001 f936 	bl	8003a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002800:	2026      	movs	r0, #38	@ 0x26
 8002802:	f001 f94f 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
}
 8002806:	bf00      	nop
 8002808:	3780      	adds	r7, #128	@ 0x80
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40013800 	.word	0x40013800
 8002814:	40021000 	.word	0x40021000
 8002818:	200004a8 	.word	0x200004a8
 800281c:	40020058 	.word	0x40020058
 8002820:	40004400 	.word	0x40004400
 8002824:	200004f0 	.word	0x200004f0
 8002828:	4002006c 	.word	0x4002006c

0800282c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08c      	sub	sp, #48	@ 0x30
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800283a:	4b2e      	ldr	r3, [pc, #184]	@ (80028f4 <HAL_InitTick+0xc8>)
 800283c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800283e:	4a2d      	ldr	r2, [pc, #180]	@ (80028f4 <HAL_InitTick+0xc8>)
 8002840:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002844:	6613      	str	r3, [r2, #96]	@ 0x60
 8002846:	4b2b      	ldr	r3, [pc, #172]	@ (80028f4 <HAL_InitTick+0xc8>)
 8002848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800284a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002852:	f107 020c 	add.w	r2, r7, #12
 8002856:	f107 0310 	add.w	r3, r7, #16
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f003 fc39 	bl	80060d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002862:	f003 fc21 	bl	80060a8 <HAL_RCC_GetPCLK2Freq>
 8002866:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286a:	4a23      	ldr	r2, [pc, #140]	@ (80028f8 <HAL_InitTick+0xcc>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	0c9b      	lsrs	r3, r3, #18
 8002872:	3b01      	subs	r3, #1
 8002874:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002876:	4b21      	ldr	r3, [pc, #132]	@ (80028fc <HAL_InitTick+0xd0>)
 8002878:	4a21      	ldr	r2, [pc, #132]	@ (8002900 <HAL_InitTick+0xd4>)
 800287a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800287c:	4b1f      	ldr	r3, [pc, #124]	@ (80028fc <HAL_InitTick+0xd0>)
 800287e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002882:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002884:	4a1d      	ldr	r2, [pc, #116]	@ (80028fc <HAL_InitTick+0xd0>)
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800288a:	4b1c      	ldr	r3, [pc, #112]	@ (80028fc <HAL_InitTick+0xd0>)
 800288c:	2200      	movs	r2, #0
 800288e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002890:	4b1a      	ldr	r3, [pc, #104]	@ (80028fc <HAL_InitTick+0xd0>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002896:	4b19      	ldr	r3, [pc, #100]	@ (80028fc <HAL_InitTick+0xd0>)
 8002898:	2200      	movs	r2, #0
 800289a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800289c:	4817      	ldr	r0, [pc, #92]	@ (80028fc <HAL_InitTick+0xd0>)
 800289e:	f003 ff93 	bl	80067c8 <HAL_TIM_Base_Init>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80028a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d11b      	bne.n	80028e8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80028b0:	4812      	ldr	r0, [pc, #72]	@ (80028fc <HAL_InitTick+0xd0>)
 80028b2:	f003 ffeb 	bl	800688c <HAL_TIM_Base_Start_IT>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80028bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d111      	bne.n	80028e8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80028c4:	2019      	movs	r0, #25
 80028c6:	f001 f8ed 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b0f      	cmp	r3, #15
 80028ce:	d808      	bhi.n	80028e2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80028d0:	2200      	movs	r2, #0
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	2019      	movs	r0, #25
 80028d6:	f001 f8c9 	bl	8003a6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028da:	4a0a      	ldr	r2, [pc, #40]	@ (8002904 <HAL_InitTick+0xd8>)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	e002      	b.n	80028e8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80028e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3730      	adds	r7, #48	@ 0x30
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	431bde83 	.word	0x431bde83
 80028fc:	20000548 	.word	0x20000548
 8002900:	40012c00 	.word	0x40012c00
 8002904:	20000004 	.word	0x20000004

08002908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800290c:	bf00      	nop
 800290e:	e7fd      	b.n	800290c <NMI_Handler+0x4>

08002910 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002914:	bf00      	nop
 8002916:	e7fd      	b.n	8002914 <HardFault_Handler+0x4>

08002918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800291c:	bf00      	nop
 800291e:	e7fd      	b.n	800291c <MemManage_Handler+0x4>

08002920 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002924:	bf00      	nop
 8002926:	e7fd      	b.n	8002924 <BusFault_Handler+0x4>

08002928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800292c:	bf00      	nop
 800292e:	e7fd      	b.n	800292c <UsageFault_Handler+0x4>

08002930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002944:	4802      	ldr	r0, [pc, #8]	@ (8002950 <DMA1_Channel5_IRQHandler+0x10>)
 8002946:	f001 fa52 	bl	8003dee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	200004a8 	.word	0x200004a8

08002954 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002958:	4802      	ldr	r0, [pc, #8]	@ (8002964 <DMA1_Channel6_IRQHandler+0x10>)
 800295a:	f001 fa48 	bl	8003dee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200004f0 	.word	0x200004f0

08002968 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800296c:	4802      	ldr	r0, [pc, #8]	@ (8002978 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800296e:	f003 ffe1 	bl	8006934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000548 	.word	0x20000548

0800297c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002980:	4802      	ldr	r0, [pc, #8]	@ (800298c <USART1_IRQHandler+0x10>)
 8002982:	f004 fa6d 	bl	8006e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000398 	.word	0x20000398

08002990 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002994:	4802      	ldr	r0, [pc, #8]	@ (80029a0 <USART2_IRQHandler+0x10>)
 8002996:	f004 fa63 	bl	8006e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000420 	.word	0x20000420

080029a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029ac:	4a14      	ldr	r2, [pc, #80]	@ (8002a00 <_sbrk+0x5c>)
 80029ae:	4b15      	ldr	r3, [pc, #84]	@ (8002a04 <_sbrk+0x60>)
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b8:	4b13      	ldr	r3, [pc, #76]	@ (8002a08 <_sbrk+0x64>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029c0:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <_sbrk+0x64>)
 80029c2:	4a12      	ldr	r2, [pc, #72]	@ (8002a0c <_sbrk+0x68>)
 80029c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029c6:	4b10      	ldr	r3, [pc, #64]	@ (8002a08 <_sbrk+0x64>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d207      	bcs.n	80029e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029d4:	f006 ff4a 	bl	800986c <__errno>
 80029d8:	4603      	mov	r3, r0
 80029da:	220c      	movs	r2, #12
 80029dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029e2:	e009      	b.n	80029f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029e4:	4b08      	ldr	r3, [pc, #32]	@ (8002a08 <_sbrk+0x64>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ea:	4b07      	ldr	r3, [pc, #28]	@ (8002a08 <_sbrk+0x64>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	4a05      	ldr	r2, [pc, #20]	@ (8002a08 <_sbrk+0x64>)
 80029f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029f6:	68fb      	ldr	r3, [r7, #12]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	2000c000 	.word	0x2000c000
 8002a04:	00000400 	.word	0x00000400
 8002a08:	20000594 	.word	0x20000594
 8002a0c:	20001460 	.word	0x20001460

08002a10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a14:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <SystemInit+0x20>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1a:	4a05      	ldr	r2, [pc, #20]	@ (8002a30 <SystemInit+0x20>)
 8002a1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <split_uint16>:

CAN_TxHeaderTypeDef TxHeader;
uint32_t TxMailbox;
uint8_t TxData[8];

void split_uint16(uint16_t value, uint8_t *high_byte, uint8_t *low_byte) {
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	81fb      	strh	r3, [r7, #14]
    *high_byte = (value >> 8) & 0xFF; 
 8002a42:	89fb      	ldrh	r3, [r7, #14]
 8002a44:	0a1b      	lsrs	r3, r3, #8
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	701a      	strb	r2, [r3, #0]
    *low_byte  = value & 0xFF; 
 8002a4e:	89fb      	ldrh	r3, [r7, #14]
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	701a      	strb	r2, [r3, #0]
}
 8002a56:	bf00      	nop
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <split_int16>:

void split_int16(int16_t value, uint8_t *high_byte, uint8_t *low_byte) {
 8002a62:	b480      	push	{r7}
 8002a64:	b085      	sub	sp, #20
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	81fb      	strh	r3, [r7, #14]
    *high_byte = (value >> 8) & 0xFF; 
 8002a70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a74:	121b      	asrs	r3, r3, #8
 8002a76:	b21b      	sxth	r3, r3
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	701a      	strb	r2, [r3, #0]
    *low_byte  = value & 0xFF; 
 8002a7e:	89fb      	ldrh	r3, [r7, #14]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	701a      	strb	r2, [r3, #0]
}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <can_logger_cycle>:

void can_logger_cycle(void const *argument){
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b0a8      	sub	sp, #160	@ 0xa0
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  if (can_gpio_verification){
 8002a9c:	4b55      	ldr	r3, [pc, #340]	@ (8002bf4 <can_logger_cycle+0x160>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <can_logger_cycle+0x18>
    TxHeader.StdId = CAN_GPIO_TRIGGERED;
 8002aa4:	4b54      	ldr	r3, [pc, #336]	@ (8002bf8 <can_logger_cycle+0x164>)
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	e002      	b.n	8002ab2 <can_logger_cycle+0x1e>
  }else {
    TxHeader.StdId = CAN_GPIO_NON_TRIGGERED;
 8002aac:	4b52      	ldr	r3, [pc, #328]	@ (8002bf8 <can_logger_cycle+0x164>)
 8002aae:	2209      	movs	r2, #9
 8002ab0:	601a      	str	r2, [r3, #0]
  }
  TxHeader.RTR = CAN_RTR_DATA;
 8002ab2:	4b51      	ldr	r3, [pc, #324]	@ (8002bf8 <can_logger_cycle+0x164>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8002ab8:	4b4f      	ldr	r3, [pc, #316]	@ (8002bf8 <can_logger_cycle+0x164>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 6;
 8002abe:	4b4e      	ldr	r3, [pc, #312]	@ (8002bf8 <can_logger_cycle+0x164>)
 8002ac0:	2206      	movs	r2, #6
 8002ac2:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8002ac4:	4b4c      	ldr	r3, [pc, #304]	@ (8002bf8 <can_logger_cycle+0x164>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	751a      	strb	r2, [r3, #20]
  for(;;) {
    if(g_sensor_data!=NULL){
 8002aca:	4b4c      	ldr	r3, [pc, #304]	@ (8002bfc <can_logger_cycle+0x168>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d01b      	beq.n	8002b0a <can_logger_cycle+0x76>
        split_int16(g_sensor_data->delta_pres_0,&TxData[0],&TxData[1]);
 8002ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8002bfc <can_logger_cycle+0x168>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ada:	4a49      	ldr	r2, [pc, #292]	@ (8002c00 <can_logger_cycle+0x16c>)
 8002adc:	4949      	ldr	r1, [pc, #292]	@ (8002c04 <can_logger_cycle+0x170>)
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ffbf 	bl	8002a62 <split_int16>
        split_int16(g_sensor_data->delta_pres_0,&TxData[2],&TxData[3]);
 8002ae4:	4b45      	ldr	r3, [pc, #276]	@ (8002bfc <can_logger_cycle+0x168>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aec:	4a46      	ldr	r2, [pc, #280]	@ (8002c08 <can_logger_cycle+0x174>)
 8002aee:	4947      	ldr	r1, [pc, #284]	@ (8002c0c <can_logger_cycle+0x178>)
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff ffb6 	bl	8002a62 <split_int16>
        split_int16(g_sensor_data->delta_pres_0,&TxData[4],&TxData[5]);
 8002af6:	4b41      	ldr	r3, [pc, #260]	@ (8002bfc <can_logger_cycle+0x168>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002afe:	4a44      	ldr	r2, [pc, #272]	@ (8002c10 <can_logger_cycle+0x17c>)
 8002b00:	4944      	ldr	r1, [pc, #272]	@ (8002c14 <can_logger_cycle+0x180>)
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff ffad 	bl	8002a62 <split_int16>
 8002b08:	e01c      	b.n	8002b44 <can_logger_cycle+0xb0>
    }else {
         bmp280_sensors_data_t tmp_placeholder = {
 8002b0a:	4a43      	ldr	r2, [pc, #268]	@ (8002c18 <can_logger_cycle+0x184>)
 8002b0c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002b10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b14:	6018      	str	r0, [r3, #0]
 8002b16:	3304      	adds	r3, #4
 8002b18:	8019      	strh	r1, [r3, #0]
            .delta_pres_0 = -100,
			.delta_pres_1 = 100,
			.delta_pres_2 = 365
         };
        split_int16(tmp_placeholder.delta_pres_0,&TxData[0],&TxData[1]);
 8002b1a:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 8002b1e:	4a38      	ldr	r2, [pc, #224]	@ (8002c00 <can_logger_cycle+0x16c>)
 8002b20:	4938      	ldr	r1, [pc, #224]	@ (8002c04 <can_logger_cycle+0x170>)
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff ff9d 	bl	8002a62 <split_int16>
        split_int16(tmp_placeholder.delta_pres_0,&TxData[2],&TxData[3]);
 8002b28:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 8002b2c:	4a36      	ldr	r2, [pc, #216]	@ (8002c08 <can_logger_cycle+0x174>)
 8002b2e:	4937      	ldr	r1, [pc, #220]	@ (8002c0c <can_logger_cycle+0x178>)
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff96 	bl	8002a62 <split_int16>
        split_int16(tmp_placeholder.delta_pres_0,&TxData[4],&TxData[5]);
 8002b36:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 8002b3a:	4a35      	ldr	r2, [pc, #212]	@ (8002c10 <can_logger_cycle+0x17c>)
 8002b3c:	4935      	ldr	r1, [pc, #212]	@ (8002c14 <can_logger_cycle+0x180>)
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff ff8f 	bl	8002a62 <split_int16>
    }
    if(g_driver_data!=NULL){
 8002b44:	4b35      	ldr	r3, [pc, #212]	@ (8002c1c <can_logger_cycle+0x188>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <can_logger_cycle+0xca>
        split_uint16(g_driver_data->fan_rpm,&TxData[6],&TxData[7]);
 8002b4c:	4b33      	ldr	r3, [pc, #204]	@ (8002c1c <can_logger_cycle+0x188>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	4a33      	ldr	r2, [pc, #204]	@ (8002c20 <can_logger_cycle+0x18c>)
 8002b54:	4933      	ldr	r1, [pc, #204]	@ (8002c24 <can_logger_cycle+0x190>)
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff ff6c 	bl	8002a34 <split_uint16>
 8002b5c:	e00d      	b.n	8002b7a <can_logger_cycle+0xe6>
    }else {
        max6650_data_t tmp_placeholder = {
 8002b5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b62:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002b66:	2300      	movs	r3, #0
 8002b68:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
            .fan_rpm = 1000,
			      .status_flag = HAL_OK
        };
        split_uint16(tmp_placeholder.fan_rpm,&TxData[6],&TxData[7]);
 8002b6c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002b70:	4a2b      	ldr	r2, [pc, #172]	@ (8002c20 <can_logger_cycle+0x18c>)
 8002b72:	492c      	ldr	r1, [pc, #176]	@ (8002c24 <can_logger_cycle+0x190>)
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff5d 	bl	8002a34 <split_uint16>
    }
    HAL_StatusTypeDef Current_Action = HAL_CAN_AddTxMessage(g_can_iface, &TxHeader, TxData, &TxMailbox);
 8002b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c28 <can_logger_cycle+0x194>)
 8002b7c:	6818      	ldr	r0, [r3, #0]
 8002b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8002c2c <can_logger_cycle+0x198>)
 8002b80:	4a20      	ldr	r2, [pc, #128]	@ (8002c04 <can_logger_cycle+0x170>)
 8002b82:	491d      	ldr	r1, [pc, #116]	@ (8002bf8 <can_logger_cycle+0x164>)
 8002b84:	f000 fde9 	bl	800375a <HAL_CAN_AddTxMessage>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    if (Current_Action==HAL_OK){
 8002b8e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d126      	bne.n	8002be4 <can_logger_cycle+0x150>
    	 NOTIFY_MESSAGE("Sent CAN Message\n");
 8002b96:	f107 0308 	add.w	r3, r7, #8
 8002b9a:	4a25      	ldr	r2, [pc, #148]	@ (8002c30 <can_logger_cycle+0x19c>)
 8002b9c:	2180      	movs	r1, #128	@ 0x80
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f006 fdb8 	bl	8009714 <sniprintf>
 8002ba4:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
 8002ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bac:	f107 0208 	add.w	r2, r7, #8
 8002bb0:	18d0      	adds	r0, r2, r3
 8002bb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bb6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002bba:	4a1e      	ldr	r2, [pc, #120]	@ (8002c34 <can_logger_cycle+0x1a0>)
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	f006 fda9 	bl	8009714 <sniprintf>
 8002bc2:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 8002bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c38 <can_logger_cycle+0x1a4>)
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	f107 0108 	add.w	r1, r7, #8
 8002bde:	2364      	movs	r3, #100	@ 0x64
 8002be0:	f004 f8b4 	bl	8006d4c <HAL_UART_Transmit>
    }
    HAL_Delay(5);
 8002be4:	2005      	movs	r0, #5
 8002be6:	f000 fc99 	bl	800351c <HAL_Delay>
    osDelay(1);
 8002bea:	2001      	movs	r0, #1
 8002bec:	f005 fb71 	bl	80082d2 <osDelay>
  for(;;) {
 8002bf0:	e76b      	b.n	8002aca <can_logger_cycle+0x36>
 8002bf2:	bf00      	nop
 8002bf4:	200005b4 	.word	0x200005b4
 8002bf8:	200005e4 	.word	0x200005e4
 8002bfc:	200005bc 	.word	0x200005bc
 8002c00:	20000601 	.word	0x20000601
 8002c04:	20000600 	.word	0x20000600
 8002c08:	20000603 	.word	0x20000603
 8002c0c:	20000602 	.word	0x20000602
 8002c10:	20000605 	.word	0x20000605
 8002c14:	20000604 	.word	0x20000604
 8002c18:	0800a23c 	.word	0x0800a23c
 8002c1c:	200005b8 	.word	0x200005b8
 8002c20:	20000607 	.word	0x20000607
 8002c24:	20000606 	.word	0x20000606
 8002c28:	200005ac 	.word	0x200005ac
 8002c2c:	200005fc 	.word	0x200005fc
 8002c30:	0800a21c 	.word	0x0800a21c
 8002c34:	0800a228 	.word	0x0800a228
 8002c38:	2000059c 	.word	0x2000059c

08002c3c <mux_pres_cycle>:
void driver_coll_cycle(void const *argument){
  for(;;){
    osDelay(1);
  }
}
void mux_pres_cycle(void const *argument){
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8002c42:	af04      	add	r7, sp, #16
 8002c44:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002c48:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002c4c:	6018      	str	r0, [r3, #0]
  
  max6650_handle_t fan_controller;
  max6650_config_t fan_config;
  max6650_data_t fan_data;

  fan_config.hi2c = g_driver_iface;
 8002c4e:	4ba4      	ldr	r3, [pc, #656]	@ (8002ee0 <mux_pres_cycle+0x2a4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
  fan_config.add_line_connection = MAX6650_ADD_LINE_GND;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f887 321c 	strb.w	r3, [r7, #540]	@ 0x21c
  fan_config.operating_mode = MAX6650_MODE_CLOSED_LOOP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
  fan_config.fan_voltage = MAX6650_FAN_VOLTAGE_12V;
 8002c62:	2301      	movs	r3, #1
 8002c64:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
  fan_config.k_scale = MAX6650_KSCALE_4;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
  fan_config.rpm_max = 3000; // Maximum expected RPM for normal 12V motor
 8002c6e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002c72:	f8a7 3220 	strh.w	r3, [r7, #544]	@ 0x220
  fan_config.i2c_timeout = 1000;
 8002c76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c7a:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
  bool init_succ = false;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257
  if (MAX6650_Init(&fan_controller, &fan_config)){
 8002c84:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8002c88:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fd9d 	bl	80017ce <MAX6650_Init>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <mux_pres_cycle+0x70>
    MAX6650_ControlFan(&fan_controller, CFF_AUTO);
 8002c9a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8002c9e:	2103      	movs	r1, #3
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fe fe52 	bl	800194a <MAX6650_ControlFan>
    init_succ = true;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257
  }
  uint8_t sensor_addresses[6] = {0x76, 0x76, 0x76, 0x76, 0x76, 0x76};
 8002cac:	4a8d      	ldr	r2, [pc, #564]	@ (8002ee4 <mux_pres_cycle+0x2a8>)
 8002cae:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8002cb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cb6:	6018      	str	r0, [r3, #0]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	8019      	strh	r1, [r3, #0]
  uint8_t sensor_channels[6] = {0, 1, 2, 3, 4, 5};
 8002cbc:	4a8a      	ldr	r2, [pc, #552]	@ (8002ee8 <mux_pres_cycle+0x2ac>)
 8002cbe:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002cc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cc6:	6018      	str	r0, [r3, #0]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	8019      	strh	r1, [r3, #0]
  bmp280_multi_system_t sensor_system;
  bmp280_sensors_data_t pressure_data;
  bool init_success = bmp280_multi_init(&sensor_system, g_mux_iface,NULL,0,0,sensor_addresses,sensor_channels);
 8002ccc:	4b87      	ldr	r3, [pc, #540]	@ (8002eec <mux_pres_cycle+0x2b0>)
 8002cce:	6819      	ldr	r1, [r3, #0]
 8002cd0:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8002cd4:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002cd8:	9302      	str	r3, [sp, #8]
 8002cda:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f7fe ff1d 	bl	8001b26 <bmp280_multi_init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f887 3256 	strb.w	r3, [r7, #598]	@ 0x256
  if (!init_success) {
 8002cf2:	f897 3256 	ldrb.w	r3, [r7, #598]	@ 0x256
 8002cf6:	f083 0301 	eor.w	r3, r3, #1
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d026      	beq.n	8002d4e <mux_pres_cycle+0x112>
    NOTIFY_MESSAGE("ERROR: Failed to initialize BMP280 multi-sensor system!");
 8002d00:	f107 030c 	add.w	r3, r7, #12
 8002d04:	4a7a      	ldr	r2, [pc, #488]	@ (8002ef0 <mux_pres_cycle+0x2b4>)
 8002d06:	2180      	movs	r1, #128	@ 0x80
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f006 fd03 	bl	8009714 <sniprintf>
 8002d0e:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
 8002d12:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002d16:	f107 020c 	add.w	r2, r7, #12
 8002d1a:	18d0      	adds	r0, r2, r3
 8002d1c:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002d20:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002d24:	4a73      	ldr	r2, [pc, #460]	@ (8002ef4 <mux_pres_cycle+0x2b8>)
 8002d26:	4619      	mov	r1, r3
 8002d28:	f006 fcf4 	bl	8009714 <sniprintf>
 8002d2c:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 8002d30:	4b71      	ldr	r3, [pc, #452]	@ (8002ef8 <mux_pres_cycle+0x2bc>)
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	f107 010c 	add.w	r1, r7, #12
 8002d48:	2364      	movs	r3, #100	@ 0x64
 8002d4a:	f003 ffff 	bl	8006d4c <HAL_UART_Transmit>
  }

  for(;;) {
    if(init_success){
 8002d4e:	f897 3256 	ldrb.w	r3, [r7, #598]	@ 0x256
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 808e 	beq.w	8002e74 <mux_pres_cycle+0x238>
      if (bmp280_multi_force_measurement(&sensor_system)) {
 8002d58:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe ffe7 	bl	8001d30 <bmp280_multi_force_measurement>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d05d      	beq.n	8002e24 <mux_pres_cycle+0x1e8>
        HAL_Delay(100);            
 8002d68:	2064      	movs	r0, #100	@ 0x64
 8002d6a:	f000 fbd7 	bl	800351c <HAL_Delay>
        while (bmp280_multi_is_measuring(&sensor_system)) {
 8002d6e:	e002      	b.n	8002d76 <mux_pres_cycle+0x13a>
          HAL_Delay(10);
 8002d70:	200a      	movs	r0, #10
 8002d72:	f000 fbd3 	bl	800351c <HAL_Delay>
        while (bmp280_multi_is_measuring(&sensor_system)) {
 8002d76:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff f827 	bl	8001dce <bmp280_multi_is_measuring>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f4      	bne.n	8002d70 <mux_pres_cycle+0x134>
        }            
        if (bmp280_multi_read_differences(&sensor_system, &pressure_data)) {
 8002d86:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8002d8a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff f85d 	bl	8001e50 <bmp280_multi_read_differences>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01b      	beq.n	8002dd4 <mux_pres_cycle+0x198>
          g_sensor_data->delta_pres_0 = pressure_data.delta_pres_0;
 8002d9c:	4b57      	ldr	r3, [pc, #348]	@ (8002efc <mux_pres_cycle+0x2c0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8002da4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002da8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002dac:	801a      	strh	r2, [r3, #0]
          g_sensor_data->delta_pres_1 = pressure_data.delta_pres_1;
 8002dae:	4b53      	ldr	r3, [pc, #332]	@ (8002efc <mux_pres_cycle+0x2c0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8002db6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002dba:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8002dbe:	805a      	strh	r2, [r3, #2]
          g_sensor_data->delta_pres_2 = pressure_data.delta_pres_2;
 8002dc0:	4b4e      	ldr	r3, [pc, #312]	@ (8002efc <mux_pres_cycle+0x2c0>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8002dc8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002dcc:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002dd0:	809a      	strh	r2, [r3, #4]
 8002dd2:	e05d      	b.n	8002e90 <mux_pres_cycle+0x254>
        } else {
          NOTIFY_MESSAGE("ERROR: Failed to read sensor differences");
 8002dd4:	f107 030c 	add.w	r3, r7, #12
 8002dd8:	4a45      	ldr	r2, [pc, #276]	@ (8002ef0 <mux_pres_cycle+0x2b4>)
 8002dda:	2180      	movs	r1, #128	@ 0x80
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f006 fc99 	bl	8009714 <sniprintf>
 8002de2:	f8c7 0240 	str.w	r0, [r7, #576]	@ 0x240
 8002de6:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8002dea:	f107 020c 	add.w	r2, r7, #12
 8002dee:	18d0      	adds	r0, r2, r3
 8002df0:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8002df4:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002df8:	4a41      	ldr	r2, [pc, #260]	@ (8002f00 <mux_pres_cycle+0x2c4>)
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f006 fc8a 	bl	8009714 <sniprintf>
 8002e00:	f8c7 023c 	str.w	r0, [r7, #572]	@ 0x23c
 8002e04:	4b3c      	ldr	r3, [pc, #240]	@ (8002ef8 <mux_pres_cycle+0x2bc>)
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	f107 010c 	add.w	r1, r7, #12
 8002e1c:	2364      	movs	r3, #100	@ 0x64
 8002e1e:	f003 ff95 	bl	8006d4c <HAL_UART_Transmit>
 8002e22:	e035      	b.n	8002e90 <mux_pres_cycle+0x254>
        }
      }else {
        NOTIFY_MESSAGE("ERROR: Failed to force measurements");
 8002e24:	f107 030c 	add.w	r3, r7, #12
 8002e28:	4a31      	ldr	r2, [pc, #196]	@ (8002ef0 <mux_pres_cycle+0x2b4>)
 8002e2a:	2180      	movs	r1, #128	@ 0x80
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f006 fc71 	bl	8009714 <sniprintf>
 8002e32:	f8c7 0248 	str.w	r0, [r7, #584]	@ 0x248
 8002e36:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8002e3a:	f107 020c 	add.w	r2, r7, #12
 8002e3e:	18d0      	adds	r0, r2, r3
 8002e40:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8002e44:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002e48:	4a2e      	ldr	r2, [pc, #184]	@ (8002f04 <mux_pres_cycle+0x2c8>)
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f006 fc62 	bl	8009714 <sniprintf>
 8002e50:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
 8002e54:	4b28      	ldr	r3, [pc, #160]	@ (8002ef8 <mux_pres_cycle+0x2bc>)
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	f107 010c 	add.w	r1, r7, #12
 8002e6c:	2364      	movs	r3, #100	@ 0x64
 8002e6e:	f003 ff6d 	bl	8006d4c <HAL_UART_Transmit>
 8002e72:	e00d      	b.n	8002e90 <mux_pres_cycle+0x254>
      }
    }else {
          g_sensor_data->delta_pres_0 = -200; //Mock Data
 8002e74:	4b21      	ldr	r3, [pc, #132]	@ (8002efc <mux_pres_cycle+0x2c0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8002e7c:	801a      	strh	r2, [r3, #0]
          g_sensor_data->delta_pres_1 = 200; //Mock Data
 8002e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8002efc <mux_pres_cycle+0x2c0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	22c8      	movs	r2, #200	@ 0xc8
 8002e84:	805a      	strh	r2, [r3, #2]
          g_sensor_data->delta_pres_2 = 730; //Mock Data
 8002e86:	4b1d      	ldr	r3, [pc, #116]	@ (8002efc <mux_pres_cycle+0x2c0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f240 22da 	movw	r2, #730	@ 0x2da
 8002e8e:	809a      	strh	r2, [r3, #4]
    }
    if(init_succ){
 8002e90:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d015      	beq.n	8002ec4 <mux_pres_cycle+0x288>
      if (MAX6650_ReadData(&fan_controller, &fan_data)) {
 8002e98:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 8002e9c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fd08 	bl	80018b8 <MAX6650_ReadData>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d013      	beq.n	8002ed6 <mux_pres_cycle+0x29a>
        g_driver_data->fan_rpm = fan_data.fan_rpm; 
 8002eae:	4b16      	ldr	r3, [pc, #88]	@ (8002f08 <mux_pres_cycle+0x2cc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f8b7 2214 	ldrh.w	r2, [r7, #532]	@ 0x214
 8002eb6:	801a      	strh	r2, [r3, #0]
        g_driver_data->status_flag = fan_data.status_flag; 
 8002eb8:	4b13      	ldr	r3, [pc, #76]	@ (8002f08 <mux_pres_cycle+0x2cc>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f897 2216 	ldrb.w	r2, [r7, #534]	@ 0x216
 8002ec0:	709a      	strb	r2, [r3, #2]
 8002ec2:	e008      	b.n	8002ed6 <mux_pres_cycle+0x29a>
      }
    }else {
        g_driver_data->fan_rpm = 1200; //Mock Data
 8002ec4:	4b10      	ldr	r3, [pc, #64]	@ (8002f08 <mux_pres_cycle+0x2cc>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8002ecc:	801a      	strh	r2, [r3, #0]
        g_driver_data->status_flag = HAL_OK;  //Mock Data
 8002ece:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <mux_pres_cycle+0x2cc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	709a      	strb	r2, [r3, #2]
    }
    osDelay(1);
 8002ed6:	2001      	movs	r0, #1
 8002ed8:	f005 f9fb 	bl	80082d2 <osDelay>
    if(init_success){
 8002edc:	e737      	b.n	8002d4e <mux_pres_cycle+0x112>
 8002ede:	bf00      	nop
 8002ee0:	200005a0 	.word	0x200005a0
 8002ee4:	0800a2d4 	.word	0x0800a2d4
 8002ee8:	0800a2dc 	.word	0x0800a2dc
 8002eec:	200005a4 	.word	0x200005a4
 8002ef0:	0800a21c 	.word	0x0800a21c
 8002ef4:	0800a244 	.word	0x0800a244
 8002ef8:	2000059c 	.word	0x2000059c
 8002efc:	200005bc 	.word	0x200005bc
 8002f00:	0800a280 	.word	0x0800a280
 8002f04:	0800a2ac 	.word	0x0800a2ac
 8002f08:	200005b8 	.word	0x200005b8

08002f0c <uart_logger_cycle>:
  }
};
void uart_logger_cycle(void const *argument){
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b0c6      	sub	sp, #280	@ 0x118
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f16:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f1a:	6018      	str	r0, [r3, #0]
  for(;;) {
    raw_data_t raw_data_placeholder;
    if(g_sensor_data!=NULL){
 8002f1c:	4b71      	ldr	r3, [pc, #452]	@ (80030e4 <uart_logger_cycle+0x1d8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d012      	beq.n	8002f4a <uart_logger_cycle+0x3e>
        raw_data_placeholder.delta_pres_0 = g_sensor_data->delta_pres_0;
 8002f24:	4b6f      	ldr	r3, [pc, #444]	@ (80030e4 <uart_logger_cycle+0x1d8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f2c:	f8a7 30f4 	strh.w	r3, [r7, #244]	@ 0xf4
        raw_data_placeholder.delta_pres_1 = g_sensor_data->delta_pres_1;
 8002f30:	4b6c      	ldr	r3, [pc, #432]	@ (80030e4 <uart_logger_cycle+0x1d8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f38:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
        raw_data_placeholder.delta_pres_2 = g_sensor_data->delta_pres_2;
 8002f3c:	4b69      	ldr	r3, [pc, #420]	@ (80030e4 <uart_logger_cycle+0x1d8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f44:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
 8002f48:	e013      	b.n	8002f72 <uart_logger_cycle+0x66>
    }else {
         bmp280_sensors_data_t tmp_placeholder = { //Mock Data
 8002f4a:	4a67      	ldr	r2, [pc, #412]	@ (80030e8 <uart_logger_cycle+0x1dc>)
 8002f4c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8002f50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f54:	6018      	str	r0, [r3, #0]
 8002f56:	3304      	adds	r3, #4
 8002f58:	8019      	strh	r1, [r3, #0]
          .delta_pres_0 = -100, //Mock Data
          .delta_pres_1 = 100, //Mock Data
          .delta_pres_2 = 365 //Mock Data
         };
        raw_data_placeholder.delta_pres_0 = tmp_placeholder.delta_pres_0;
 8002f5a:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 8002f5e:	f8a7 30f4 	strh.w	r3, [r7, #244]	@ 0xf4
        raw_data_placeholder.delta_pres_1 = tmp_placeholder.delta_pres_1;
 8002f62:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	@ 0xd2
 8002f66:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
        raw_data_placeholder.delta_pres_2 = tmp_placeholder.delta_pres_2;
 8002f6a:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	@ 0xd4
 8002f6e:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
    }
    if(g_driver_data!=NULL){
 8002f72:	4b5e      	ldr	r3, [pc, #376]	@ (80030ec <uart_logger_cycle+0x1e0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <uart_logger_cycle+0x84>
        raw_data_placeholder.fan_rpm = g_driver_data->fan_rpm;
 8002f7a:	4b5c      	ldr	r3, [pc, #368]	@ (80030ec <uart_logger_cycle+0x1e0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
        raw_data_placeholder.status_flag = g_driver_data->status_flag;
 8002f84:	4b59      	ldr	r3, [pc, #356]	@ (80030ec <uart_logger_cycle+0x1e0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	789b      	ldrb	r3, [r3, #2]
 8002f8a:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc
 8002f8e:	e00e      	b.n	8002fae <uart_logger_cycle+0xa2>
    }else {
        max6650_data_t tmp_placeholder = { //Mock Data
 8002f90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f94:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
            .fan_rpm = 1000, //Mock Data
			      .status_flag = HAL_OK //Mock Data
        };
        raw_data_placeholder.fan_rpm = tmp_placeholder.fan_rpm;
 8002f9e:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8002fa2:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
        raw_data_placeholder.status_flag = tmp_placeholder.status_flag;
 8002fa6:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8002faa:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc
    }
    uart_tx_logging_t temp_uart_data_placeholder = create_uart_tx_packet(&raw_data_placeholder);
 8002fae:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002fb2:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe f9ad 	bl	8001318 <create_uart_tx_packet>
    uint8_t encoded_tx_buffer[64];
    size_t encoded_tx_size = encode_uart_tx_packet(&temp_uart_data_placeholder, encoded_tx_buffer, sizeof(encoded_tx_buffer));
 8002fbe:	f107 010c 	add.w	r1, r7, #12
 8002fc2:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002fc6:	2240      	movs	r2, #64	@ 0x40
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fe faa5 	bl	8001518 <encode_uart_tx_packet>
 8002fce:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    uint8_t original_data[sizeof(uart_tx_logging_t) + sizeof(uint16_t)];
    memcpy(original_data, &temp_uart_data_placeholder, sizeof(uart_tx_logging_t));
 8002fd2:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8002fd6:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002fda:	220c      	movs	r2, #12
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f006 fc71 	bl	80098c4 <memcpy>
    uint16_t packet_crc = calculate_crc16((uint8_t*)&temp_uart_data_placeholder, sizeof(uart_tx_logging_t));
 8002fe2:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002fe6:	210c      	movs	r1, #12
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe f955 	bl	8001298 <calculate_crc16>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
    memcpy(original_data + sizeof(uart_tx_logging_t), &packet_crc, sizeof(uint16_t));
 8002ff4:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002ff8:	330c      	adds	r3, #12
 8002ffa:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 8002ffe:	801a      	strh	r2, [r3, #0]
    bool encoding_valid = verify_cobs_encoding(original_data, sizeof(original_data),encoded_tx_buffer, encoded_tx_size);
 8003000:	f107 020c 	add.w	r2, r7, #12
 8003004:	f107 00d8 	add.w	r0, r7, #216	@ 0xd8
 8003008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300c:	210e      	movs	r1, #14
 800300e:	f7fe fab0 	bl	8001572 <verify_cobs_encoding>
 8003012:	4603      	mov	r3, r0
 8003014:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
    if (encoding_valid){
 8003018:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 800301c:	2b00      	cmp	r3, #0
 800301e:	d031      	beq.n	8003084 <uart_logger_cycle+0x178>
      LOG_DATA_ENCODED(encoded_tx_buffer,encoded_tx_size);
 8003020:	4b33      	ldr	r3, [pc, #204]	@ (80030f0 <uart_logger_cycle+0x1e4>)
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003028:	b29a      	uxth	r2, r3
 800302a:	f107 010c 	add.w	r1, r7, #12
 800302e:	2364      	movs	r3, #100	@ 0x64
 8003030:	f003 fe8c 	bl	8006d4c <HAL_UART_Transmit>
      NOTIFY_MESSAGE("Verificated Encoding Data\n");
 8003034:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003038:	4a2e      	ldr	r2, [pc, #184]	@ (80030f4 <uart_logger_cycle+0x1e8>)
 800303a:	2180      	movs	r1, #128	@ 0x80
 800303c:	4618      	mov	r0, r3
 800303e:	f006 fb69 	bl	8009714 <sniprintf>
 8003042:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
 8003046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800304a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800304e:	18d0      	adds	r0, r2, r3
 8003050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003054:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8003058:	4a27      	ldr	r2, [pc, #156]	@ (80030f8 <uart_logger_cycle+0x1ec>)
 800305a:	4619      	mov	r1, r3
 800305c:	f006 fb5a 	bl	8009714 <sniprintf>
 8003060:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
 8003064:	4b25      	ldr	r3, [pc, #148]	@ (80030fc <uart_logger_cycle+0x1f0>)
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800306c:	b29a      	uxth	r2, r3
 800306e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003072:	b29b      	uxth	r3, r3
 8003074:	4413      	add	r3, r2
 8003076:	b29a      	uxth	r2, r3
 8003078:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800307c:	2364      	movs	r3, #100	@ 0x64
 800307e:	f003 fe65 	bl	8006d4c <HAL_UART_Transmit>
 8003082:	e026      	b.n	80030d2 <uart_logger_cycle+0x1c6>
    }else{
      NOTIFY_MESSAGE("Invalid Message Generation, Rejected no verification\n");
 8003084:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003088:	4a1a      	ldr	r2, [pc, #104]	@ (80030f4 <uart_logger_cycle+0x1e8>)
 800308a:	2180      	movs	r1, #128	@ 0x80
 800308c:	4618      	mov	r0, r3
 800308e:	f006 fb41 	bl	8009714 <sniprintf>
 8003092:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 8003096:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800309a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800309e:	18d0      	adds	r0, r2, r3
 80030a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030a4:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80030a8:	4a15      	ldr	r2, [pc, #84]	@ (8003100 <uart_logger_cycle+0x1f4>)
 80030aa:	4619      	mov	r1, r3
 80030ac:	f006 fb32 	bl	8009714 <sniprintf>
 80030b0:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
 80030b4:	4b11      	ldr	r3, [pc, #68]	@ (80030fc <uart_logger_cycle+0x1f0>)
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030bc:	b29a      	uxth	r2, r3
 80030be:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	4413      	add	r3, r2
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80030cc:	2364      	movs	r3, #100	@ 0x64
 80030ce:	f003 fe3d 	bl	8006d4c <HAL_UART_Transmit>
    }
    HAL_Delay(500);
 80030d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80030d6:	f000 fa21 	bl	800351c <HAL_Delay>
    osDelay(1);
 80030da:	2001      	movs	r0, #1
 80030dc:	f005 f8f9 	bl	80082d2 <osDelay>
  for(;;) {
 80030e0:	e71c      	b.n	8002f1c <uart_logger_cycle+0x10>
 80030e2:	bf00      	nop
 80030e4:	200005bc 	.word	0x200005bc
 80030e8:	0800a23c 	.word	0x0800a23c
 80030ec:	200005b8 	.word	0x200005b8
 80030f0:	20000598 	.word	0x20000598
 80030f4:	0800a21c 	.word	0x0800a21c
 80030f8:	0800a2e4 	.word	0x0800a2e4
 80030fc:	2000059c 	.word	0x2000059c
 8003100:	0800a300 	.word	0x0800a300

08003104 <HAL_UARTEx_RxEventCallback>:
  }
};

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	807b      	strh	r3, [r7, #2]
	LOG_MESSAGE("Notification\n");
 8003110:	4b10      	ldr	r3, [pc, #64]	@ (8003154 <HAL_UARTEx_RxEventCallback+0x50>)
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	2364      	movs	r3, #100	@ 0x64
 8003116:	220e      	movs	r2, #14
 8003118:	490f      	ldr	r1, [pc, #60]	@ (8003158 <HAL_UARTEx_RxEventCallback+0x54>)
 800311a:	f003 fe17 	bl	8006d4c <HAL_UART_Transmit>
	if (huart -> Instance == Current_Target)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4b0e      	ldr	r3, [pc, #56]	@ (800315c <HAL_UARTEx_RxEventCallback+0x58>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d10f      	bne.n	800314a <HAL_UARTEx_RxEventCallback+0x46>
	{
		memcpy(main_buff,rx_buff,Size);
 800312a:	887b      	ldrh	r3, [r7, #2]
 800312c:	461a      	mov	r2, r3
 800312e:	490c      	ldr	r1, [pc, #48]	@ (8003160 <HAL_UARTEx_RxEventCallback+0x5c>)
 8003130:	480c      	ldr	r0, [pc, #48]	@ (8003164 <HAL_UARTEx_RxEventCallback+0x60>)
 8003132:	f006 fbc7 	bl	80098c4 <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(g_data_logger, rx_buff, rx_buff_size);
 8003136:	4b07      	ldr	r3, [pc, #28]	@ (8003154 <HAL_UARTEx_RxEventCallback+0x50>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	220a      	movs	r2, #10
 800313c:	4908      	ldr	r1, [pc, #32]	@ (8003160 <HAL_UARTEx_RxEventCallback+0x5c>)
 800313e:	4618      	mov	r0, r3
 8003140:	f005 f808 	bl	8008154 <HAL_UARTEx_ReceiveToIdle_DMA>
		rx_validation = 1;
 8003144:	4b08      	ldr	r3, [pc, #32]	@ (8003168 <HAL_UARTEx_RxEventCallback+0x64>)
 8003146:	2201      	movs	r2, #1
 8003148:	601a      	str	r2, [r3, #0]
	}
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000598 	.word	0x20000598
 8003158:	0800a338 	.word	0x0800a338
 800315c:	200005b0 	.word	0x200005b0
 8003160:	200005c0 	.word	0x200005c0
 8003164:	200005cc 	.word	0x200005cc
 8003168:	200005e0 	.word	0x200005e0

0800316c <handle_uart_cmd>:
void handle_uart_cmd(uart_rx_command_t* current_command){
 800316c:	b580      	push	{r7, lr}
 800316e:	b0a8      	sub	sp, #160	@ 0xa0
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  switch(current_command->commandvalue){
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d002      	beq.n	8003182 <handle_uart_cmd+0x16>
 800317c:	2b02      	cmp	r3, #2
 800317e:	d028      	beq.n	80031d2 <handle_uart_cmd+0x66>
 8003180:	e04f      	b.n	8003222 <handle_uart_cmd+0xb6>
    case CFF_ON:
      NOTIFY_MESSAGE("Command Target ON");
 8003182:	f107 0308 	add.w	r3, r7, #8
 8003186:	4a3c      	ldr	r2, [pc, #240]	@ (8003278 <handle_uart_cmd+0x10c>)
 8003188:	2180      	movs	r1, #128	@ 0x80
 800318a:	4618      	mov	r0, r3
 800318c:	f006 fac2 	bl	8009714 <sniprintf>
 8003190:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 8003194:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003198:	f107 0208 	add.w	r2, r7, #8
 800319c:	18d0      	adds	r0, r2, r3
 800319e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031a2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80031a6:	4a35      	ldr	r2, [pc, #212]	@ (800327c <handle_uart_cmd+0x110>)
 80031a8:	4619      	mov	r1, r3
 80031aa:	f006 fab3 	bl	8009714 <sniprintf>
 80031ae:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 80031b2:	4b33      	ldr	r3, [pc, #204]	@ (8003280 <handle_uart_cmd+0x114>)
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	f107 0108 	add.w	r1, r7, #8
 80031ca:	2364      	movs	r3, #100	@ 0x64
 80031cc:	f003 fdbe 	bl	8006d4c <HAL_UART_Transmit>
      return;
 80031d0:	e04f      	b.n	8003272 <handle_uart_cmd+0x106>
    case CFF_OFF:
      NOTIFY_MESSAGE("Command Target OFF");
 80031d2:	f107 0308 	add.w	r3, r7, #8
 80031d6:	4a28      	ldr	r2, [pc, #160]	@ (8003278 <handle_uart_cmd+0x10c>)
 80031d8:	2180      	movs	r1, #128	@ 0x80
 80031da:	4618      	mov	r0, r3
 80031dc:	f006 fa9a 	bl	8009714 <sniprintf>
 80031e0:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 80031e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031e8:	f107 0208 	add.w	r2, r7, #8
 80031ec:	18d0      	adds	r0, r2, r3
 80031ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031f2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80031f6:	4a23      	ldr	r2, [pc, #140]	@ (8003284 <handle_uart_cmd+0x118>)
 80031f8:	4619      	mov	r1, r3
 80031fa:	f006 fa8b 	bl	8009714 <sniprintf>
 80031fe:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
 8003202:	4b1f      	ldr	r3, [pc, #124]	@ (8003280 <handle_uart_cmd+0x114>)
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800320a:	b29a      	uxth	r2, r3
 800320c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003210:	b29b      	uxth	r3, r3
 8003212:	4413      	add	r3, r2
 8003214:	b29a      	uxth	r2, r3
 8003216:	f107 0108 	add.w	r1, r7, #8
 800321a:	2364      	movs	r3, #100	@ 0x64
 800321c:	f003 fd96 	bl	8006d4c <HAL_UART_Transmit>
      return;
 8003220:	e027      	b.n	8003272 <handle_uart_cmd+0x106>
    default :
      NOTIFY_MESSAGE("Command Target AUTO");
 8003222:	f107 0308 	add.w	r3, r7, #8
 8003226:	4a14      	ldr	r2, [pc, #80]	@ (8003278 <handle_uart_cmd+0x10c>)
 8003228:	2180      	movs	r1, #128	@ 0x80
 800322a:	4618      	mov	r0, r3
 800322c:	f006 fa72 	bl	8009714 <sniprintf>
 8003230:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8003234:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003238:	f107 0208 	add.w	r2, r7, #8
 800323c:	18d0      	adds	r0, r2, r3
 800323e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003242:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8003246:	4a10      	ldr	r2, [pc, #64]	@ (8003288 <handle_uart_cmd+0x11c>)
 8003248:	4619      	mov	r1, r3
 800324a:	f006 fa63 	bl	8009714 <sniprintf>
 800324e:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
 8003252:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <handle_uart_cmd+0x114>)
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800325a:	b29a      	uxth	r2, r3
 800325c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003260:	b29b      	uxth	r3, r3
 8003262:	4413      	add	r3, r2
 8003264:	b29a      	uxth	r2, r3
 8003266:	f107 0108 	add.w	r1, r7, #8
 800326a:	2364      	movs	r3, #100	@ 0x64
 800326c:	f003 fd6e 	bl	8006d4c <HAL_UART_Transmit>
      return;
 8003270:	bf00      	nop
  }
}
 8003272:	37a0      	adds	r7, #160	@ 0xa0
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	0800a21c 	.word	0x0800a21c
 800327c:	0800a348 	.word	0x0800a348
 8003280:	2000059c 	.word	0x2000059c
 8003284:	0800a35c 	.word	0x0800a35c
 8003288:	0800a370 	.word	0x0800a370

0800328c <uart_notifications_cycle>:
void uart_notifications_cycle(void const *argument){
 800328c:	b580      	push	{r7, lr}
 800328e:	b0aa      	sub	sp, #168	@ 0xa8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
      for(;;)
	  {
	   HAL_UARTEx_ReceiveToIdle_DMA(g_data_logger, (uint8_t *)rx_buff, sizeof(rx_buff));
 8003294:	4b4e      	ldr	r3, [pc, #312]	@ (80033d0 <uart_notifications_cycle+0x144>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	220a      	movs	r2, #10
 800329a:	494e      	ldr	r1, [pc, #312]	@ (80033d4 <uart_notifications_cycle+0x148>)
 800329c:	4618      	mov	r0, r3
 800329e:	f004 ff59 	bl	8008154 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(g_logger_dma,DMA_IT_HT);
 80032a2:	4b4d      	ldr	r3, [pc, #308]	@ (80033d8 <uart_notifications_cycle+0x14c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b4b      	ldr	r3, [pc, #300]	@ (80033d8 <uart_notifications_cycle+0x14c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0204 	bic.w	r2, r2, #4
 80032b4:	601a      	str	r2, [r3, #0]
	   if (rx_validation){
 80032b6:	4b49      	ldr	r3, [pc, #292]	@ (80033dc <uart_notifications_cycle+0x150>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0ea      	beq.n	8003294 <uart_notifications_cycle+0x8>
		   NOTIFY_MESSAGE("New Message, performing verification...");
 80032be:	f107 030c 	add.w	r3, r7, #12
 80032c2:	4a47      	ldr	r2, [pc, #284]	@ (80033e0 <uart_notifications_cycle+0x154>)
 80032c4:	2180      	movs	r1, #128	@ 0x80
 80032c6:	4618      	mov	r0, r3
 80032c8:	f006 fa24 	bl	8009714 <sniprintf>
 80032cc:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 80032d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032d4:	f107 020c 	add.w	r2, r7, #12
 80032d8:	18d0      	adds	r0, r2, r3
 80032da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032de:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80032e2:	4a40      	ldr	r2, [pc, #256]	@ (80033e4 <uart_notifications_cycle+0x158>)
 80032e4:	4619      	mov	r1, r3
 80032e6:	f006 fa15 	bl	8009714 <sniprintf>
 80032ea:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
 80032ee:	4b3e      	ldr	r3, [pc, #248]	@ (80033e8 <uart_notifications_cycle+0x15c>)
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	4413      	add	r3, r2
 8003300:	b29a      	uxth	r2, r3
 8003302:	f107 010c 	add.w	r1, r7, #12
 8003306:	2364      	movs	r3, #100	@ 0x64
 8003308:	f003 fd20 	bl	8006d4c <HAL_UART_Transmit>
		   uart_rx_command_t decoded_rx_command;
		   if (decode_uart_rx_command(main_buff, 8, &decoded_rx_command)){
 800330c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003310:	461a      	mov	r2, r3
 8003312:	2108      	movs	r1, #8
 8003314:	4835      	ldr	r0, [pc, #212]	@ (80033ec <uart_notifications_cycle+0x160>)
 8003316:	f7fe f97a 	bl	800160e <decode_uart_rx_command>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d02c      	beq.n	800337a <uart_notifications_cycle+0xee>
			   NOTIFY_MESSAGE("Captured Valid rx_Command");
 8003320:	f107 030c 	add.w	r3, r7, #12
 8003324:	4a2e      	ldr	r2, [pc, #184]	@ (80033e0 <uart_notifications_cycle+0x154>)
 8003326:	2180      	movs	r1, #128	@ 0x80
 8003328:	4618      	mov	r0, r3
 800332a:	f006 f9f3 	bl	8009714 <sniprintf>
 800332e:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 8003332:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003336:	f107 020c 	add.w	r2, r7, #12
 800333a:	18d0      	adds	r0, r2, r3
 800333c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003340:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8003344:	4a2a      	ldr	r2, [pc, #168]	@ (80033f0 <uart_notifications_cycle+0x164>)
 8003346:	4619      	mov	r1, r3
 8003348:	f006 f9e4 	bl	8009714 <sniprintf>
 800334c:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 8003350:	4b25      	ldr	r3, [pc, #148]	@ (80033e8 <uart_notifications_cycle+0x15c>)
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003358:	b29a      	uxth	r2, r3
 800335a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800335e:	b29b      	uxth	r3, r3
 8003360:	4413      	add	r3, r2
 8003362:	b29a      	uxth	r2, r3
 8003364:	f107 010c 	add.w	r1, r7, #12
 8003368:	2364      	movs	r3, #100	@ 0x64
 800336a:	f003 fcef 	bl	8006d4c <HAL_UART_Transmit>
			   handle_uart_cmd(&decoded_rx_command);
 800336e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fefa 	bl	800316c <handle_uart_cmd>
 8003378:	e026      	b.n	80033c8 <uart_notifications_cycle+0x13c>
		   }else {
			   NOTIFY_MESSAGE("Invalid Message Captured, Rejected no verification");
 800337a:	f107 030c 	add.w	r3, r7, #12
 800337e:	4a18      	ldr	r2, [pc, #96]	@ (80033e0 <uart_notifications_cycle+0x154>)
 8003380:	2180      	movs	r1, #128	@ 0x80
 8003382:	4618      	mov	r0, r3
 8003384:	f006 f9c6 	bl	8009714 <sniprintf>
 8003388:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800338c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003390:	f107 020c 	add.w	r2, r7, #12
 8003394:	18d0      	adds	r0, r2, r3
 8003396:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800339a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800339e:	4a15      	ldr	r2, [pc, #84]	@ (80033f4 <uart_notifications_cycle+0x168>)
 80033a0:	4619      	mov	r1, r3
 80033a2:	f006 f9b7 	bl	8009714 <sniprintf>
 80033a6:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
 80033aa:	4b0f      	ldr	r3, [pc, #60]	@ (80033e8 <uart_notifications_cycle+0x15c>)
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	b29a      	uxth	r2, r3
 80033be:	f107 010c 	add.w	r1, r7, #12
 80033c2:	2364      	movs	r3, #100	@ 0x64
 80033c4:	f003 fcc2 	bl	8006d4c <HAL_UART_Transmit>
		   }
		   rx_validation=0;
 80033c8:	4b04      	ldr	r3, [pc, #16]	@ (80033dc <uart_notifications_cycle+0x150>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
	   HAL_UARTEx_ReceiveToIdle_DMA(g_data_logger, (uint8_t *)rx_buff, sizeof(rx_buff));
 80033ce:	e761      	b.n	8003294 <uart_notifications_cycle+0x8>
 80033d0:	20000598 	.word	0x20000598
 80033d4:	200005c0 	.word	0x200005c0
 80033d8:	200005a8 	.word	0x200005a8
 80033dc:	200005e0 	.word	0x200005e0
 80033e0:	0800a21c 	.word	0x0800a21c
 80033e4:	0800a388 	.word	0x0800a388
 80033e8:	2000059c 	.word	0x2000059c
 80033ec:	200005cc 	.word	0x200005cc
 80033f0:	0800a3b4 	.word	0x0800a3b4
 80033f4:	0800a3d0 	.word	0x0800a3d0

080033f8 <perform_setup_threads>:
			UART_HandleTypeDef *local_monitor_place_holder,
			I2C_HandleTypeDef *driver_iface_placeholder,
			I2C_HandleTypeDef *mux_iface_placeholder,
			DMA_HandleTypeDef *logger_dma_placeholder,
			USART_TypeDef * target_placeholder,
			CAN_HandleTypeDef * can_placeholder){
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
    g_data_logger = data_logger_place_holder;
 8003406:	4a0d      	ldr	r2, [pc, #52]	@ (800343c <perform_setup_threads+0x44>)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6013      	str	r3, [r2, #0]
    g_local_monitor = local_monitor_place_holder;
 800340c:	4a0c      	ldr	r2, [pc, #48]	@ (8003440 <perform_setup_threads+0x48>)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	6013      	str	r3, [r2, #0]
    g_driver_iface = driver_iface_placeholder;
 8003412:	4a0c      	ldr	r2, [pc, #48]	@ (8003444 <perform_setup_threads+0x4c>)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6013      	str	r3, [r2, #0]
    g_mux_iface = mux_iface_placeholder;
 8003418:	4a0b      	ldr	r2, [pc, #44]	@ (8003448 <perform_setup_threads+0x50>)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6013      	str	r3, [r2, #0]
    g_logger_dma =logger_dma_placeholder;
 800341e:	4a0b      	ldr	r2, [pc, #44]	@ (800344c <perform_setup_threads+0x54>)
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	6013      	str	r3, [r2, #0]
    g_can_iface =can_placeholder;
 8003424:	4a0a      	ldr	r2, [pc, #40]	@ (8003450 <perform_setup_threads+0x58>)
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	6013      	str	r3, [r2, #0]
    Current_Target = target_placeholder;
 800342a:	4a0a      	ldr	r2, [pc, #40]	@ (8003454 <perform_setup_threads+0x5c>)
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	6013      	str	r3, [r2, #0]
};
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	20000598 	.word	0x20000598
 8003440:	2000059c 	.word	0x2000059c
 8003444:	200005a0 	.word	0x200005a0
 8003448:	200005a4 	.word	0x200005a4
 800344c:	200005a8 	.word	0x200005a8
 8003450:	200005ac 	.word	0x200005ac
 8003454:	200005b0 	.word	0x200005b0

08003458 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003458:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003490 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800345c:	f7ff fad8 	bl	8002a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003460:	480c      	ldr	r0, [pc, #48]	@ (8003494 <LoopForever+0x6>)
  ldr r1, =_edata
 8003462:	490d      	ldr	r1, [pc, #52]	@ (8003498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003464:	4a0d      	ldr	r2, [pc, #52]	@ (800349c <LoopForever+0xe>)
  movs r3, #0
 8003466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003468:	e002      	b.n	8003470 <LoopCopyDataInit>

0800346a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800346a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800346c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800346e:	3304      	adds	r3, #4

08003470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003474:	d3f9      	bcc.n	800346a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003476:	4a0a      	ldr	r2, [pc, #40]	@ (80034a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003478:	4c0a      	ldr	r4, [pc, #40]	@ (80034a4 <LoopForever+0x16>)
  movs r3, #0
 800347a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800347c:	e001      	b.n	8003482 <LoopFillZerobss>

0800347e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800347e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003480:	3204      	adds	r2, #4

08003482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003484:	d3fb      	bcc.n	800347e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003486:	f006 f9f7 	bl	8009878 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800348a:	f7fe fde1 	bl	8002050 <main>

0800348e <LoopForever>:

LoopForever:
    b LoopForever
 800348e:	e7fe      	b.n	800348e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003490:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8003494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003498:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800349c:	0800a498 	.word	0x0800a498
  ldr r2, =_sbss
 80034a0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80034a4:	20001460 	.word	0x20001460

080034a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034a8:	e7fe      	b.n	80034a8 <ADC1_IRQHandler>

080034aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034b4:	2003      	movs	r0, #3
 80034b6:	f000 face 	bl	8003a56 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034ba:	200f      	movs	r0, #15
 80034bc:	f7ff f9b6 	bl	800282c <HAL_InitTick>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	71fb      	strb	r3, [r7, #7]
 80034ca:	e001      	b.n	80034d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034cc:	f7fe ffe8 	bl	80024a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034d0:	79fb      	ldrb	r3, [r7, #7]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034e0:	4b06      	ldr	r3, [pc, #24]	@ (80034fc <HAL_IncTick+0x20>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	4b06      	ldr	r3, [pc, #24]	@ (8003500 <HAL_IncTick+0x24>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4413      	add	r3, r2
 80034ec:	4a04      	ldr	r2, [pc, #16]	@ (8003500 <HAL_IncTick+0x24>)
 80034ee:	6013      	str	r3, [r2, #0]
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	20000008 	.word	0x20000008
 8003500:	20000608 	.word	0x20000608

08003504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return uwTick;
 8003508:	4b03      	ldr	r3, [pc, #12]	@ (8003518 <HAL_GetTick+0x14>)
 800350a:	681b      	ldr	r3, [r3, #0]
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000608 	.word	0x20000608

0800351c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003524:	f7ff ffee 	bl	8003504 <HAL_GetTick>
 8003528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003534:	d005      	beq.n	8003542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003536:	4b0a      	ldr	r3, [pc, #40]	@ (8003560 <HAL_Delay+0x44>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4413      	add	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003542:	bf00      	nop
 8003544:	f7ff ffde 	bl	8003504 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	429a      	cmp	r2, r3
 8003552:	d8f7      	bhi.n	8003544 <HAL_Delay+0x28>
  {
  }
}
 8003554:	bf00      	nop
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000008 	.word	0x20000008

08003564 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e0ed      	b.n	8003752 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d102      	bne.n	8003588 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fe ffb4 	bl	80024f0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003598:	f7ff ffb4 	bl	8003504 <HAL_GetTick>
 800359c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800359e:	e012      	b.n	80035c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035a0:	f7ff ffb0 	bl	8003504 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b0a      	cmp	r3, #10
 80035ac:	d90b      	bls.n	80035c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2205      	movs	r2, #5
 80035be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e0c5      	b.n	8003752 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0e5      	beq.n	80035a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0202 	bic.w	r2, r2, #2
 80035e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035e4:	f7ff ff8e 	bl	8003504 <HAL_GetTick>
 80035e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035ea:	e012      	b.n	8003612 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035ec:	f7ff ff8a 	bl	8003504 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b0a      	cmp	r3, #10
 80035f8:	d90b      	bls.n	8003612 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2205      	movs	r2, #5
 800360a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e09f      	b.n	8003752 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e5      	bne.n	80035ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	7e1b      	ldrb	r3, [r3, #24]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d108      	bne.n	800363a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	e007      	b.n	800364a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003648:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	7e5b      	ldrb	r3, [r3, #25]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d108      	bne.n	8003664 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	e007      	b.n	8003674 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003672:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	7e9b      	ldrb	r3, [r3, #26]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d108      	bne.n	800368e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0220 	orr.w	r2, r2, #32
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	e007      	b.n	800369e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0220 	bic.w	r2, r2, #32
 800369c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	7edb      	ldrb	r3, [r3, #27]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d108      	bne.n	80036b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0210 	bic.w	r2, r2, #16
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	e007      	b.n	80036c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0210 	orr.w	r2, r2, #16
 80036c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	7f1b      	ldrb	r3, [r3, #28]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d108      	bne.n	80036e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0208 	orr.w	r2, r2, #8
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	e007      	b.n	80036f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0208 	bic.w	r2, r2, #8
 80036f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	7f5b      	ldrb	r3, [r3, #29]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d108      	bne.n	800370c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0204 	orr.w	r2, r2, #4
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	e007      	b.n	800371c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0204 	bic.w	r2, r2, #4
 800371a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	ea42 0103 	orr.w	r1, r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	1e5a      	subs	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800375a:	b480      	push	{r7}
 800375c:	b089      	sub	sp, #36	@ 0x24
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
 8003766:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800376e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003778:	7ffb      	ldrb	r3, [r7, #31]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d003      	beq.n	8003786 <HAL_CAN_AddTxMessage+0x2c>
 800377e:	7ffb      	ldrb	r3, [r7, #31]
 8003780:	2b02      	cmp	r3, #2
 8003782:	f040 80ad 	bne.w	80038e0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10a      	bne.n	80037a6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003796:	2b00      	cmp	r3, #0
 8003798:	d105      	bne.n	80037a6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8095 	beq.w	80038d0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	0e1b      	lsrs	r3, r3, #24
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80037b0:	2201      	movs	r2, #1
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	409a      	lsls	r2, r3
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10d      	bne.n	80037de <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80037cc:	68f9      	ldr	r1, [r7, #12]
 80037ce:	6809      	ldr	r1, [r1, #0]
 80037d0:	431a      	orrs	r2, r3
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	3318      	adds	r3, #24
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	440b      	add	r3, r1
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	e00f      	b.n	80037fe <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80037e8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80037ee:	68f9      	ldr	r1, [r7, #12]
 80037f0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80037f2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	3318      	adds	r3, #24
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	440b      	add	r3, r1
 80037fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6819      	ldr	r1, [r3, #0]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	3318      	adds	r3, #24
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	440b      	add	r3, r1
 800380e:	3304      	adds	r3, #4
 8003810:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	7d1b      	ldrb	r3, [r3, #20]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d111      	bne.n	800383e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	3318      	adds	r3, #24
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	4413      	add	r3, r2
 8003826:	3304      	adds	r3, #4
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	6811      	ldr	r1, [r2, #0]
 800382e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	3318      	adds	r3, #24
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	440b      	add	r3, r1
 800383a:	3304      	adds	r3, #4
 800383c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3307      	adds	r3, #7
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	061a      	lsls	r2, r3, #24
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3306      	adds	r3, #6
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	041b      	lsls	r3, r3, #16
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3305      	adds	r3, #5
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	021b      	lsls	r3, r3, #8
 8003858:	4313      	orrs	r3, r2
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	3204      	adds	r2, #4
 800385e:	7812      	ldrb	r2, [r2, #0]
 8003860:	4610      	mov	r0, r2
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	6811      	ldr	r1, [r2, #0]
 8003866:	ea43 0200 	orr.w	r2, r3, r0
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	440b      	add	r3, r1
 8003870:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003874:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3303      	adds	r3, #3
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	061a      	lsls	r2, r3, #24
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3302      	adds	r3, #2
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	041b      	lsls	r3, r3, #16
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3301      	adds	r3, #1
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	021b      	lsls	r3, r3, #8
 8003890:	4313      	orrs	r3, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	7812      	ldrb	r2, [r2, #0]
 8003896:	4610      	mov	r0, r2
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	6811      	ldr	r1, [r2, #0]
 800389c:	ea43 0200 	orr.w	r2, r3, r0
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	440b      	add	r3, r1
 80038a6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80038aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	3318      	adds	r3, #24
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	4413      	add	r3, r2
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	6811      	ldr	r1, [r2, #0]
 80038be:	f043 0201 	orr.w	r2, r3, #1
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	3318      	adds	r3, #24
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	440b      	add	r3, r1
 80038ca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	e00e      	b.n	80038ee <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e006      	b.n	80038ee <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
  }
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3724      	adds	r7, #36	@ 0x24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800390c:	4b0c      	ldr	r3, [pc, #48]	@ (8003940 <__NVIC_SetPriorityGrouping+0x44>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003918:	4013      	ands	r3, r2
 800391a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003924:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800392c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800392e:	4a04      	ldr	r2, [pc, #16]	@ (8003940 <__NVIC_SetPriorityGrouping+0x44>)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	60d3      	str	r3, [r2, #12]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003948:	4b04      	ldr	r3, [pc, #16]	@ (800395c <__NVIC_GetPriorityGrouping+0x18>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	0a1b      	lsrs	r3, r3, #8
 800394e:	f003 0307 	and.w	r3, r3, #7
}
 8003952:	4618      	mov	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800396a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396e:	2b00      	cmp	r3, #0
 8003970:	db0b      	blt.n	800398a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	f003 021f 	and.w	r2, r3, #31
 8003978:	4907      	ldr	r1, [pc, #28]	@ (8003998 <__NVIC_EnableIRQ+0x38>)
 800397a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	2001      	movs	r0, #1
 8003982:	fa00 f202 	lsl.w	r2, r0, r2
 8003986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000e100 	.word	0xe000e100

0800399c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	6039      	str	r1, [r7, #0]
 80039a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	db0a      	blt.n	80039c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	490c      	ldr	r1, [pc, #48]	@ (80039e8 <__NVIC_SetPriority+0x4c>)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	0112      	lsls	r2, r2, #4
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	440b      	add	r3, r1
 80039c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039c4:	e00a      	b.n	80039dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	4908      	ldr	r1, [pc, #32]	@ (80039ec <__NVIC_SetPriority+0x50>)
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	3b04      	subs	r3, #4
 80039d4:	0112      	lsls	r2, r2, #4
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	440b      	add	r3, r1
 80039da:	761a      	strb	r2, [r3, #24]
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	e000e100 	.word	0xe000e100
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b089      	sub	sp, #36	@ 0x24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f1c3 0307 	rsb	r3, r3, #7
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	bf28      	it	cs
 8003a0e:	2304      	movcs	r3, #4
 8003a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3304      	adds	r3, #4
 8003a16:	2b06      	cmp	r3, #6
 8003a18:	d902      	bls.n	8003a20 <NVIC_EncodePriority+0x30>
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3b03      	subs	r3, #3
 8003a1e:	e000      	b.n	8003a22 <NVIC_EncodePriority+0x32>
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	401a      	ands	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a42:	43d9      	mvns	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a48:	4313      	orrs	r3, r2
         );
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3724      	adds	r7, #36	@ 0x24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ff4c 	bl	80038fc <__NVIC_SetPriorityGrouping>
}
 8003a64:	bf00      	nop
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a7e:	f7ff ff61 	bl	8003944 <__NVIC_GetPriorityGrouping>
 8003a82:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	6978      	ldr	r0, [r7, #20]
 8003a8a:	f7ff ffb1 	bl	80039f0 <NVIC_EncodePriority>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a94:	4611      	mov	r1, r2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff ff80 	bl	800399c <__NVIC_SetPriority>
}
 8003a9c:	bf00      	nop
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff ff54 	bl	8003960 <__NVIC_EnableIRQ>
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e098      	b.n	8003c04 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	4b4d      	ldr	r3, [pc, #308]	@ (8003c10 <HAL_DMA_Init+0x150>)
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d80f      	bhi.n	8003afe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	4b4b      	ldr	r3, [pc, #300]	@ (8003c14 <HAL_DMA_Init+0x154>)
 8003ae6:	4413      	add	r3, r2
 8003ae8:	4a4b      	ldr	r2, [pc, #300]	@ (8003c18 <HAL_DMA_Init+0x158>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	091b      	lsrs	r3, r3, #4
 8003af0:	009a      	lsls	r2, r3, #2
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a48      	ldr	r2, [pc, #288]	@ (8003c1c <HAL_DMA_Init+0x15c>)
 8003afa:	641a      	str	r2, [r3, #64]	@ 0x40
 8003afc:	e00e      	b.n	8003b1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	4b46      	ldr	r3, [pc, #280]	@ (8003c20 <HAL_DMA_Init+0x160>)
 8003b06:	4413      	add	r3, r2
 8003b08:	4a43      	ldr	r2, [pc, #268]	@ (8003c18 <HAL_DMA_Init+0x158>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	091b      	lsrs	r3, r3, #4
 8003b10:	009a      	lsls	r2, r3, #2
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a42      	ldr	r2, [pc, #264]	@ (8003c24 <HAL_DMA_Init+0x164>)
 8003b1a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b76:	d039      	beq.n	8003bec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7c:	4a27      	ldr	r2, [pc, #156]	@ (8003c1c <HAL_DMA_Init+0x15c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d11a      	bne.n	8003bb8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b82:	4b29      	ldr	r3, [pc, #164]	@ (8003c28 <HAL_DMA_Init+0x168>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8a:	f003 031c 	and.w	r3, r3, #28
 8003b8e:	210f      	movs	r1, #15
 8003b90:	fa01 f303 	lsl.w	r3, r1, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	4924      	ldr	r1, [pc, #144]	@ (8003c28 <HAL_DMA_Init+0x168>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b9c:	4b22      	ldr	r3, [pc, #136]	@ (8003c28 <HAL_DMA_Init+0x168>)
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6859      	ldr	r1, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba8:	f003 031c 	and.w	r3, r3, #28
 8003bac:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb0:	491d      	ldr	r1, [pc, #116]	@ (8003c28 <HAL_DMA_Init+0x168>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	600b      	str	r3, [r1, #0]
 8003bb6:	e019      	b.n	8003bec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8003c2c <HAL_DMA_Init+0x16c>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc0:	f003 031c 	and.w	r3, r3, #28
 8003bc4:	210f      	movs	r1, #15
 8003bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	4917      	ldr	r1, [pc, #92]	@ (8003c2c <HAL_DMA_Init+0x16c>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003bd2:	4b16      	ldr	r3, [pc, #88]	@ (8003c2c <HAL_DMA_Init+0x16c>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6859      	ldr	r1, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bde:	f003 031c 	and.w	r3, r3, #28
 8003be2:	fa01 f303 	lsl.w	r3, r1, r3
 8003be6:	4911      	ldr	r1, [pc, #68]	@ (8003c2c <HAL_DMA_Init+0x16c>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	40020407 	.word	0x40020407
 8003c14:	bffdfff8 	.word	0xbffdfff8
 8003c18:	cccccccd 	.word	0xcccccccd
 8003c1c:	40020000 	.word	0x40020000
 8003c20:	bffdfbf8 	.word	0xbffdfbf8
 8003c24:	40020400 	.word	0x40020400
 8003c28:	400200a8 	.word	0x400200a8
 8003c2c:	400204a8 	.word	0x400204a8

08003c30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_DMA_Start_IT+0x20>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e04b      	b.n	8003ce8 <HAL_DMA_Start_IT+0xb8>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d13a      	bne.n	8003cda <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0201 	bic.w	r2, r2, #1
 8003c80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	68b9      	ldr	r1, [r7, #8]
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f95f 	bl	8003f4c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 020e 	orr.w	r2, r2, #14
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	e00f      	b.n	8003cc8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0204 	bic.w	r2, r2, #4
 8003cb6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 020a 	orr.w	r2, r2, #10
 8003cc6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	e005      	b.n	8003ce6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d008      	beq.n	8003d1a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e022      	b.n	8003d60 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 020e 	bic.w	r2, r2, #14
 8003d28:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0201 	bic.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3e:	f003 021c 	and.w	r2, r3, #28
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	2101      	movs	r1, #1
 8003d48:	fa01 f202 	lsl.w	r2, r1, r2
 8003d4c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d005      	beq.n	8003d90 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2204      	movs	r2, #4
 8003d88:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	73fb      	strb	r3, [r7, #15]
 8003d8e:	e029      	b.n	8003de4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 020e 	bic.w	r2, r2, #14
 8003d9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0201 	bic.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db4:	f003 021c 	and.w	r2, r3, #28
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	4798      	blx	r3
    }
  }
  return status;
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0a:	f003 031c 	and.w	r3, r3, #28
 8003e0e:	2204      	movs	r2, #4
 8003e10:	409a      	lsls	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d026      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x7a>
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d021      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d107      	bne.n	8003e42 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0204 	bic.w	r2, r2, #4
 8003e40:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e46:	f003 021c 	and.w	r2, r3, #28
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	2104      	movs	r1, #4
 8003e50:	fa01 f202 	lsl.w	r2, r1, r2
 8003e54:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d071      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003e66:	e06c      	b.n	8003f42 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6c:	f003 031c 	and.w	r3, r3, #28
 8003e70:	2202      	movs	r2, #2
 8003e72:	409a      	lsls	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4013      	ands	r3, r2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d02e      	beq.n	8003eda <HAL_DMA_IRQHandler+0xec>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d029      	beq.n	8003eda <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10b      	bne.n	8003eac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 020a 	bic.w	r2, r2, #10
 8003ea2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb0:	f003 021c 	and.w	r2, r3, #28
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb8:	2102      	movs	r1, #2
 8003eba:	fa01 f202 	lsl.w	r2, r1, r2
 8003ebe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d038      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ed8:	e033      	b.n	8003f42 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ede:	f003 031c 	and.w	r3, r3, #28
 8003ee2:	2208      	movs	r2, #8
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02a      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x156>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d025      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 020e 	bic.w	r2, r2, #14
 8003f06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0c:	f003 021c 	and.w	r2, r3, #28
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f14:	2101      	movs	r1, #1
 8003f16:	fa01 f202 	lsl.w	r2, r1, r2
 8003f1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d004      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f42:	bf00      	nop
 8003f44:	bf00      	nop
}
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5e:	f003 021c 	and.w	r2, r3, #28
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	2101      	movs	r1, #1
 8003f68:	fa01 f202 	lsl.w	r2, r1, r2
 8003f6c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b10      	cmp	r3, #16
 8003f7c:	d108      	bne.n	8003f90 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f8e:	e007      	b.n	8003fa0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	60da      	str	r2, [r3, #12]
}
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fba:	e148      	b.n	800424e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc8:	4013      	ands	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 813a 	beq.w	8004248 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 0303 	and.w	r3, r3, #3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d005      	beq.n	8003fec <HAL_GPIO_Init+0x40>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d130      	bne.n	800404e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4013      	ands	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004022:	2201      	movs	r2, #1
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43db      	mvns	r3, r3
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4013      	ands	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	091b      	lsrs	r3, r3, #4
 8004038:	f003 0201 	and.w	r2, r3, #1
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	2b03      	cmp	r3, #3
 8004058:	d017      	beq.n	800408a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	2203      	movs	r2, #3
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	43db      	mvns	r3, r3
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4013      	ands	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d123      	bne.n	80040de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	08da      	lsrs	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3208      	adds	r2, #8
 800409e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	220f      	movs	r2, #15
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	43db      	mvns	r3, r3
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4013      	ands	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	691a      	ldr	r2, [r3, #16]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	08da      	lsrs	r2, r3, #3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3208      	adds	r2, #8
 80040d8:	6939      	ldr	r1, [r7, #16]
 80040da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	2203      	movs	r2, #3
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4013      	ands	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f003 0203 	and.w	r2, r3, #3
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 8094 	beq.w	8004248 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004120:	4b52      	ldr	r3, [pc, #328]	@ (800426c <HAL_GPIO_Init+0x2c0>)
 8004122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004124:	4a51      	ldr	r2, [pc, #324]	@ (800426c <HAL_GPIO_Init+0x2c0>)
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	6613      	str	r3, [r2, #96]	@ 0x60
 800412c:	4b4f      	ldr	r3, [pc, #316]	@ (800426c <HAL_GPIO_Init+0x2c0>)
 800412e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004138:	4a4d      	ldr	r2, [pc, #308]	@ (8004270 <HAL_GPIO_Init+0x2c4>)
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	089b      	lsrs	r3, r3, #2
 800413e:	3302      	adds	r3, #2
 8004140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004144:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f003 0303 	and.w	r3, r3, #3
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	220f      	movs	r2, #15
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	43db      	mvns	r3, r3
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4013      	ands	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004162:	d00d      	beq.n	8004180 <HAL_GPIO_Init+0x1d4>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a43      	ldr	r2, [pc, #268]	@ (8004274 <HAL_GPIO_Init+0x2c8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d007      	beq.n	800417c <HAL_GPIO_Init+0x1d0>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a42      	ldr	r2, [pc, #264]	@ (8004278 <HAL_GPIO_Init+0x2cc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d101      	bne.n	8004178 <HAL_GPIO_Init+0x1cc>
 8004174:	2302      	movs	r3, #2
 8004176:	e004      	b.n	8004182 <HAL_GPIO_Init+0x1d6>
 8004178:	2307      	movs	r3, #7
 800417a:	e002      	b.n	8004182 <HAL_GPIO_Init+0x1d6>
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <HAL_GPIO_Init+0x1d6>
 8004180:	2300      	movs	r3, #0
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	f002 0203 	and.w	r2, r2, #3
 8004188:	0092      	lsls	r2, r2, #2
 800418a:	4093      	lsls	r3, r2
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4313      	orrs	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004192:	4937      	ldr	r1, [pc, #220]	@ (8004270 <HAL_GPIO_Init+0x2c4>)
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	089b      	lsrs	r3, r3, #2
 8004198:	3302      	adds	r3, #2
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041a0:	4b36      	ldr	r3, [pc, #216]	@ (800427c <HAL_GPIO_Init+0x2d0>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	43db      	mvns	r3, r3
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4013      	ands	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041c4:	4a2d      	ldr	r2, [pc, #180]	@ (800427c <HAL_GPIO_Init+0x2d0>)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041ca:	4b2c      	ldr	r3, [pc, #176]	@ (800427c <HAL_GPIO_Init+0x2d0>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	43db      	mvns	r3, r3
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4013      	ands	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041ee:	4a23      	ldr	r2, [pc, #140]	@ (800427c <HAL_GPIO_Init+0x2d0>)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80041f4:	4b21      	ldr	r3, [pc, #132]	@ (800427c <HAL_GPIO_Init+0x2d0>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	43db      	mvns	r3, r3
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4013      	ands	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004218:	4a18      	ldr	r2, [pc, #96]	@ (800427c <HAL_GPIO_Init+0x2d0>)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800421e:	4b17      	ldr	r3, [pc, #92]	@ (800427c <HAL_GPIO_Init+0x2d0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	43db      	mvns	r3, r3
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	4013      	ands	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004242:	4a0e      	ldr	r2, [pc, #56]	@ (800427c <HAL_GPIO_Init+0x2d0>)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	3301      	adds	r3, #1
 800424c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	fa22 f303 	lsr.w	r3, r2, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	f47f aeaf 	bne.w	8003fbc <HAL_GPIO_Init+0x10>
  }
}
 800425e:	bf00      	nop
 8004260:	bf00      	nop
 8004262:	371c      	adds	r7, #28
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	40021000 	.word	0x40021000
 8004270:	40010000 	.word	0x40010000
 8004274:	48000400 	.word	0x48000400
 8004278:	48000800 	.word	0x48000800
 800427c:	40010400 	.word	0x40010400

08004280 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	887b      	ldrh	r3, [r7, #2]
 8004292:	4013      	ands	r3, r2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004298:	2301      	movs	r3, #1
 800429a:	73fb      	strb	r3, [r7, #15]
 800429c:	e001      	b.n	80042a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800429e:	2300      	movs	r3, #0
 80042a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	807b      	strh	r3, [r7, #2]
 80042bc:	4613      	mov	r3, r2
 80042be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042c0:	787b      	ldrb	r3, [r7, #1]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042c6:	887a      	ldrh	r2, [r7, #2]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042cc:	e002      	b.n	80042d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042ce:	887a      	ldrh	r2, [r7, #2]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e08d      	b.n	800440e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fe f936 	bl	8002578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2224      	movs	r2, #36	@ 0x24
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0201 	bic.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004330:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004340:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d107      	bne.n	800435a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004356:	609a      	str	r2, [r3, #8]
 8004358:	e006      	b.n	8004368 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004366:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d108      	bne.n	8004382 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800437e:	605a      	str	r2, [r3, #4]
 8004380:	e007      	b.n	8004392 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004390:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80043a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69d9      	ldr	r1, [r3, #28]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1a      	ldr	r2, [r3, #32]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	607a      	str	r2, [r7, #4]
 8004422:	461a      	mov	r2, r3
 8004424:	460b      	mov	r3, r1
 8004426:	817b      	strh	r3, [r7, #10]
 8004428:	4613      	mov	r3, r2
 800442a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b20      	cmp	r3, #32
 8004436:	f040 80fd 	bne.w	8004634 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_I2C_Master_Transmit+0x30>
 8004444:	2302      	movs	r3, #2
 8004446:	e0f6      	b.n	8004636 <HAL_I2C_Master_Transmit+0x21e>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004450:	f7ff f858 	bl	8003504 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	2319      	movs	r3, #25
 800445c:	2201      	movs	r2, #1
 800445e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 fce0 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e0e1      	b.n	8004636 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2221      	movs	r2, #33	@ 0x21
 8004476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2210      	movs	r2, #16
 800447e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	893a      	ldrh	r2, [r7, #8]
 8004492:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2bff      	cmp	r3, #255	@ 0xff
 80044a2:	d906      	bls.n	80044b2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	22ff      	movs	r2, #255	@ 0xff
 80044a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80044aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	e007      	b.n	80044c2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80044bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044c0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d024      	beq.n	8004514 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ce:	781a      	ldrb	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	3301      	adds	r3, #1
 8004502:	b2da      	uxtb	r2, r3
 8004504:	8979      	ldrh	r1, [r7, #10]
 8004506:	4b4e      	ldr	r3, [pc, #312]	@ (8004640 <HAL_I2C_Master_Transmit+0x228>)
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 fedb 	bl	80052c8 <I2C_TransferConfig>
 8004512:	e066      	b.n	80045e2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004518:	b2da      	uxtb	r2, r3
 800451a:	8979      	ldrh	r1, [r7, #10]
 800451c:	4b48      	ldr	r3, [pc, #288]	@ (8004640 <HAL_I2C_Master_Transmit+0x228>)
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fed0 	bl	80052c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004528:	e05b      	b.n	80045e2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	6a39      	ldr	r1, [r7, #32]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 fcd3 	bl	8004eda <I2C_WaitOnTXISFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e07b      	b.n	8004636 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004542:	781a      	ldrb	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d034      	beq.n	80045e2 <HAL_I2C_Master_Transmit+0x1ca>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800457c:	2b00      	cmp	r3, #0
 800457e:	d130      	bne.n	80045e2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	2200      	movs	r2, #0
 8004588:	2180      	movs	r1, #128	@ 0x80
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 fc4c 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e04d      	b.n	8004636 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2bff      	cmp	r3, #255	@ 0xff
 80045a2:	d90e      	bls.n	80045c2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	22ff      	movs	r2, #255	@ 0xff
 80045a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	8979      	ldrh	r1, [r7, #10]
 80045b2:	2300      	movs	r3, #0
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 fe84 	bl	80052c8 <I2C_TransferConfig>
 80045c0:	e00f      	b.n	80045e2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	8979      	ldrh	r1, [r7, #10]
 80045d4:	2300      	movs	r3, #0
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 fe73 	bl	80052c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d19e      	bne.n	800452a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	6a39      	ldr	r1, [r7, #32]
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 fcb9 	bl	8004f68 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e01a      	b.n	8004636 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2220      	movs	r2, #32
 8004606:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6859      	ldr	r1, [r3, #4]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	4b0c      	ldr	r3, [pc, #48]	@ (8004644 <HAL_I2C_Master_Transmit+0x22c>)
 8004614:	400b      	ands	r3, r1
 8004616:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	e000      	b.n	8004636 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004634:	2302      	movs	r3, #2
  }
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	80002000 	.word	0x80002000
 8004644:	fe00e800 	.word	0xfe00e800

08004648 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af02      	add	r7, sp, #8
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	607a      	str	r2, [r7, #4]
 8004652:	461a      	mov	r2, r3
 8004654:	460b      	mov	r3, r1
 8004656:	817b      	strh	r3, [r7, #10]
 8004658:	4613      	mov	r3, r2
 800465a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b20      	cmp	r3, #32
 8004666:	f040 80db 	bne.w	8004820 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_I2C_Master_Receive+0x30>
 8004674:	2302      	movs	r3, #2
 8004676:	e0d4      	b.n	8004822 <HAL_I2C_Master_Receive+0x1da>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004680:	f7fe ff40 	bl	8003504 <HAL_GetTick>
 8004684:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	2319      	movs	r3, #25
 800468c:	2201      	movs	r2, #1
 800468e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 fbc8 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e0bf      	b.n	8004822 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2222      	movs	r2, #34	@ 0x22
 80046a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2210      	movs	r2, #16
 80046ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	893a      	ldrh	r2, [r7, #8]
 80046c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2bff      	cmp	r3, #255	@ 0xff
 80046d2:	d90e      	bls.n	80046f2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	8979      	ldrh	r1, [r7, #10]
 80046e2:	4b52      	ldr	r3, [pc, #328]	@ (800482c <HAL_I2C_Master_Receive+0x1e4>)
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 fdec 	bl	80052c8 <I2C_TransferConfig>
 80046f0:	e06d      	b.n	80047ce <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004700:	b2da      	uxtb	r2, r3
 8004702:	8979      	ldrh	r1, [r7, #10]
 8004704:	4b49      	ldr	r3, [pc, #292]	@ (800482c <HAL_I2C_Master_Receive+0x1e4>)
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 fddb 	bl	80052c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004712:	e05c      	b.n	80047ce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	6a39      	ldr	r1, [r7, #32]
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 fc69 	bl	8004ff0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e07c      	b.n	8004822 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800475e:	b29b      	uxth	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d034      	beq.n	80047ce <HAL_I2C_Master_Receive+0x186>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004768:	2b00      	cmp	r3, #0
 800476a:	d130      	bne.n	80047ce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	2200      	movs	r2, #0
 8004774:	2180      	movs	r1, #128	@ 0x80
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 fb56 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e04d      	b.n	8004822 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800478a:	b29b      	uxth	r3, r3
 800478c:	2bff      	cmp	r3, #255	@ 0xff
 800478e:	d90e      	bls.n	80047ae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	22ff      	movs	r2, #255	@ 0xff
 8004794:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800479a:	b2da      	uxtb	r2, r3
 800479c:	8979      	ldrh	r1, [r7, #10]
 800479e:	2300      	movs	r3, #0
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fd8e 	bl	80052c8 <I2C_TransferConfig>
 80047ac:	e00f      	b.n	80047ce <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	8979      	ldrh	r1, [r7, #10]
 80047c0:	2300      	movs	r3, #0
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 fd7d 	bl	80052c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d19d      	bne.n	8004714 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	6a39      	ldr	r1, [r7, #32]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 fbc3 	bl	8004f68 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e01a      	b.n	8004822 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2220      	movs	r2, #32
 80047f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6859      	ldr	r1, [r3, #4]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004830 <HAL_I2C_Master_Receive+0x1e8>)
 8004800:	400b      	ands	r3, r1
 8004802:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	e000      	b.n	8004822 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004820:	2302      	movs	r3, #2
  }
}
 8004822:	4618      	mov	r0, r3
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	80002400 	.word	0x80002400
 8004830:	fe00e800 	.word	0xfe00e800

08004834 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	4608      	mov	r0, r1
 800483e:	4611      	mov	r1, r2
 8004840:	461a      	mov	r2, r3
 8004842:	4603      	mov	r3, r0
 8004844:	817b      	strh	r3, [r7, #10]
 8004846:	460b      	mov	r3, r1
 8004848:	813b      	strh	r3, [r7, #8]
 800484a:	4613      	mov	r3, r2
 800484c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b20      	cmp	r3, #32
 8004858:	f040 80f9 	bne.w	8004a4e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <HAL_I2C_Mem_Write+0x34>
 8004862:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004864:	2b00      	cmp	r3, #0
 8004866:	d105      	bne.n	8004874 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800486e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e0ed      	b.n	8004a50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <HAL_I2C_Mem_Write+0x4e>
 800487e:	2302      	movs	r3, #2
 8004880:	e0e6      	b.n	8004a50 <HAL_I2C_Mem_Write+0x21c>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800488a:	f7fe fe3b 	bl	8003504 <HAL_GetTick>
 800488e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	2319      	movs	r3, #25
 8004896:	2201      	movs	r2, #1
 8004898:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 fac3 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0d1      	b.n	8004a50 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2221      	movs	r2, #33	@ 0x21
 80048b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2240      	movs	r2, #64	@ 0x40
 80048b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a3a      	ldr	r2, [r7, #32]
 80048c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80048cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048d4:	88f8      	ldrh	r0, [r7, #6]
 80048d6:	893a      	ldrh	r2, [r7, #8]
 80048d8:	8979      	ldrh	r1, [r7, #10]
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	9301      	str	r3, [sp, #4]
 80048de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	4603      	mov	r3, r0
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f9d3 	bl	8004c90 <I2C_RequestMemoryWrite>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e0a9      	b.n	8004a50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004900:	b29b      	uxth	r3, r3
 8004902:	2bff      	cmp	r3, #255	@ 0xff
 8004904:	d90e      	bls.n	8004924 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	22ff      	movs	r2, #255	@ 0xff
 800490a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004910:	b2da      	uxtb	r2, r3
 8004912:	8979      	ldrh	r1, [r7, #10]
 8004914:	2300      	movs	r3, #0
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 fcd3 	bl	80052c8 <I2C_TransferConfig>
 8004922:	e00f      	b.n	8004944 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004932:	b2da      	uxtb	r2, r3
 8004934:	8979      	ldrh	r1, [r7, #10]
 8004936:	2300      	movs	r3, #0
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fcc2 	bl	80052c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 fac6 	bl	8004eda <I2C_WaitOnTXISFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e07b      	b.n	8004a50 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	781a      	ldrb	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d034      	beq.n	80049fc <HAL_I2C_Mem_Write+0x1c8>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004996:	2b00      	cmp	r3, #0
 8004998:	d130      	bne.n	80049fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a0:	2200      	movs	r2, #0
 80049a2:	2180      	movs	r1, #128	@ 0x80
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 fa3f 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e04d      	b.n	8004a50 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2bff      	cmp	r3, #255	@ 0xff
 80049bc:	d90e      	bls.n	80049dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	22ff      	movs	r2, #255	@ 0xff
 80049c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	8979      	ldrh	r1, [r7, #10]
 80049cc:	2300      	movs	r3, #0
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 fc77 	bl	80052c8 <I2C_TransferConfig>
 80049da:	e00f      	b.n	80049fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	8979      	ldrh	r1, [r7, #10]
 80049ee:	2300      	movs	r3, #0
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fc66 	bl	80052c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d19e      	bne.n	8004944 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 faac 	bl	8004f68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e01a      	b.n	8004a50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6859      	ldr	r1, [r3, #4]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a58 <HAL_I2C_Mem_Write+0x224>)
 8004a2e:	400b      	ands	r3, r1
 8004a30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e000      	b.n	8004a50 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004a4e:	2302      	movs	r3, #2
  }
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	fe00e800 	.word	0xfe00e800

08004a5c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	4608      	mov	r0, r1
 8004a66:	4611      	mov	r1, r2
 8004a68:	461a      	mov	r2, r3
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	817b      	strh	r3, [r7, #10]
 8004a6e:	460b      	mov	r3, r1
 8004a70:	813b      	strh	r3, [r7, #8]
 8004a72:	4613      	mov	r3, r2
 8004a74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b20      	cmp	r3, #32
 8004a80:	f040 80fd 	bne.w	8004c7e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <HAL_I2C_Mem_Read+0x34>
 8004a8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d105      	bne.n	8004a9c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a96:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e0f1      	b.n	8004c80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_I2C_Mem_Read+0x4e>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e0ea      	b.n	8004c80 <HAL_I2C_Mem_Read+0x224>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ab2:	f7fe fd27 	bl	8003504 <HAL_GetTick>
 8004ab6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	2319      	movs	r3, #25
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 f9af 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0d5      	b.n	8004c80 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2222      	movs	r2, #34	@ 0x22
 8004ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2240      	movs	r2, #64	@ 0x40
 8004ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a3a      	ldr	r2, [r7, #32]
 8004aee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004af4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004afc:	88f8      	ldrh	r0, [r7, #6]
 8004afe:	893a      	ldrh	r2, [r7, #8]
 8004b00:	8979      	ldrh	r1, [r7, #10]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	9301      	str	r3, [sp, #4]
 8004b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f913 	bl	8004d38 <I2C_RequestMemoryRead>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0ad      	b.n	8004c80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2bff      	cmp	r3, #255	@ 0xff
 8004b2c:	d90e      	bls.n	8004b4c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2201      	movs	r2, #1
 8004b32:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	8979      	ldrh	r1, [r7, #10]
 8004b3c:	4b52      	ldr	r3, [pc, #328]	@ (8004c88 <HAL_I2C_Mem_Read+0x22c>)
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 fbbf 	bl	80052c8 <I2C_TransferConfig>
 8004b4a:	e00f      	b.n	8004b6c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	8979      	ldrh	r1, [r7, #10]
 8004b5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c88 <HAL_I2C_Mem_Read+0x22c>)
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 fbae 	bl	80052c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b72:	2200      	movs	r2, #0
 8004b74:	2104      	movs	r1, #4
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 f956 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e07c      	b.n	8004c80 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d034      	beq.n	8004c2c <HAL_I2C_Mem_Read+0x1d0>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d130      	bne.n	8004c2c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2180      	movs	r1, #128	@ 0x80
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 f927 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e04d      	b.n	8004c80 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2bff      	cmp	r3, #255	@ 0xff
 8004bec:	d90e      	bls.n	8004c0c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	8979      	ldrh	r1, [r7, #10]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 fb5f 	bl	80052c8 <I2C_TransferConfig>
 8004c0a:	e00f      	b.n	8004c2c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	8979      	ldrh	r1, [r7, #10]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 fb4e 	bl	80052c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d19a      	bne.n	8004b6c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 f994 	bl	8004f68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e01a      	b.n	8004c80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6859      	ldr	r1, [r3, #4]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c8c <HAL_I2C_Mem_Read+0x230>)
 8004c5e:	400b      	ands	r3, r1
 8004c60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e000      	b.n	8004c80 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004c7e:	2302      	movs	r3, #2
  }
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	80002400 	.word	0x80002400
 8004c8c:	fe00e800 	.word	0xfe00e800

08004c90 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	4608      	mov	r0, r1
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	817b      	strh	r3, [r7, #10]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	813b      	strh	r3, [r7, #8]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004caa:	88fb      	ldrh	r3, [r7, #6]
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	8979      	ldrh	r1, [r7, #10]
 8004cb0:	4b20      	ldr	r3, [pc, #128]	@ (8004d34 <I2C_RequestMemoryWrite+0xa4>)
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 fb05 	bl	80052c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cbe:	69fa      	ldr	r2, [r7, #28]
 8004cc0:	69b9      	ldr	r1, [r7, #24]
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 f909 	bl	8004eda <I2C_WaitOnTXISFlagUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e02c      	b.n	8004d2c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d105      	bne.n	8004ce4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cd8:	893b      	ldrh	r3, [r7, #8]
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ce2:	e015      	b.n	8004d10 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ce4:	893b      	ldrh	r3, [r7, #8]
 8004ce6:	0a1b      	lsrs	r3, r3, #8
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	69b9      	ldr	r1, [r7, #24]
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f8ef 	bl	8004eda <I2C_WaitOnTXISFlagUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e012      	b.n	8004d2c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d06:	893b      	ldrh	r3, [r7, #8]
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	2200      	movs	r2, #0
 8004d18:	2180      	movs	r1, #128	@ 0x80
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 f884 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	80002000 	.word	0x80002000

08004d38 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	4608      	mov	r0, r1
 8004d42:	4611      	mov	r1, r2
 8004d44:	461a      	mov	r2, r3
 8004d46:	4603      	mov	r3, r0
 8004d48:	817b      	strh	r3, [r7, #10]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	813b      	strh	r3, [r7, #8]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004d52:	88fb      	ldrh	r3, [r7, #6]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	8979      	ldrh	r1, [r7, #10]
 8004d58:	4b20      	ldr	r3, [pc, #128]	@ (8004ddc <I2C_RequestMemoryRead+0xa4>)
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 fab2 	bl	80052c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d64:	69fa      	ldr	r2, [r7, #28]
 8004d66:	69b9      	ldr	r1, [r7, #24]
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 f8b6 	bl	8004eda <I2C_WaitOnTXISFlagUntilTimeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e02c      	b.n	8004dd2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d78:	88fb      	ldrh	r3, [r7, #6]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d105      	bne.n	8004d8a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d7e:	893b      	ldrh	r3, [r7, #8]
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d88:	e015      	b.n	8004db6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d8a:	893b      	ldrh	r3, [r7, #8]
 8004d8c:	0a1b      	lsrs	r3, r3, #8
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	69b9      	ldr	r1, [r7, #24]
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 f89c 	bl	8004eda <I2C_WaitOnTXISFlagUntilTimeout>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e012      	b.n	8004dd2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004dac:	893b      	ldrh	r3, [r7, #8]
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2140      	movs	r1, #64	@ 0x40
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f831 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	80002000 	.word	0x80002000

08004de0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d103      	bne.n	8004dfe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d007      	beq.n	8004e1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	619a      	str	r2, [r3, #24]
  }
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	4613      	mov	r3, r2
 8004e36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e38:	e03b      	b.n	8004eb2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	6839      	ldr	r1, [r7, #0]
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 f962 	bl	8005108 <I2C_IsErrorOccurred>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e041      	b.n	8004ed2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e54:	d02d      	beq.n	8004eb2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e56:	f7fe fb55 	bl	8003504 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d302      	bcc.n	8004e6c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d122      	bne.n	8004eb2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	4013      	ands	r3, r2
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	bf0c      	ite	eq
 8004e7c:	2301      	moveq	r3, #1
 8004e7e:	2300      	movne	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	461a      	mov	r2, r3
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d113      	bne.n	8004eb2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8e:	f043 0220 	orr.w	r2, r3, #32
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e00f      	b.n	8004ed2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	699a      	ldr	r2, [r3, #24]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	bf0c      	ite	eq
 8004ec2:	2301      	moveq	r3, #1
 8004ec4:	2300      	movne	r3, #0
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	79fb      	ldrb	r3, [r7, #7]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d0b4      	beq.n	8004e3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b084      	sub	sp, #16
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ee6:	e033      	b.n	8004f50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	68b9      	ldr	r1, [r7, #8]
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 f90b 	bl	8005108 <I2C_IsErrorOccurred>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e031      	b.n	8004f60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f02:	d025      	beq.n	8004f50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f04:	f7fe fafe 	bl	8003504 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d302      	bcc.n	8004f1a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d11a      	bne.n	8004f50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d013      	beq.n	8004f50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2c:	f043 0220 	orr.w	r2, r3, #32
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e007      	b.n	8004f60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d1c4      	bne.n	8004ee8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f74:	e02f      	b.n	8004fd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 f8c4 	bl	8005108 <I2C_IsErrorOccurred>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e02d      	b.n	8004fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f8a:	f7fe fabb 	bl	8003504 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d302      	bcc.n	8004fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d11a      	bne.n	8004fd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	f003 0320 	and.w	r3, r3, #32
 8004faa:	2b20      	cmp	r3, #32
 8004fac:	d013      	beq.n	8004fd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb2:	f043 0220 	orr.w	r2, r3, #32
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e007      	b.n	8004fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	f003 0320 	and.w	r3, r3, #32
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d1c8      	bne.n	8004f76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005000:	e071      	b.n	80050e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	68b9      	ldr	r1, [r7, #8]
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 f87e 	bl	8005108 <I2C_IsErrorOccurred>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b20      	cmp	r3, #32
 8005022:	d13b      	bne.n	800509c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005024:	7dfb      	ldrb	r3, [r7, #23]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d138      	bne.n	800509c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b04      	cmp	r3, #4
 8005036:	d105      	bne.n	8005044 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005040:	2300      	movs	r3, #0
 8005042:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	f003 0310 	and.w	r3, r3, #16
 800504e:	2b10      	cmp	r3, #16
 8005050:	d121      	bne.n	8005096 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2210      	movs	r2, #16
 8005058:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2204      	movs	r2, #4
 800505e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2220      	movs	r2, #32
 8005066:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6859      	ldr	r1, [r3, #4]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	4b24      	ldr	r3, [pc, #144]	@ (8005104 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005074:	400b      	ands	r3, r1
 8005076:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	75fb      	strb	r3, [r7, #23]
 8005094:	e002      	b.n	800509c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800509c:	f7fe fa32 	bl	8003504 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d302      	bcc.n	80050b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d119      	bne.n	80050e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80050b2:	7dfb      	ldrb	r3, [r7, #23]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d116      	bne.n	80050e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d00f      	beq.n	80050e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ca:	f043 0220 	orr.w	r2, r3, #32
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d002      	beq.n	80050fa <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80050f4:	7dfb      	ldrb	r3, [r7, #23]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d083      	beq.n	8005002 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	fe00e800 	.word	0xfe00e800

08005108 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	@ 0x28
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005114:	2300      	movs	r3, #0
 8005116:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	2b00      	cmp	r3, #0
 8005132:	d068      	beq.n	8005206 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2210      	movs	r2, #16
 800513a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800513c:	e049      	b.n	80051d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005144:	d045      	beq.n	80051d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005146:	f7fe f9dd 	bl	8003504 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	429a      	cmp	r2, r3
 8005154:	d302      	bcc.n	800515c <I2C_IsErrorOccurred+0x54>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d13a      	bne.n	80051d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005166:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800516e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800517a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800517e:	d121      	bne.n	80051c4 <I2C_IsErrorOccurred+0xbc>
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005186:	d01d      	beq.n	80051c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005188:	7cfb      	ldrb	r3, [r7, #19]
 800518a:	2b20      	cmp	r3, #32
 800518c:	d01a      	beq.n	80051c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800519c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800519e:	f7fe f9b1 	bl	8003504 <HAL_GetTick>
 80051a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051a4:	e00e      	b.n	80051c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80051a6:	f7fe f9ad 	bl	8003504 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b19      	cmp	r3, #25
 80051b2:	d907      	bls.n	80051c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	f043 0320 	orr.w	r3, r3, #32
 80051ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80051c2:	e006      	b.n	80051d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d1e9      	bne.n	80051a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b20      	cmp	r3, #32
 80051de:	d003      	beq.n	80051e8 <I2C_IsErrorOccurred+0xe0>
 80051e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0aa      	beq.n	800513e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80051e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d103      	bne.n	80051f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2220      	movs	r2, #32
 80051f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	f043 0304 	orr.w	r3, r3, #4
 80051fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00b      	beq.n	8005230 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	f043 0301 	orr.w	r3, r3, #1
 800521e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005228:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00b      	beq.n	8005252 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	f043 0308 	orr.w	r3, r3, #8
 8005240:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800524a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00b      	beq.n	8005274 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	f043 0302 	orr.w	r3, r3, #2
 8005262:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800526c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005274:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01c      	beq.n	80052b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f7ff fdaf 	bl	8004de0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6859      	ldr	r1, [r3, #4]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <I2C_IsErrorOccurred+0x1bc>)
 800528e:	400b      	ands	r3, r1
 8005290:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	431a      	orrs	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80052b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3728      	adds	r7, #40	@ 0x28
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	fe00e800 	.word	0xfe00e800

080052c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	607b      	str	r3, [r7, #4]
 80052d2:	460b      	mov	r3, r1
 80052d4:	817b      	strh	r3, [r7, #10]
 80052d6:	4613      	mov	r3, r2
 80052d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052da:	897b      	ldrh	r3, [r7, #10]
 80052dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052e0:	7a7b      	ldrb	r3, [r7, #9]
 80052e2:	041b      	lsls	r3, r3, #16
 80052e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	0d5b      	lsrs	r3, r3, #21
 8005302:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005306:	4b08      	ldr	r3, [pc, #32]	@ (8005328 <I2C_TransferConfig+0x60>)
 8005308:	430b      	orrs	r3, r1
 800530a:	43db      	mvns	r3, r3
 800530c:	ea02 0103 	and.w	r1, r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800531a:	bf00      	nop
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	03ff63ff 	.word	0x03ff63ff

0800532c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b20      	cmp	r3, #32
 8005340:	d138      	bne.n	80053b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800534c:	2302      	movs	r3, #2
 800534e:	e032      	b.n	80053b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2224      	movs	r2, #36	@ 0x24
 800535c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0201 	bic.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800537e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6819      	ldr	r1, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0201 	orr.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	e000      	b.n	80053b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053b4:	2302      	movs	r3, #2
  }
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	d139      	bne.n	800544c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e033      	b.n	800544e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2224      	movs	r2, #36	@ 0x24
 80053f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0201 	bic.w	r2, r2, #1
 8005404:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005414:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	021b      	lsls	r3, r3, #8
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4313      	orrs	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0201 	orr.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	e000      	b.n	800544e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800544c:	2302      	movs	r3, #2
  }
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005460:	4b04      	ldr	r3, [pc, #16]	@ (8005474 <HAL_PWREx_GetVoltageRange+0x18>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005468:	4618      	mov	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40007000 	.word	0x40007000

08005478 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005486:	d130      	bne.n	80054ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005488:	4b23      	ldr	r3, [pc, #140]	@ (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005494:	d038      	beq.n	8005508 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005496:	4b20      	ldr	r3, [pc, #128]	@ (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800549e:	4a1e      	ldr	r2, [pc, #120]	@ (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054a6:	4b1d      	ldr	r3, [pc, #116]	@ (800551c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2232      	movs	r2, #50	@ 0x32
 80054ac:	fb02 f303 	mul.w	r3, r2, r3
 80054b0:	4a1b      	ldr	r2, [pc, #108]	@ (8005520 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	0c9b      	lsrs	r3, r3, #18
 80054b8:	3301      	adds	r3, #1
 80054ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054bc:	e002      	b.n	80054c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054c4:	4b14      	ldr	r3, [pc, #80]	@ (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054d0:	d102      	bne.n	80054d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1f2      	bne.n	80054be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054e4:	d110      	bne.n	8005508 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e00f      	b.n	800550a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80054ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80054f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054f6:	d007      	beq.n	8005508 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80054f8:	4b07      	ldr	r3, [pc, #28]	@ (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005500:	4a05      	ldr	r2, [pc, #20]	@ (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005502:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005506:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40007000 	.word	0x40007000
 800551c:	20000000 	.word	0x20000000
 8005520:	431bde83 	.word	0x431bde83

08005524 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d102      	bne.n	8005538 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	f000 bc02 	b.w	8005d3c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005538:	4b96      	ldr	r3, [pc, #600]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f003 030c 	and.w	r3, r3, #12
 8005540:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005542:	4b94      	ldr	r3, [pc, #592]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 80e4 	beq.w	8005722 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d007      	beq.n	8005570 <HAL_RCC_OscConfig+0x4c>
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	2b0c      	cmp	r3, #12
 8005564:	f040 808b 	bne.w	800567e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2b01      	cmp	r3, #1
 800556c:	f040 8087 	bne.w	800567e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005570:	4b88      	ldr	r3, [pc, #544]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <HAL_RCC_OscConfig+0x64>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e3d9      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a1a      	ldr	r2, [r3, #32]
 800558c:	4b81      	ldr	r3, [pc, #516]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0308 	and.w	r3, r3, #8
 8005594:	2b00      	cmp	r3, #0
 8005596:	d004      	beq.n	80055a2 <HAL_RCC_OscConfig+0x7e>
 8005598:	4b7e      	ldr	r3, [pc, #504]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055a0:	e005      	b.n	80055ae <HAL_RCC_OscConfig+0x8a>
 80055a2:	4b7c      	ldr	r3, [pc, #496]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 80055a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055a8:	091b      	lsrs	r3, r3, #4
 80055aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d223      	bcs.n	80055fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fdbe 	bl	8006138 <RCC_SetFlashLatencyFromMSIRange>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e3ba      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055c6:	4b73      	ldr	r3, [pc, #460]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a72      	ldr	r2, [pc, #456]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 80055cc:	f043 0308 	orr.w	r3, r3, #8
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	4b70      	ldr	r3, [pc, #448]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	496d      	ldr	r1, [pc, #436]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055e4:	4b6b      	ldr	r3, [pc, #428]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	021b      	lsls	r3, r3, #8
 80055f2:	4968      	ldr	r1, [pc, #416]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	604b      	str	r3, [r1, #4]
 80055f8:	e025      	b.n	8005646 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055fa:	4b66      	ldr	r3, [pc, #408]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a65      	ldr	r2, [pc, #404]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 8005600:	f043 0308 	orr.w	r3, r3, #8
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	4b63      	ldr	r3, [pc, #396]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	4960      	ldr	r1, [pc, #384]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 8005614:	4313      	orrs	r3, r2
 8005616:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005618:	4b5e      	ldr	r3, [pc, #376]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	021b      	lsls	r3, r3, #8
 8005626:	495b      	ldr	r1, [pc, #364]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 8005628:	4313      	orrs	r3, r2
 800562a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fd7e 	bl	8006138 <RCC_SetFlashLatencyFromMSIRange>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e37a      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005646:	f000 fc81 	bl	8005f4c <HAL_RCC_GetSysClockFreq>
 800564a:	4602      	mov	r2, r0
 800564c:	4b51      	ldr	r3, [pc, #324]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	091b      	lsrs	r3, r3, #4
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	4950      	ldr	r1, [pc, #320]	@ (8005798 <HAL_RCC_OscConfig+0x274>)
 8005658:	5ccb      	ldrb	r3, [r1, r3]
 800565a:	f003 031f 	and.w	r3, r3, #31
 800565e:	fa22 f303 	lsr.w	r3, r2, r3
 8005662:	4a4e      	ldr	r2, [pc, #312]	@ (800579c <HAL_RCC_OscConfig+0x278>)
 8005664:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005666:	4b4e      	ldr	r3, [pc, #312]	@ (80057a0 <HAL_RCC_OscConfig+0x27c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f7fd f8de 	bl	800282c <HAL_InitTick>
 8005670:	4603      	mov	r3, r0
 8005672:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d052      	beq.n	8005720 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800567a:	7bfb      	ldrb	r3, [r7, #15]
 800567c:	e35e      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d032      	beq.n	80056ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005686:	4b43      	ldr	r3, [pc, #268]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a42      	ldr	r2, [pc, #264]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 800568c:	f043 0301 	orr.w	r3, r3, #1
 8005690:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005692:	f7fd ff37 	bl	8003504 <HAL_GetTick>
 8005696:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005698:	e008      	b.n	80056ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800569a:	f7fd ff33 	bl	8003504 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d901      	bls.n	80056ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e347      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056ac:	4b39      	ldr	r3, [pc, #228]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0f0      	beq.n	800569a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056b8:	4b36      	ldr	r3, [pc, #216]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a35      	ldr	r2, [pc, #212]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 80056be:	f043 0308 	orr.w	r3, r3, #8
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	4b33      	ldr	r3, [pc, #204]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	4930      	ldr	r1, [pc, #192]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	021b      	lsls	r3, r3, #8
 80056e4:	492b      	ldr	r1, [pc, #172]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	604b      	str	r3, [r1, #4]
 80056ea:	e01a      	b.n	8005722 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80056ec:	4b29      	ldr	r3, [pc, #164]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a28      	ldr	r2, [pc, #160]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 80056f2:	f023 0301 	bic.w	r3, r3, #1
 80056f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056f8:	f7fd ff04 	bl	8003504 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005700:	f7fd ff00 	bl	8003504 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e314      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005712:	4b20      	ldr	r3, [pc, #128]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f0      	bne.n	8005700 <HAL_RCC_OscConfig+0x1dc>
 800571e:	e000      	b.n	8005722 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005720:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d073      	beq.n	8005816 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	2b08      	cmp	r3, #8
 8005732:	d005      	beq.n	8005740 <HAL_RCC_OscConfig+0x21c>
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	2b0c      	cmp	r3, #12
 8005738:	d10e      	bne.n	8005758 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2b03      	cmp	r3, #3
 800573e:	d10b      	bne.n	8005758 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005740:	4b14      	ldr	r3, [pc, #80]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d063      	beq.n	8005814 <HAL_RCC_OscConfig+0x2f0>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d15f      	bne.n	8005814 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e2f1      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005760:	d106      	bne.n	8005770 <HAL_RCC_OscConfig+0x24c>
 8005762:	4b0c      	ldr	r3, [pc, #48]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a0b      	ldr	r2, [pc, #44]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 8005768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	e025      	b.n	80057bc <HAL_RCC_OscConfig+0x298>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005778:	d114      	bne.n	80057a4 <HAL_RCC_OscConfig+0x280>
 800577a:	4b06      	ldr	r3, [pc, #24]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a05      	ldr	r2, [pc, #20]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 8005780:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	4b03      	ldr	r3, [pc, #12]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a02      	ldr	r2, [pc, #8]	@ (8005794 <HAL_RCC_OscConfig+0x270>)
 800578c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	e013      	b.n	80057bc <HAL_RCC_OscConfig+0x298>
 8005794:	40021000 	.word	0x40021000
 8005798:	0800a40c 	.word	0x0800a40c
 800579c:	20000000 	.word	0x20000000
 80057a0:	20000004 	.word	0x20000004
 80057a4:	4ba0      	ldr	r3, [pc, #640]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a9f      	ldr	r2, [pc, #636]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 80057aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	4b9d      	ldr	r3, [pc, #628]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a9c      	ldr	r2, [pc, #624]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 80057b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d013      	beq.n	80057ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c4:	f7fd fe9e 	bl	8003504 <HAL_GetTick>
 80057c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057cc:	f7fd fe9a 	bl	8003504 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b64      	cmp	r3, #100	@ 0x64
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e2ae      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057de:	4b92      	ldr	r3, [pc, #584]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0f0      	beq.n	80057cc <HAL_RCC_OscConfig+0x2a8>
 80057ea:	e014      	b.n	8005816 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ec:	f7fd fe8a 	bl	8003504 <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057f2:	e008      	b.n	8005806 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057f4:	f7fd fe86 	bl	8003504 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b64      	cmp	r3, #100	@ 0x64
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e29a      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005806:	4b88      	ldr	r3, [pc, #544]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1f0      	bne.n	80057f4 <HAL_RCC_OscConfig+0x2d0>
 8005812:	e000      	b.n	8005816 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d060      	beq.n	80058e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	2b04      	cmp	r3, #4
 8005826:	d005      	beq.n	8005834 <HAL_RCC_OscConfig+0x310>
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	2b0c      	cmp	r3, #12
 800582c:	d119      	bne.n	8005862 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b02      	cmp	r3, #2
 8005832:	d116      	bne.n	8005862 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005834:	4b7c      	ldr	r3, [pc, #496]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800583c:	2b00      	cmp	r3, #0
 800583e:	d005      	beq.n	800584c <HAL_RCC_OscConfig+0x328>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e277      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800584c:	4b76      	ldr	r3, [pc, #472]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	061b      	lsls	r3, r3, #24
 800585a:	4973      	ldr	r1, [pc, #460]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 800585c:	4313      	orrs	r3, r2
 800585e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005860:	e040      	b.n	80058e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d023      	beq.n	80058b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800586a:	4b6f      	ldr	r3, [pc, #444]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a6e      	ldr	r2, [pc, #440]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 8005870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005876:	f7fd fe45 	bl	8003504 <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800587c:	e008      	b.n	8005890 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800587e:	f7fd fe41 	bl	8003504 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e255      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005890:	4b65      	ldr	r3, [pc, #404]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0f0      	beq.n	800587e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800589c:	4b62      	ldr	r3, [pc, #392]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	061b      	lsls	r3, r3, #24
 80058aa:	495f      	ldr	r1, [pc, #380]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	604b      	str	r3, [r1, #4]
 80058b0:	e018      	b.n	80058e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058b2:	4b5d      	ldr	r3, [pc, #372]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a5c      	ldr	r2, [pc, #368]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 80058b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058be:	f7fd fe21 	bl	8003504 <HAL_GetTick>
 80058c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058c4:	e008      	b.n	80058d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058c6:	f7fd fe1d 	bl	8003504 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e231      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058d8:	4b53      	ldr	r3, [pc, #332]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1f0      	bne.n	80058c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d03c      	beq.n	800596a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01c      	beq.n	8005932 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058f8:	4b4b      	ldr	r3, [pc, #300]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 80058fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058fe:	4a4a      	ldr	r2, [pc, #296]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 8005900:	f043 0301 	orr.w	r3, r3, #1
 8005904:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005908:	f7fd fdfc 	bl	8003504 <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005910:	f7fd fdf8 	bl	8003504 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e20c      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005922:	4b41      	ldr	r3, [pc, #260]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 8005924:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0ef      	beq.n	8005910 <HAL_RCC_OscConfig+0x3ec>
 8005930:	e01b      	b.n	800596a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005932:	4b3d      	ldr	r3, [pc, #244]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 8005934:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005938:	4a3b      	ldr	r2, [pc, #236]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 800593a:	f023 0301 	bic.w	r3, r3, #1
 800593e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005942:	f7fd fddf 	bl	8003504 <HAL_GetTick>
 8005946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005948:	e008      	b.n	800595c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800594a:	f7fd fddb 	bl	8003504 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d901      	bls.n	800595c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e1ef      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800595c:	4b32      	ldr	r3, [pc, #200]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 800595e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1ef      	bne.n	800594a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0304 	and.w	r3, r3, #4
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 80a6 	beq.w	8005ac4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005978:	2300      	movs	r3, #0
 800597a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800597c:	4b2a      	ldr	r3, [pc, #168]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 800597e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10d      	bne.n	80059a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005988:	4b27      	ldr	r3, [pc, #156]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 800598a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800598c:	4a26      	ldr	r2, [pc, #152]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 800598e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005992:	6593      	str	r3, [r2, #88]	@ 0x58
 8005994:	4b24      	ldr	r3, [pc, #144]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 8005996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059a0:	2301      	movs	r3, #1
 80059a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059a4:	4b21      	ldr	r3, [pc, #132]	@ (8005a2c <HAL_RCC_OscConfig+0x508>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d118      	bne.n	80059e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059b0:	4b1e      	ldr	r3, [pc, #120]	@ (8005a2c <HAL_RCC_OscConfig+0x508>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a2c <HAL_RCC_OscConfig+0x508>)
 80059b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059bc:	f7fd fda2 	bl	8003504 <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059c2:	e008      	b.n	80059d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059c4:	f7fd fd9e 	bl	8003504 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e1b2      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059d6:	4b15      	ldr	r3, [pc, #84]	@ (8005a2c <HAL_RCC_OscConfig+0x508>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d0f0      	beq.n	80059c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d108      	bne.n	80059fc <HAL_RCC_OscConfig+0x4d8>
 80059ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 80059ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f0:	4a0d      	ldr	r2, [pc, #52]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 80059f2:	f043 0301 	orr.w	r3, r3, #1
 80059f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059fa:	e029      	b.n	8005a50 <HAL_RCC_OscConfig+0x52c>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	2b05      	cmp	r3, #5
 8005a02:	d115      	bne.n	8005a30 <HAL_RCC_OscConfig+0x50c>
 8005a04:	4b08      	ldr	r3, [pc, #32]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 8005a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a0a:	4a07      	ldr	r2, [pc, #28]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 8005a0c:	f043 0304 	orr.w	r3, r3, #4
 8005a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a14:	4b04      	ldr	r3, [pc, #16]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 8005a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a1a:	4a03      	ldr	r2, [pc, #12]	@ (8005a28 <HAL_RCC_OscConfig+0x504>)
 8005a1c:	f043 0301 	orr.w	r3, r3, #1
 8005a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a24:	e014      	b.n	8005a50 <HAL_RCC_OscConfig+0x52c>
 8005a26:	bf00      	nop
 8005a28:	40021000 	.word	0x40021000
 8005a2c:	40007000 	.word	0x40007000
 8005a30:	4b9a      	ldr	r3, [pc, #616]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a36:	4a99      	ldr	r2, [pc, #612]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a40:	4b96      	ldr	r3, [pc, #600]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a46:	4a95      	ldr	r2, [pc, #596]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005a48:	f023 0304 	bic.w	r3, r3, #4
 8005a4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d016      	beq.n	8005a86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a58:	f7fd fd54 	bl	8003504 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a5e:	e00a      	b.n	8005a76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a60:	f7fd fd50 	bl	8003504 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e162      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a76:	4b89      	ldr	r3, [pc, #548]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0ed      	beq.n	8005a60 <HAL_RCC_OscConfig+0x53c>
 8005a84:	e015      	b.n	8005ab2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a86:	f7fd fd3d 	bl	8003504 <HAL_GetTick>
 8005a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a8c:	e00a      	b.n	8005aa4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a8e:	f7fd fd39 	bl	8003504 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e14b      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005aa4:	4b7d      	ldr	r3, [pc, #500]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1ed      	bne.n	8005a8e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ab2:	7ffb      	ldrb	r3, [r7, #31]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d105      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ab8:	4b78      	ldr	r3, [pc, #480]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005abc:	4a77      	ldr	r2, [pc, #476]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005abe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ac2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0320 	and.w	r3, r3, #32
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d03c      	beq.n	8005b4a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01c      	beq.n	8005b12 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ad8:	4b70      	ldr	r3, [pc, #448]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ade:	4a6f      	ldr	r2, [pc, #444]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005ae0:	f043 0301 	orr.w	r3, r3, #1
 8005ae4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae8:	f7fd fd0c 	bl	8003504 <HAL_GetTick>
 8005aec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005aee:	e008      	b.n	8005b02 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005af0:	f7fd fd08 	bl	8003504 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e11c      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b02:	4b66      	ldr	r3, [pc, #408]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0ef      	beq.n	8005af0 <HAL_RCC_OscConfig+0x5cc>
 8005b10:	e01b      	b.n	8005b4a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b12:	4b62      	ldr	r3, [pc, #392]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005b14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b18:	4a60      	ldr	r2, [pc, #384]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005b1a:	f023 0301 	bic.w	r3, r3, #1
 8005b1e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b22:	f7fd fcef 	bl	8003504 <HAL_GetTick>
 8005b26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b2a:	f7fd fceb 	bl	8003504 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e0ff      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b3c:	4b57      	ldr	r3, [pc, #348]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1ef      	bne.n	8005b2a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 80f3 	beq.w	8005d3a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	f040 80c9 	bne.w	8005cf0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005b5e:	4b4f      	ldr	r3, [pc, #316]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f003 0203 	and.w	r2, r3, #3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d12c      	bne.n	8005bcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d123      	bne.n	8005bcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b8e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d11b      	bne.n	8005bcc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d113      	bne.n	8005bcc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bae:	085b      	lsrs	r3, r3, #1
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d109      	bne.n	8005bcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc2:	085b      	lsrs	r3, r3, #1
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d06b      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2b0c      	cmp	r3, #12
 8005bd0:	d062      	beq.n	8005c98 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005bd2:	4b32      	ldr	r3, [pc, #200]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e0ac      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005be2:	4b2e      	ldr	r3, [pc, #184]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a2d      	ldr	r2, [pc, #180]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005be8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bee:	f7fd fc89 	bl	8003504 <HAL_GetTick>
 8005bf2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf6:	f7fd fc85 	bl	8003504 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e099      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c08:	4b24      	ldr	r3, [pc, #144]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1f0      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c14:	4b21      	ldr	r3, [pc, #132]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	4b21      	ldr	r3, [pc, #132]	@ (8005ca0 <HAL_RCC_OscConfig+0x77c>)
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c24:	3a01      	subs	r2, #1
 8005c26:	0112      	lsls	r2, r2, #4
 8005c28:	4311      	orrs	r1, r2
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c2e:	0212      	lsls	r2, r2, #8
 8005c30:	4311      	orrs	r1, r2
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c36:	0852      	lsrs	r2, r2, #1
 8005c38:	3a01      	subs	r2, #1
 8005c3a:	0552      	lsls	r2, r2, #21
 8005c3c:	4311      	orrs	r1, r2
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005c42:	0852      	lsrs	r2, r2, #1
 8005c44:	3a01      	subs	r2, #1
 8005c46:	0652      	lsls	r2, r2, #25
 8005c48:	4311      	orrs	r1, r2
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005c4e:	06d2      	lsls	r2, r2, #27
 8005c50:	430a      	orrs	r2, r1
 8005c52:	4912      	ldr	r1, [pc, #72]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c58:	4b10      	ldr	r3, [pc, #64]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005c5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c64:	4b0d      	ldr	r3, [pc, #52]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	4a0c      	ldr	r2, [pc, #48]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005c6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c70:	f7fd fc48 	bl	8003504 <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c76:	e008      	b.n	8005c8a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c78:	f7fd fc44 	bl	8003504 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e058      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c8a:	4b04      	ldr	r3, [pc, #16]	@ (8005c9c <HAL_RCC_OscConfig+0x778>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0f0      	beq.n	8005c78 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c96:	e050      	b.n	8005d3a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e04f      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
 8005c9c:	40021000 	.word	0x40021000
 8005ca0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ca4:	4b27      	ldr	r3, [pc, #156]	@ (8005d44 <HAL_RCC_OscConfig+0x820>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d144      	bne.n	8005d3a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005cb0:	4b24      	ldr	r3, [pc, #144]	@ (8005d44 <HAL_RCC_OscConfig+0x820>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a23      	ldr	r2, [pc, #140]	@ (8005d44 <HAL_RCC_OscConfig+0x820>)
 8005cb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cbc:	4b21      	ldr	r3, [pc, #132]	@ (8005d44 <HAL_RCC_OscConfig+0x820>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	4a20      	ldr	r2, [pc, #128]	@ (8005d44 <HAL_RCC_OscConfig+0x820>)
 8005cc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cc6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005cc8:	f7fd fc1c 	bl	8003504 <HAL_GetTick>
 8005ccc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cce:	e008      	b.n	8005ce2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd0:	f7fd fc18 	bl	8003504 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e02c      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ce2:	4b18      	ldr	r3, [pc, #96]	@ (8005d44 <HAL_RCC_OscConfig+0x820>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0f0      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x7ac>
 8005cee:	e024      	b.n	8005d3a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	2b0c      	cmp	r3, #12
 8005cf4:	d01f      	beq.n	8005d36 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cf6:	4b13      	ldr	r3, [pc, #76]	@ (8005d44 <HAL_RCC_OscConfig+0x820>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a12      	ldr	r2, [pc, #72]	@ (8005d44 <HAL_RCC_OscConfig+0x820>)
 8005cfc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d02:	f7fd fbff 	bl	8003504 <HAL_GetTick>
 8005d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d08:	e008      	b.n	8005d1c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d0a:	f7fd fbfb 	bl	8003504 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d901      	bls.n	8005d1c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e00f      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d1c:	4b09      	ldr	r3, [pc, #36]	@ (8005d44 <HAL_RCC_OscConfig+0x820>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1f0      	bne.n	8005d0a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005d28:	4b06      	ldr	r3, [pc, #24]	@ (8005d44 <HAL_RCC_OscConfig+0x820>)
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	4905      	ldr	r1, [pc, #20]	@ (8005d44 <HAL_RCC_OscConfig+0x820>)
 8005d2e:	4b06      	ldr	r3, [pc, #24]	@ (8005d48 <HAL_RCC_OscConfig+0x824>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	60cb      	str	r3, [r1, #12]
 8005d34:	e001      	b.n	8005d3a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3720      	adds	r7, #32
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40021000 	.word	0x40021000
 8005d48:	feeefffc 	.word	0xfeeefffc

08005d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e0e7      	b.n	8005f30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d60:	4b75      	ldr	r3, [pc, #468]	@ (8005f38 <HAL_RCC_ClockConfig+0x1ec>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d910      	bls.n	8005d90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d6e:	4b72      	ldr	r3, [pc, #456]	@ (8005f38 <HAL_RCC_ClockConfig+0x1ec>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f023 0207 	bic.w	r2, r3, #7
 8005d76:	4970      	ldr	r1, [pc, #448]	@ (8005f38 <HAL_RCC_ClockConfig+0x1ec>)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d7e:	4b6e      	ldr	r3, [pc, #440]	@ (8005f38 <HAL_RCC_ClockConfig+0x1ec>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d001      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e0cf      	b.n	8005f30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d010      	beq.n	8005dbe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	4b66      	ldr	r3, [pc, #408]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d908      	bls.n	8005dbe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dac:	4b63      	ldr	r3, [pc, #396]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	4960      	ldr	r1, [pc, #384]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d04c      	beq.n	8005e64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d107      	bne.n	8005de2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dd2:	4b5a      	ldr	r3, [pc, #360]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d121      	bne.n	8005e22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e0a6      	b.n	8005f30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d107      	bne.n	8005dfa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dea:	4b54      	ldr	r3, [pc, #336]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d115      	bne.n	8005e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e09a      	b.n	8005f30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d107      	bne.n	8005e12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e02:	4b4e      	ldr	r3, [pc, #312]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d109      	bne.n	8005e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e08e      	b.n	8005f30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e12:	4b4a      	ldr	r3, [pc, #296]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e086      	b.n	8005f30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e22:	4b46      	ldr	r3, [pc, #280]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f023 0203 	bic.w	r2, r3, #3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	4943      	ldr	r1, [pc, #268]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e34:	f7fd fb66 	bl	8003504 <HAL_GetTick>
 8005e38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e3a:	e00a      	b.n	8005e52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e3c:	f7fd fb62 	bl	8003504 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e06e      	b.n	8005f30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e52:	4b3a      	ldr	r3, [pc, #232]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 020c 	and.w	r2, r3, #12
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d1eb      	bne.n	8005e3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d010      	beq.n	8005e92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	4b31      	ldr	r3, [pc, #196]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d208      	bcs.n	8005e92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e80:	4b2e      	ldr	r3, [pc, #184]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	492b      	ldr	r1, [pc, #172]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e92:	4b29      	ldr	r3, [pc, #164]	@ (8005f38 <HAL_RCC_ClockConfig+0x1ec>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d210      	bcs.n	8005ec2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ea0:	4b25      	ldr	r3, [pc, #148]	@ (8005f38 <HAL_RCC_ClockConfig+0x1ec>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f023 0207 	bic.w	r2, r3, #7
 8005ea8:	4923      	ldr	r1, [pc, #140]	@ (8005f38 <HAL_RCC_ClockConfig+0x1ec>)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eb0:	4b21      	ldr	r3, [pc, #132]	@ (8005f38 <HAL_RCC_ClockConfig+0x1ec>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d001      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e036      	b.n	8005f30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0304 	and.w	r3, r3, #4
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d008      	beq.n	8005ee0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ece:	4b1b      	ldr	r3, [pc, #108]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	4918      	ldr	r1, [pc, #96]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0308 	and.w	r3, r3, #8
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d009      	beq.n	8005f00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eec:	4b13      	ldr	r3, [pc, #76]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	4910      	ldr	r1, [pc, #64]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f00:	f000 f824 	bl	8005f4c <HAL_RCC_GetSysClockFreq>
 8005f04:	4602      	mov	r2, r0
 8005f06:	4b0d      	ldr	r3, [pc, #52]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	091b      	lsrs	r3, r3, #4
 8005f0c:	f003 030f 	and.w	r3, r3, #15
 8005f10:	490b      	ldr	r1, [pc, #44]	@ (8005f40 <HAL_RCC_ClockConfig+0x1f4>)
 8005f12:	5ccb      	ldrb	r3, [r1, r3]
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	fa22 f303 	lsr.w	r3, r2, r3
 8005f1c:	4a09      	ldr	r2, [pc, #36]	@ (8005f44 <HAL_RCC_ClockConfig+0x1f8>)
 8005f1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005f20:	4b09      	ldr	r3, [pc, #36]	@ (8005f48 <HAL_RCC_ClockConfig+0x1fc>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fc fc81 	bl	800282c <HAL_InitTick>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8005f2e:	7afb      	ldrb	r3, [r7, #11]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	40022000 	.word	0x40022000
 8005f3c:	40021000 	.word	0x40021000
 8005f40:	0800a40c 	.word	0x0800a40c
 8005f44:	20000000 	.word	0x20000000
 8005f48:	20000004 	.word	0x20000004

08005f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b089      	sub	sp, #36	@ 0x24
 8005f50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	61fb      	str	r3, [r7, #28]
 8005f56:	2300      	movs	r3, #0
 8005f58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f5a:	4b3e      	ldr	r3, [pc, #248]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 030c 	and.w	r3, r3, #12
 8005f62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f64:	4b3b      	ldr	r3, [pc, #236]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f003 0303 	and.w	r3, r3, #3
 8005f6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <HAL_RCC_GetSysClockFreq+0x34>
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	2b0c      	cmp	r3, #12
 8005f78:	d121      	bne.n	8005fbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d11e      	bne.n	8005fbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f80:	4b34      	ldr	r3, [pc, #208]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d107      	bne.n	8005f9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f8c:	4b31      	ldr	r3, [pc, #196]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f92:	0a1b      	lsrs	r3, r3, #8
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	61fb      	str	r3, [r7, #28]
 8005f9a:	e005      	b.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	091b      	lsrs	r3, r3, #4
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8006058 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10d      	bne.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fbc:	e00a      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d102      	bne.n	8005fca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005fc4:	4b25      	ldr	r3, [pc, #148]	@ (800605c <HAL_RCC_GetSysClockFreq+0x110>)
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	e004      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d101      	bne.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005fd0:	4b23      	ldr	r3, [pc, #140]	@ (8006060 <HAL_RCC_GetSysClockFreq+0x114>)
 8005fd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	2b0c      	cmp	r3, #12
 8005fd8:	d134      	bne.n	8006044 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fda:	4b1e      	ldr	r3, [pc, #120]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d003      	beq.n	8005ff2 <HAL_RCC_GetSysClockFreq+0xa6>
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	d003      	beq.n	8005ff8 <HAL_RCC_GetSysClockFreq+0xac>
 8005ff0:	e005      	b.n	8005ffe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800605c <HAL_RCC_GetSysClockFreq+0x110>)
 8005ff4:	617b      	str	r3, [r7, #20]
      break;
 8005ff6:	e005      	b.n	8006004 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ff8:	4b19      	ldr	r3, [pc, #100]	@ (8006060 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ffa:	617b      	str	r3, [r7, #20]
      break;
 8005ffc:	e002      	b.n	8006004 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	617b      	str	r3, [r7, #20]
      break;
 8006002:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006004:	4b13      	ldr	r3, [pc, #76]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	091b      	lsrs	r3, r3, #4
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	3301      	adds	r3, #1
 8006010:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006012:	4b10      	ldr	r3, [pc, #64]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	0a1b      	lsrs	r3, r3, #8
 8006018:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	fb03 f202 	mul.w	r2, r3, r2
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	fbb2 f3f3 	udiv	r3, r2, r3
 8006028:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800602a:	4b0a      	ldr	r3, [pc, #40]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	0e5b      	lsrs	r3, r3, #25
 8006030:	f003 0303 	and.w	r3, r3, #3
 8006034:	3301      	adds	r3, #1
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006042:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006044:	69bb      	ldr	r3, [r7, #24]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3724      	adds	r7, #36	@ 0x24
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40021000 	.word	0x40021000
 8006058:	0800a424 	.word	0x0800a424
 800605c:	00f42400 	.word	0x00f42400
 8006060:	007a1200 	.word	0x007a1200

08006064 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006068:	4b03      	ldr	r3, [pc, #12]	@ (8006078 <HAL_RCC_GetHCLKFreq+0x14>)
 800606a:	681b      	ldr	r3, [r3, #0]
}
 800606c:	4618      	mov	r0, r3
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	20000000 	.word	0x20000000

0800607c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006080:	f7ff fff0 	bl	8006064 <HAL_RCC_GetHCLKFreq>
 8006084:	4602      	mov	r2, r0
 8006086:	4b06      	ldr	r3, [pc, #24]	@ (80060a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	0a1b      	lsrs	r3, r3, #8
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	4904      	ldr	r1, [pc, #16]	@ (80060a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006092:	5ccb      	ldrb	r3, [r1, r3]
 8006094:	f003 031f 	and.w	r3, r3, #31
 8006098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800609c:	4618      	mov	r0, r3
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40021000 	.word	0x40021000
 80060a4:	0800a41c 	.word	0x0800a41c

080060a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80060ac:	f7ff ffda 	bl	8006064 <HAL_RCC_GetHCLKFreq>
 80060b0:	4602      	mov	r2, r0
 80060b2:	4b06      	ldr	r3, [pc, #24]	@ (80060cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	0adb      	lsrs	r3, r3, #11
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	4904      	ldr	r1, [pc, #16]	@ (80060d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80060be:	5ccb      	ldrb	r3, [r1, r3]
 80060c0:	f003 031f 	and.w	r3, r3, #31
 80060c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40021000 	.word	0x40021000
 80060d0:	0800a41c 	.word	0x0800a41c

080060d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	220f      	movs	r2, #15
 80060e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80060e4:	4b12      	ldr	r3, [pc, #72]	@ (8006130 <HAL_RCC_GetClockConfig+0x5c>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f003 0203 	and.w	r2, r3, #3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80060f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006130 <HAL_RCC_GetClockConfig+0x5c>)
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80060fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006130 <HAL_RCC_GetClockConfig+0x5c>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006108:	4b09      	ldr	r3, [pc, #36]	@ (8006130 <HAL_RCC_GetClockConfig+0x5c>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	08db      	lsrs	r3, r3, #3
 800610e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006116:	4b07      	ldr	r3, [pc, #28]	@ (8006134 <HAL_RCC_GetClockConfig+0x60>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0207 	and.w	r2, r3, #7
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	601a      	str	r2, [r3, #0]
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	40021000 	.word	0x40021000
 8006134:	40022000 	.word	0x40022000

08006138 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006140:	2300      	movs	r3, #0
 8006142:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006144:	4b2a      	ldr	r3, [pc, #168]	@ (80061f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006148:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006150:	f7ff f984 	bl	800545c <HAL_PWREx_GetVoltageRange>
 8006154:	6178      	str	r0, [r7, #20]
 8006156:	e014      	b.n	8006182 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006158:	4b25      	ldr	r3, [pc, #148]	@ (80061f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800615a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800615c:	4a24      	ldr	r2, [pc, #144]	@ (80061f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800615e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006162:	6593      	str	r3, [r2, #88]	@ 0x58
 8006164:	4b22      	ldr	r3, [pc, #136]	@ (80061f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006170:	f7ff f974 	bl	800545c <HAL_PWREx_GetVoltageRange>
 8006174:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006176:	4b1e      	ldr	r3, [pc, #120]	@ (80061f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800617a:	4a1d      	ldr	r2, [pc, #116]	@ (80061f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800617c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006180:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006188:	d10b      	bne.n	80061a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b80      	cmp	r3, #128	@ 0x80
 800618e:	d919      	bls.n	80061c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2ba0      	cmp	r3, #160	@ 0xa0
 8006194:	d902      	bls.n	800619c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006196:	2302      	movs	r3, #2
 8006198:	613b      	str	r3, [r7, #16]
 800619a:	e013      	b.n	80061c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800619c:	2301      	movs	r3, #1
 800619e:	613b      	str	r3, [r7, #16]
 80061a0:	e010      	b.n	80061c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b80      	cmp	r3, #128	@ 0x80
 80061a6:	d902      	bls.n	80061ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80061a8:	2303      	movs	r3, #3
 80061aa:	613b      	str	r3, [r7, #16]
 80061ac:	e00a      	b.n	80061c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b80      	cmp	r3, #128	@ 0x80
 80061b2:	d102      	bne.n	80061ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80061b4:	2302      	movs	r3, #2
 80061b6:	613b      	str	r3, [r7, #16]
 80061b8:	e004      	b.n	80061c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b70      	cmp	r3, #112	@ 0x70
 80061be:	d101      	bne.n	80061c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80061c0:	2301      	movs	r3, #1
 80061c2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80061c4:	4b0b      	ldr	r3, [pc, #44]	@ (80061f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f023 0207 	bic.w	r2, r3, #7
 80061cc:	4909      	ldr	r1, [pc, #36]	@ (80061f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80061d4:	4b07      	ldr	r3, [pc, #28]	@ (80061f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0307 	and.w	r3, r3, #7
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d001      	beq.n	80061e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e000      	b.n	80061e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	40021000 	.word	0x40021000
 80061f4:	40022000 	.word	0x40022000

080061f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006200:	2300      	movs	r3, #0
 8006202:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006204:	2300      	movs	r3, #0
 8006206:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006210:	2b00      	cmp	r3, #0
 8006212:	d031      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006218:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800621c:	d01a      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800621e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006222:	d814      	bhi.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006224:	2b00      	cmp	r3, #0
 8006226:	d009      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006228:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800622c:	d10f      	bne.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800622e:	4b5d      	ldr	r3, [pc, #372]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	4a5c      	ldr	r2, [pc, #368]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006238:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800623a:	e00c      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3304      	adds	r3, #4
 8006240:	2100      	movs	r1, #0
 8006242:	4618      	mov	r0, r3
 8006244:	f000 f9ce 	bl	80065e4 <RCCEx_PLLSAI1_Config>
 8006248:	4603      	mov	r3, r0
 800624a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800624c:	e003      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	74fb      	strb	r3, [r7, #19]
      break;
 8006252:	e000      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006256:	7cfb      	ldrb	r3, [r7, #19]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10b      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800625c:	4b51      	ldr	r3, [pc, #324]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800625e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006262:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800626a:	494e      	ldr	r1, [pc, #312]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006272:	e001      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006274:	7cfb      	ldrb	r3, [r7, #19]
 8006276:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 809e 	beq.w	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006286:	2300      	movs	r3, #0
 8006288:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800628a:	4b46      	ldr	r3, [pc, #280]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800628c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800628e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800629a:	2300      	movs	r3, #0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00d      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062a0:	4b40      	ldr	r3, [pc, #256]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a4:	4a3f      	ldr	r2, [pc, #252]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80062ac:	4b3d      	ldr	r3, [pc, #244]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062b4:	60bb      	str	r3, [r7, #8]
 80062b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062b8:	2301      	movs	r3, #1
 80062ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062bc:	4b3a      	ldr	r3, [pc, #232]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a39      	ldr	r2, [pc, #228]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80062c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062c8:	f7fd f91c 	bl	8003504 <HAL_GetTick>
 80062cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062ce:	e009      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062d0:	f7fd f918 	bl	8003504 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d902      	bls.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	74fb      	strb	r3, [r7, #19]
        break;
 80062e2:	e005      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062e4:	4b30      	ldr	r3, [pc, #192]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d0ef      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80062f0:	7cfb      	ldrb	r3, [r7, #19]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d15a      	bne.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062f6:	4b2b      	ldr	r3, [pc, #172]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006300:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01e      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	429a      	cmp	r2, r3
 8006310:	d019      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006312:	4b24      	ldr	r3, [pc, #144]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006318:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800631c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800631e:	4b21      	ldr	r3, [pc, #132]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006324:	4a1f      	ldr	r2, [pc, #124]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800632a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800632e:	4b1d      	ldr	r3, [pc, #116]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006334:	4a1b      	ldr	r2, [pc, #108]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800633a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800633e:	4a19      	ldr	r2, [pc, #100]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d016      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006350:	f7fd f8d8 	bl	8003504 <HAL_GetTick>
 8006354:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006356:	e00b      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006358:	f7fd f8d4 	bl	8003504 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006366:	4293      	cmp	r3, r2
 8006368:	d902      	bls.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	74fb      	strb	r3, [r7, #19]
            break;
 800636e:	e006      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006370:	4b0c      	ldr	r3, [pc, #48]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d0ec      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800637e:	7cfb      	ldrb	r3, [r7, #19]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10b      	bne.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006384:	4b07      	ldr	r3, [pc, #28]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006392:	4904      	ldr	r1, [pc, #16]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006394:	4313      	orrs	r3, r2
 8006396:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800639a:	e009      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800639c:	7cfb      	ldrb	r3, [r7, #19]
 800639e:	74bb      	strb	r3, [r7, #18]
 80063a0:	e006      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80063a2:	bf00      	nop
 80063a4:	40021000 	.word	0x40021000
 80063a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ac:	7cfb      	ldrb	r3, [r7, #19]
 80063ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063b0:	7c7b      	ldrb	r3, [r7, #17]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d105      	bne.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063b6:	4b8a      	ldr	r3, [pc, #552]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ba:	4a89      	ldr	r2, [pc, #548]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063ce:	4b84      	ldr	r3, [pc, #528]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d4:	f023 0203 	bic.w	r2, r3, #3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	4980      	ldr	r1, [pc, #512]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00a      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063f0:	4b7b      	ldr	r3, [pc, #492]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063f6:	f023 020c 	bic.w	r2, r3, #12
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fe:	4978      	ldr	r1, [pc, #480]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006400:	4313      	orrs	r3, r2
 8006402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006412:	4b73      	ldr	r3, [pc, #460]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006418:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006420:	496f      	ldr	r1, [pc, #444]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006422:	4313      	orrs	r3, r2
 8006424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00a      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006434:	4b6a      	ldr	r3, [pc, #424]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800643a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006442:	4967      	ldr	r1, [pc, #412]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006444:	4313      	orrs	r3, r2
 8006446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00a      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006456:	4b62      	ldr	r3, [pc, #392]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800645c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006464:	495e      	ldr	r1, [pc, #376]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006466:	4313      	orrs	r3, r2
 8006468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00a      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006478:	4b59      	ldr	r3, [pc, #356]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800647a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800647e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006486:	4956      	ldr	r1, [pc, #344]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006488:	4313      	orrs	r3, r2
 800648a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800649a:	4b51      	ldr	r3, [pc, #324]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800649c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a8:	494d      	ldr	r1, [pc, #308]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d028      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064bc:	4b48      	ldr	r3, [pc, #288]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ca:	4945      	ldr	r1, [pc, #276]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064da:	d106      	bne.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064dc:	4b40      	ldr	r3, [pc, #256]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	4a3f      	ldr	r2, [pc, #252]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064e6:	60d3      	str	r3, [r2, #12]
 80064e8:	e011      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064f2:	d10c      	bne.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3304      	adds	r3, #4
 80064f8:	2101      	movs	r1, #1
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 f872 	bl	80065e4 <RCCEx_PLLSAI1_Config>
 8006500:	4603      	mov	r3, r0
 8006502:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006504:	7cfb      	ldrb	r3, [r7, #19]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800650a:	7cfb      	ldrb	r3, [r7, #19]
 800650c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d028      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800651a:	4b31      	ldr	r3, [pc, #196]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800651c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006520:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006528:	492d      	ldr	r1, [pc, #180]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800652a:	4313      	orrs	r3, r2
 800652c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006534:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006538:	d106      	bne.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800653a:	4b29      	ldr	r3, [pc, #164]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	4a28      	ldr	r2, [pc, #160]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006540:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006544:	60d3      	str	r3, [r2, #12]
 8006546:	e011      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800654c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006550:	d10c      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	3304      	adds	r3, #4
 8006556:	2101      	movs	r1, #1
 8006558:	4618      	mov	r0, r3
 800655a:	f000 f843 	bl	80065e4 <RCCEx_PLLSAI1_Config>
 800655e:	4603      	mov	r3, r0
 8006560:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006562:	7cfb      	ldrb	r3, [r7, #19]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006568:	7cfb      	ldrb	r3, [r7, #19]
 800656a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d01c      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006578:	4b19      	ldr	r3, [pc, #100]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800657a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800657e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006586:	4916      	ldr	r1, [pc, #88]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006588:	4313      	orrs	r3, r2
 800658a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006592:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006596:	d10c      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	3304      	adds	r3, #4
 800659c:	2102      	movs	r1, #2
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 f820 	bl	80065e4 <RCCEx_PLLSAI1_Config>
 80065a4:	4603      	mov	r3, r0
 80065a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065a8:	7cfb      	ldrb	r3, [r7, #19]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80065ae:	7cfb      	ldrb	r3, [r7, #19]
 80065b0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80065be:	4b08      	ldr	r3, [pc, #32]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065cc:	4904      	ldr	r1, [pc, #16]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80065d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	40021000 	.word	0x40021000

080065e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065f2:	4b74      	ldr	r3, [pc, #464]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d018      	beq.n	8006630 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80065fe:	4b71      	ldr	r3, [pc, #452]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f003 0203 	and.w	r2, r3, #3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	429a      	cmp	r2, r3
 800660c:	d10d      	bne.n	800662a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
       ||
 8006612:	2b00      	cmp	r3, #0
 8006614:	d009      	beq.n	800662a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006616:	4b6b      	ldr	r3, [pc, #428]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	091b      	lsrs	r3, r3, #4
 800661c:	f003 0307 	and.w	r3, r3, #7
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
       ||
 8006626:	429a      	cmp	r2, r3
 8006628:	d047      	beq.n	80066ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	73fb      	strb	r3, [r7, #15]
 800662e:	e044      	b.n	80066ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b03      	cmp	r3, #3
 8006636:	d018      	beq.n	800666a <RCCEx_PLLSAI1_Config+0x86>
 8006638:	2b03      	cmp	r3, #3
 800663a:	d825      	bhi.n	8006688 <RCCEx_PLLSAI1_Config+0xa4>
 800663c:	2b01      	cmp	r3, #1
 800663e:	d002      	beq.n	8006646 <RCCEx_PLLSAI1_Config+0x62>
 8006640:	2b02      	cmp	r3, #2
 8006642:	d009      	beq.n	8006658 <RCCEx_PLLSAI1_Config+0x74>
 8006644:	e020      	b.n	8006688 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006646:	4b5f      	ldr	r3, [pc, #380]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d11d      	bne.n	800668e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006656:	e01a      	b.n	800668e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006658:	4b5a      	ldr	r3, [pc, #360]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006660:	2b00      	cmp	r3, #0
 8006662:	d116      	bne.n	8006692 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006668:	e013      	b.n	8006692 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800666a:	4b56      	ldr	r3, [pc, #344]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10f      	bne.n	8006696 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006676:	4b53      	ldr	r3, [pc, #332]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d109      	bne.n	8006696 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006686:	e006      	b.n	8006696 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	73fb      	strb	r3, [r7, #15]
      break;
 800668c:	e004      	b.n	8006698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800668e:	bf00      	nop
 8006690:	e002      	b.n	8006698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006692:	bf00      	nop
 8006694:	e000      	b.n	8006698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006696:	bf00      	nop
    }

    if(status == HAL_OK)
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10d      	bne.n	80066ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800669e:	4b49      	ldr	r3, [pc, #292]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6819      	ldr	r1, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	011b      	lsls	r3, r3, #4
 80066b2:	430b      	orrs	r3, r1
 80066b4:	4943      	ldr	r1, [pc, #268]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d17c      	bne.n	80067ba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80066c0:	4b40      	ldr	r3, [pc, #256]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a3f      	ldr	r2, [pc, #252]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80066ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066cc:	f7fc ff1a 	bl	8003504 <HAL_GetTick>
 80066d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066d2:	e009      	b.n	80066e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066d4:	f7fc ff16 	bl	8003504 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d902      	bls.n	80066e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	73fb      	strb	r3, [r7, #15]
        break;
 80066e6:	e005      	b.n	80066f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066e8:	4b36      	ldr	r3, [pc, #216]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1ef      	bne.n	80066d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d15f      	bne.n	80067ba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d110      	bne.n	8006722 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006700:	4b30      	ldr	r3, [pc, #192]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006708:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6892      	ldr	r2, [r2, #8]
 8006710:	0211      	lsls	r1, r2, #8
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	68d2      	ldr	r2, [r2, #12]
 8006716:	06d2      	lsls	r2, r2, #27
 8006718:	430a      	orrs	r2, r1
 800671a:	492a      	ldr	r1, [pc, #168]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800671c:	4313      	orrs	r3, r2
 800671e:	610b      	str	r3, [r1, #16]
 8006720:	e027      	b.n	8006772 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d112      	bne.n	800674e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006728:	4b26      	ldr	r3, [pc, #152]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006730:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6892      	ldr	r2, [r2, #8]
 8006738:	0211      	lsls	r1, r2, #8
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	6912      	ldr	r2, [r2, #16]
 800673e:	0852      	lsrs	r2, r2, #1
 8006740:	3a01      	subs	r2, #1
 8006742:	0552      	lsls	r2, r2, #21
 8006744:	430a      	orrs	r2, r1
 8006746:	491f      	ldr	r1, [pc, #124]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006748:	4313      	orrs	r3, r2
 800674a:	610b      	str	r3, [r1, #16]
 800674c:	e011      	b.n	8006772 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800674e:	4b1d      	ldr	r3, [pc, #116]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006756:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	6892      	ldr	r2, [r2, #8]
 800675e:	0211      	lsls	r1, r2, #8
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6952      	ldr	r2, [r2, #20]
 8006764:	0852      	lsrs	r2, r2, #1
 8006766:	3a01      	subs	r2, #1
 8006768:	0652      	lsls	r2, r2, #25
 800676a:	430a      	orrs	r2, r1
 800676c:	4915      	ldr	r1, [pc, #84]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800676e:	4313      	orrs	r3, r2
 8006770:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006772:	4b14      	ldr	r3, [pc, #80]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a13      	ldr	r2, [pc, #76]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006778:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800677c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800677e:	f7fc fec1 	bl	8003504 <HAL_GetTick>
 8006782:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006784:	e009      	b.n	800679a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006786:	f7fc febd 	bl	8003504 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d902      	bls.n	800679a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	73fb      	strb	r3, [r7, #15]
          break;
 8006798:	e005      	b.n	80067a6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800679a:	4b0a      	ldr	r3, [pc, #40]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0ef      	beq.n	8006786 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d106      	bne.n	80067ba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80067ac:	4b05      	ldr	r3, [pc, #20]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067ae:	691a      	ldr	r2, [r3, #16]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	4903      	ldr	r1, [pc, #12]	@ (80067c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	40021000 	.word	0x40021000

080067c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e049      	b.n	800686e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d106      	bne.n	80067f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f841 	bl	8006876 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3304      	adds	r3, #4
 8006804:	4619      	mov	r1, r3
 8006806:	4610      	mov	r0, r2
 8006808:	f000 f9c4 	bl	8006b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
	...

0800688c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b01      	cmp	r3, #1
 800689e:	d001      	beq.n	80068a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e03b      	b.n	800691c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0201 	orr.w	r2, r2, #1
 80068ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a19      	ldr	r2, [pc, #100]	@ (8006928 <HAL_TIM_Base_Start_IT+0x9c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d009      	beq.n	80068da <HAL_TIM_Base_Start_IT+0x4e>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068ce:	d004      	beq.n	80068da <HAL_TIM_Base_Start_IT+0x4e>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a15      	ldr	r2, [pc, #84]	@ (800692c <HAL_TIM_Base_Start_IT+0xa0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d115      	bne.n	8006906 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	4b13      	ldr	r3, [pc, #76]	@ (8006930 <HAL_TIM_Base_Start_IT+0xa4>)
 80068e2:	4013      	ands	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b06      	cmp	r3, #6
 80068ea:	d015      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x8c>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f2:	d011      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0201 	orr.w	r2, r2, #1
 8006902:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006904:	e008      	b.n	8006918 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f042 0201 	orr.w	r2, r2, #1
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	e000      	b.n	800691a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006918:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	40012c00 	.word	0x40012c00
 800692c:	40014000 	.word	0x40014000
 8006930:	00010007 	.word	0x00010007

08006934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d020      	beq.n	8006998 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d01b      	beq.n	8006998 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f06f 0202 	mvn.w	r2, #2
 8006968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f8e9 	bl	8006b56 <HAL_TIM_IC_CaptureCallback>
 8006984:	e005      	b.n	8006992 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f8db 	bl	8006b42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f8ec 	bl	8006b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f003 0304 	and.w	r3, r3, #4
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d020      	beq.n	80069e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d01b      	beq.n	80069e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f06f 0204 	mvn.w	r2, #4
 80069b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2202      	movs	r2, #2
 80069ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f8c3 	bl	8006b56 <HAL_TIM_IC_CaptureCallback>
 80069d0:	e005      	b.n	80069de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f8b5 	bl	8006b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f8c6 	bl	8006b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f003 0308 	and.w	r3, r3, #8
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d020      	beq.n	8006a30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f003 0308 	and.w	r3, r3, #8
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01b      	beq.n	8006a30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f06f 0208 	mvn.w	r2, #8
 8006a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2204      	movs	r2, #4
 8006a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	f003 0303 	and.w	r3, r3, #3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f89d 	bl	8006b56 <HAL_TIM_IC_CaptureCallback>
 8006a1c:	e005      	b.n	8006a2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f88f 	bl	8006b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f8a0 	bl	8006b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f003 0310 	and.w	r3, r3, #16
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d020      	beq.n	8006a7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f003 0310 	and.w	r3, r3, #16
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d01b      	beq.n	8006a7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0210 	mvn.w	r2, #16
 8006a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2208      	movs	r2, #8
 8006a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f877 	bl	8006b56 <HAL_TIM_IC_CaptureCallback>
 8006a68:	e005      	b.n	8006a76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f869 	bl	8006b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f87a 	bl	8006b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00c      	beq.n	8006aa0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d007      	beq.n	8006aa0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f06f 0201 	mvn.w	r2, #1
 8006a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7fb fce8 	bl	8002470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d104      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00c      	beq.n	8006ace <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d007      	beq.n	8006ace <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f8dd 	bl	8006c88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00c      	beq.n	8006af2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d007      	beq.n	8006af2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f8d5 	bl	8006c9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00c      	beq.n	8006b16 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d007      	beq.n	8006b16 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f834 	bl	8006b7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00c      	beq.n	8006b3a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f003 0320 	and.w	r3, r3, #32
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d007      	beq.n	8006b3a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f06f 0220 	mvn.w	r2, #32
 8006b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f89d 	bl	8006c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b3a:	bf00      	nop
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b4a:	bf00      	nop
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b5e:	bf00      	nop
 8006b60:	370c      	adds	r7, #12
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b083      	sub	sp, #12
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b72:	bf00      	nop
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b86:	bf00      	nop
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
	...

08006b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a30      	ldr	r2, [pc, #192]	@ (8006c68 <TIM_Base_SetConfig+0xd4>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d003      	beq.n	8006bb4 <TIM_Base_SetConfig+0x20>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bb2:	d108      	bne.n	8006bc6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a27      	ldr	r2, [pc, #156]	@ (8006c68 <TIM_Base_SetConfig+0xd4>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d00b      	beq.n	8006be6 <TIM_Base_SetConfig+0x52>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bd4:	d007      	beq.n	8006be6 <TIM_Base_SetConfig+0x52>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a24      	ldr	r2, [pc, #144]	@ (8006c6c <TIM_Base_SetConfig+0xd8>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d003      	beq.n	8006be6 <TIM_Base_SetConfig+0x52>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a23      	ldr	r2, [pc, #140]	@ (8006c70 <TIM_Base_SetConfig+0xdc>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d108      	bne.n	8006bf8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a12      	ldr	r2, [pc, #72]	@ (8006c68 <TIM_Base_SetConfig+0xd4>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d007      	beq.n	8006c34 <TIM_Base_SetConfig+0xa0>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a11      	ldr	r2, [pc, #68]	@ (8006c6c <TIM_Base_SetConfig+0xd8>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d003      	beq.n	8006c34 <TIM_Base_SetConfig+0xa0>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a10      	ldr	r2, [pc, #64]	@ (8006c70 <TIM_Base_SetConfig+0xdc>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d103      	bne.n	8006c3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d105      	bne.n	8006c5a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f023 0201 	bic.w	r2, r3, #1
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	611a      	str	r2, [r3, #16]
  }
}
 8006c5a:	bf00      	nop
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	40012c00 	.word	0x40012c00
 8006c6c:	40014000 	.word	0x40014000
 8006c70:	40014400 	.word	0x40014400

08006c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e040      	b.n	8006d44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d106      	bne.n	8006cd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7fb fca8 	bl	8002628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2224      	movs	r2, #36	@ 0x24
 8006cdc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0201 	bic.w	r2, r2, #1
 8006cec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d002      	beq.n	8006cfc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fe0c 	bl	8007914 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fbdd 	bl	80074bc <UART_SetConfig>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d101      	bne.n	8006d0c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e01b      	b.n	8006d44 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689a      	ldr	r2, [r3, #8]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 0201 	orr.w	r2, r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fe8b 	bl	8007a58 <UART_CheckIdleState>
 8006d42:	4603      	mov	r3, r0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08a      	sub	sp, #40	@ 0x28
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	603b      	str	r3, [r7, #0]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d60:	2b20      	cmp	r3, #32
 8006d62:	d177      	bne.n	8006e54 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <HAL_UART_Transmit+0x24>
 8006d6a:	88fb      	ldrh	r3, [r7, #6]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e070      	b.n	8006e56 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2221      	movs	r2, #33	@ 0x21
 8006d80:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d82:	f7fc fbbf 	bl	8003504 <HAL_GetTick>
 8006d86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	88fa      	ldrh	r2, [r7, #6]
 8006d8c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	88fa      	ldrh	r2, [r7, #6]
 8006d94:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006da0:	d108      	bne.n	8006db4 <HAL_UART_Transmit+0x68>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d104      	bne.n	8006db4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	61bb      	str	r3, [r7, #24]
 8006db2:	e003      	b.n	8006dbc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006db8:	2300      	movs	r3, #0
 8006dba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006dbc:	e02f      	b.n	8006e1e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2180      	movs	r1, #128	@ 0x80
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 feed 	bl	8007ba8 <UART_WaitOnFlagUntilTimeout>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d004      	beq.n	8006dde <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e03b      	b.n	8006e56 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10b      	bne.n	8006dfc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	881a      	ldrh	r2, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006df0:	b292      	uxth	r2, r2
 8006df2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	3302      	adds	r3, #2
 8006df8:	61bb      	str	r3, [r7, #24]
 8006dfa:	e007      	b.n	8006e0c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	781a      	ldrb	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	3b01      	subs	r3, #1
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1c9      	bne.n	8006dbe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2200      	movs	r2, #0
 8006e32:	2140      	movs	r1, #64	@ 0x40
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 feb7 	bl	8007ba8 <UART_WaitOnFlagUntilTimeout>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d004      	beq.n	8006e4a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2220      	movs	r2, #32
 8006e44:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e005      	b.n	8006e56 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	e000      	b.n	8006e56 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006e54:	2302      	movs	r3, #2
  }
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3720      	adds	r7, #32
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
	...

08006e60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b0ba      	sub	sp, #232	@ 0xe8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006e8a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006e8e:	4013      	ands	r3, r2
 8006e90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006e94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d115      	bne.n	8006ec8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ea0:	f003 0320 	and.w	r3, r3, #32
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00f      	beq.n	8006ec8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eac:	f003 0320 	and.w	r3, r3, #32
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d009      	beq.n	8006ec8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 82ca 	beq.w	8007452 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	4798      	blx	r3
      }
      return;
 8006ec6:	e2c4      	b.n	8007452 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006ec8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 8117 	beq.w	8007100 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d106      	bne.n	8006eec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006ede:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006ee2:	4b85      	ldr	r3, [pc, #532]	@ (80070f8 <HAL_UART_IRQHandler+0x298>)
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 810a 	beq.w	8007100 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d011      	beq.n	8006f1c <HAL_UART_IRQHandler+0xbc>
 8006ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00b      	beq.n	8006f1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f12:	f043 0201 	orr.w	r2, r3, #1
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d011      	beq.n	8006f4c <HAL_UART_IRQHandler+0xec>
 8006f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00b      	beq.n	8006f4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2202      	movs	r2, #2
 8006f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f42:	f043 0204 	orr.w	r2, r3, #4
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f50:	f003 0304 	and.w	r3, r3, #4
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d011      	beq.n	8006f7c <HAL_UART_IRQHandler+0x11c>
 8006f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00b      	beq.n	8006f7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2204      	movs	r2, #4
 8006f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f72:	f043 0202 	orr.w	r2, r3, #2
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f80:	f003 0308 	and.w	r3, r3, #8
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d017      	beq.n	8006fb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f8c:	f003 0320 	and.w	r3, r3, #32
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d105      	bne.n	8006fa0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00b      	beq.n	8006fb8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2208      	movs	r2, #8
 8006fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fae:	f043 0208 	orr.w	r2, r3, #8
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d012      	beq.n	8006fea <HAL_UART_IRQHandler+0x18a>
 8006fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00c      	beq.n	8006fea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fe0:	f043 0220 	orr.w	r2, r3, #32
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 8230 	beq.w	8007456 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ffa:	f003 0320 	and.w	r3, r3, #32
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00d      	beq.n	800701e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007006:	f003 0320 	and.w	r3, r3, #32
 800700a:	2b00      	cmp	r3, #0
 800700c:	d007      	beq.n	800701e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007024:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007032:	2b40      	cmp	r3, #64	@ 0x40
 8007034:	d005      	beq.n	8007042 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800703a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800703e:	2b00      	cmp	r3, #0
 8007040:	d04f      	beq.n	80070e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fee4 	bl	8007e10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007052:	2b40      	cmp	r3, #64	@ 0x40
 8007054:	d141      	bne.n	80070da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3308      	adds	r3, #8
 800705c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800706c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007074:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3308      	adds	r3, #8
 800707e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007082:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007086:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800708e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007092:	e841 2300 	strex	r3, r2, [r1]
 8007096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800709a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1d9      	bne.n	8007056 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d013      	beq.n	80070d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070ae:	4a13      	ldr	r2, [pc, #76]	@ (80070fc <HAL_UART_IRQHandler+0x29c>)
 80070b0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fc fe58 	bl	8003d6c <HAL_DMA_Abort_IT>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d017      	beq.n	80070f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80070cc:	4610      	mov	r0, r2
 80070ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d0:	e00f      	b.n	80070f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f9e8 	bl	80074a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d8:	e00b      	b.n	80070f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f9e4 	bl	80074a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e0:	e007      	b.n	80070f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f9e0 	bl	80074a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80070f0:	e1b1      	b.n	8007456 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f2:	bf00      	nop
    return;
 80070f4:	e1af      	b.n	8007456 <HAL_UART_IRQHandler+0x5f6>
 80070f6:	bf00      	nop
 80070f8:	04000120 	.word	0x04000120
 80070fc:	080080c1 	.word	0x080080c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007104:	2b01      	cmp	r3, #1
 8007106:	f040 816a 	bne.w	80073de <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800710a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800710e:	f003 0310 	and.w	r3, r3, #16
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 8163 	beq.w	80073de <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800711c:	f003 0310 	and.w	r3, r3, #16
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 815c 	beq.w	80073de <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2210      	movs	r2, #16
 800712c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007138:	2b40      	cmp	r3, #64	@ 0x40
 800713a:	f040 80d4 	bne.w	80072e6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800714a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 80ad 	beq.w	80072ae <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800715a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800715e:	429a      	cmp	r2, r3
 8007160:	f080 80a5 	bcs.w	80072ae <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800716a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b00      	cmp	r3, #0
 800717c:	f040 8086 	bne.w	800728c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800718c:	e853 3f00 	ldrex	r3, [r3]
 8007190:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007194:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800719c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	461a      	mov	r2, r3
 80071a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80071aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80071b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80071ba:	e841 2300 	strex	r3, r2, [r1]
 80071be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80071c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1da      	bne.n	8007180 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3308      	adds	r3, #8
 80071d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80071da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071dc:	f023 0301 	bic.w	r3, r3, #1
 80071e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3308      	adds	r3, #8
 80071ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80071ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80071f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80071f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80071fa:	e841 2300 	strex	r3, r2, [r1]
 80071fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007200:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1e1      	bne.n	80071ca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3308      	adds	r3, #8
 800720c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007216:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007218:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800721c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3308      	adds	r3, #8
 8007226:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800722a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800722c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007230:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007232:	e841 2300 	strex	r3, r2, [r1]
 8007236:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007238:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1e3      	bne.n	8007206 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2220      	movs	r2, #32
 8007242:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007254:	e853 3f00 	ldrex	r3, [r3]
 8007258:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800725a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800725c:	f023 0310 	bic.w	r3, r3, #16
 8007260:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	461a      	mov	r2, r3
 800726a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800726e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007270:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007272:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007274:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007276:	e841 2300 	strex	r3, r2, [r1]
 800727a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800727c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1e4      	bne.n	800724c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007286:	4618      	mov	r0, r3
 8007288:	f7fc fd32 	bl	8003cf0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800729e:	b29b      	uxth	r3, r3
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	4619      	mov	r1, r3
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7fb ff2c 	bl	8003104 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80072ac:	e0d5      	b.n	800745a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80072b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072b8:	429a      	cmp	r2, r3
 80072ba:	f040 80ce 	bne.w	800745a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0320 	and.w	r3, r3, #32
 80072ca:	2b20      	cmp	r3, #32
 80072cc:	f040 80c5 	bne.w	800745a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7fb ff10 	bl	8003104 <HAL_UARTEx_RxEventCallback>
      return;
 80072e4:	e0b9      	b.n	800745a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007300:	b29b      	uxth	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 80ab 	beq.w	800745e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8007308:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 80a6 	beq.w	800745e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731a:	e853 3f00 	ldrex	r3, [r3]
 800731e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007322:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007326:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007334:	647b      	str	r3, [r7, #68]	@ 0x44
 8007336:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007338:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800733a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800733c:	e841 2300 	strex	r3, r2, [r1]
 8007340:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1e4      	bne.n	8007312 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3308      	adds	r3, #8
 800734e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007352:	e853 3f00 	ldrex	r3, [r3]
 8007356:	623b      	str	r3, [r7, #32]
   return(result);
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	f023 0301 	bic.w	r3, r3, #1
 800735e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3308      	adds	r3, #8
 8007368:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800736c:	633a      	str	r2, [r7, #48]	@ 0x30
 800736e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007374:	e841 2300 	strex	r3, r2, [r1]
 8007378:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800737a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e3      	bne.n	8007348 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2220      	movs	r2, #32
 8007384:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f023 0310 	bic.w	r3, r3, #16
 80073a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	461a      	mov	r2, r3
 80073b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80073b6:	61fb      	str	r3, [r7, #28]
 80073b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ba:	69b9      	ldr	r1, [r7, #24]
 80073bc:	69fa      	ldr	r2, [r7, #28]
 80073be:	e841 2300 	strex	r3, r2, [r1]
 80073c2:	617b      	str	r3, [r7, #20]
   return(result);
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1e4      	bne.n	8007394 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2202      	movs	r2, #2
 80073ce:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7fb fe94 	bl	8003104 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073dc:	e03f      	b.n	800745e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00e      	beq.n	8007408 <HAL_UART_IRQHandler+0x5a8>
 80073ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d008      	beq.n	8007408 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80073fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fe9d 	bl	8008140 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007406:	e02d      	b.n	8007464 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800740c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00e      	beq.n	8007432 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800741c:	2b00      	cmp	r3, #0
 800741e:	d008      	beq.n	8007432 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007424:	2b00      	cmp	r3, #0
 8007426:	d01c      	beq.n	8007462 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	4798      	blx	r3
    }
    return;
 8007430:	e017      	b.n	8007462 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800743a:	2b00      	cmp	r3, #0
 800743c:	d012      	beq.n	8007464 <HAL_UART_IRQHandler+0x604>
 800743e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00c      	beq.n	8007464 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fe4e 	bl	80080ec <UART_EndTransmit_IT>
    return;
 8007450:	e008      	b.n	8007464 <HAL_UART_IRQHandler+0x604>
      return;
 8007452:	bf00      	nop
 8007454:	e006      	b.n	8007464 <HAL_UART_IRQHandler+0x604>
    return;
 8007456:	bf00      	nop
 8007458:	e004      	b.n	8007464 <HAL_UART_IRQHandler+0x604>
      return;
 800745a:	bf00      	nop
 800745c:	e002      	b.n	8007464 <HAL_UART_IRQHandler+0x604>
      return;
 800745e:	bf00      	nop
 8007460:	e000      	b.n	8007464 <HAL_UART_IRQHandler+0x604>
    return;
 8007462:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007464:	37e8      	adds	r7, #232	@ 0xe8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop

0800746c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074c0:	b08a      	sub	sp, #40	@ 0x28
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	431a      	orrs	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	431a      	orrs	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	4bb4      	ldr	r3, [pc, #720]	@ (80077bc <UART_SetConfig+0x300>)
 80074ec:	4013      	ands	r3, r2
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	6812      	ldr	r2, [r2, #0]
 80074f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074f4:	430b      	orrs	r3, r1
 80074f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4aa9      	ldr	r2, [pc, #676]	@ (80077c0 <UART_SetConfig+0x304>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d004      	beq.n	8007528 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007524:	4313      	orrs	r3, r2
 8007526:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007538:	430a      	orrs	r2, r1
 800753a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4aa0      	ldr	r2, [pc, #640]	@ (80077c4 <UART_SetConfig+0x308>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d126      	bne.n	8007594 <UART_SetConfig+0xd8>
 8007546:	4ba0      	ldr	r3, [pc, #640]	@ (80077c8 <UART_SetConfig+0x30c>)
 8007548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800754c:	f003 0303 	and.w	r3, r3, #3
 8007550:	2b03      	cmp	r3, #3
 8007552:	d81b      	bhi.n	800758c <UART_SetConfig+0xd0>
 8007554:	a201      	add	r2, pc, #4	@ (adr r2, 800755c <UART_SetConfig+0xa0>)
 8007556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755a:	bf00      	nop
 800755c:	0800756d 	.word	0x0800756d
 8007560:	0800757d 	.word	0x0800757d
 8007564:	08007575 	.word	0x08007575
 8007568:	08007585 	.word	0x08007585
 800756c:	2301      	movs	r3, #1
 800756e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007572:	e080      	b.n	8007676 <UART_SetConfig+0x1ba>
 8007574:	2302      	movs	r3, #2
 8007576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800757a:	e07c      	b.n	8007676 <UART_SetConfig+0x1ba>
 800757c:	2304      	movs	r3, #4
 800757e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007582:	e078      	b.n	8007676 <UART_SetConfig+0x1ba>
 8007584:	2308      	movs	r3, #8
 8007586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800758a:	e074      	b.n	8007676 <UART_SetConfig+0x1ba>
 800758c:	2310      	movs	r3, #16
 800758e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007592:	e070      	b.n	8007676 <UART_SetConfig+0x1ba>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a8c      	ldr	r2, [pc, #560]	@ (80077cc <UART_SetConfig+0x310>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d138      	bne.n	8007610 <UART_SetConfig+0x154>
 800759e:	4b8a      	ldr	r3, [pc, #552]	@ (80077c8 <UART_SetConfig+0x30c>)
 80075a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075a4:	f003 030c 	and.w	r3, r3, #12
 80075a8:	2b0c      	cmp	r3, #12
 80075aa:	d82d      	bhi.n	8007608 <UART_SetConfig+0x14c>
 80075ac:	a201      	add	r2, pc, #4	@ (adr r2, 80075b4 <UART_SetConfig+0xf8>)
 80075ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b2:	bf00      	nop
 80075b4:	080075e9 	.word	0x080075e9
 80075b8:	08007609 	.word	0x08007609
 80075bc:	08007609 	.word	0x08007609
 80075c0:	08007609 	.word	0x08007609
 80075c4:	080075f9 	.word	0x080075f9
 80075c8:	08007609 	.word	0x08007609
 80075cc:	08007609 	.word	0x08007609
 80075d0:	08007609 	.word	0x08007609
 80075d4:	080075f1 	.word	0x080075f1
 80075d8:	08007609 	.word	0x08007609
 80075dc:	08007609 	.word	0x08007609
 80075e0:	08007609 	.word	0x08007609
 80075e4:	08007601 	.word	0x08007601
 80075e8:	2300      	movs	r3, #0
 80075ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ee:	e042      	b.n	8007676 <UART_SetConfig+0x1ba>
 80075f0:	2302      	movs	r3, #2
 80075f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075f6:	e03e      	b.n	8007676 <UART_SetConfig+0x1ba>
 80075f8:	2304      	movs	r3, #4
 80075fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075fe:	e03a      	b.n	8007676 <UART_SetConfig+0x1ba>
 8007600:	2308      	movs	r3, #8
 8007602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007606:	e036      	b.n	8007676 <UART_SetConfig+0x1ba>
 8007608:	2310      	movs	r3, #16
 800760a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800760e:	e032      	b.n	8007676 <UART_SetConfig+0x1ba>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a6a      	ldr	r2, [pc, #424]	@ (80077c0 <UART_SetConfig+0x304>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d12a      	bne.n	8007670 <UART_SetConfig+0x1b4>
 800761a:	4b6b      	ldr	r3, [pc, #428]	@ (80077c8 <UART_SetConfig+0x30c>)
 800761c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007620:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007624:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007628:	d01a      	beq.n	8007660 <UART_SetConfig+0x1a4>
 800762a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800762e:	d81b      	bhi.n	8007668 <UART_SetConfig+0x1ac>
 8007630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007634:	d00c      	beq.n	8007650 <UART_SetConfig+0x194>
 8007636:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800763a:	d815      	bhi.n	8007668 <UART_SetConfig+0x1ac>
 800763c:	2b00      	cmp	r3, #0
 800763e:	d003      	beq.n	8007648 <UART_SetConfig+0x18c>
 8007640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007644:	d008      	beq.n	8007658 <UART_SetConfig+0x19c>
 8007646:	e00f      	b.n	8007668 <UART_SetConfig+0x1ac>
 8007648:	2300      	movs	r3, #0
 800764a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800764e:	e012      	b.n	8007676 <UART_SetConfig+0x1ba>
 8007650:	2302      	movs	r3, #2
 8007652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007656:	e00e      	b.n	8007676 <UART_SetConfig+0x1ba>
 8007658:	2304      	movs	r3, #4
 800765a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800765e:	e00a      	b.n	8007676 <UART_SetConfig+0x1ba>
 8007660:	2308      	movs	r3, #8
 8007662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007666:	e006      	b.n	8007676 <UART_SetConfig+0x1ba>
 8007668:	2310      	movs	r3, #16
 800766a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800766e:	e002      	b.n	8007676 <UART_SetConfig+0x1ba>
 8007670:	2310      	movs	r3, #16
 8007672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a51      	ldr	r2, [pc, #324]	@ (80077c0 <UART_SetConfig+0x304>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d17a      	bne.n	8007776 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007680:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007684:	2b08      	cmp	r3, #8
 8007686:	d824      	bhi.n	80076d2 <UART_SetConfig+0x216>
 8007688:	a201      	add	r2, pc, #4	@ (adr r2, 8007690 <UART_SetConfig+0x1d4>)
 800768a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768e:	bf00      	nop
 8007690:	080076b5 	.word	0x080076b5
 8007694:	080076d3 	.word	0x080076d3
 8007698:	080076bd 	.word	0x080076bd
 800769c:	080076d3 	.word	0x080076d3
 80076a0:	080076c3 	.word	0x080076c3
 80076a4:	080076d3 	.word	0x080076d3
 80076a8:	080076d3 	.word	0x080076d3
 80076ac:	080076d3 	.word	0x080076d3
 80076b0:	080076cb 	.word	0x080076cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076b4:	f7fe fce2 	bl	800607c <HAL_RCC_GetPCLK1Freq>
 80076b8:	61f8      	str	r0, [r7, #28]
        break;
 80076ba:	e010      	b.n	80076de <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076bc:	4b44      	ldr	r3, [pc, #272]	@ (80077d0 <UART_SetConfig+0x314>)
 80076be:	61fb      	str	r3, [r7, #28]
        break;
 80076c0:	e00d      	b.n	80076de <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076c2:	f7fe fc43 	bl	8005f4c <HAL_RCC_GetSysClockFreq>
 80076c6:	61f8      	str	r0, [r7, #28]
        break;
 80076c8:	e009      	b.n	80076de <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076ce:	61fb      	str	r3, [r7, #28]
        break;
 80076d0:	e005      	b.n	80076de <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80076d2:	2300      	movs	r3, #0
 80076d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80076dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 8107 	beq.w	80078f4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	4613      	mov	r3, r2
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	4413      	add	r3, r2
 80076f0:	69fa      	ldr	r2, [r7, #28]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d305      	bcc.n	8007702 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076fc:	69fa      	ldr	r2, [r7, #28]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d903      	bls.n	800770a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007708:	e0f4      	b.n	80078f4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	2200      	movs	r2, #0
 800770e:	461c      	mov	r4, r3
 8007710:	4615      	mov	r5, r2
 8007712:	f04f 0200 	mov.w	r2, #0
 8007716:	f04f 0300 	mov.w	r3, #0
 800771a:	022b      	lsls	r3, r5, #8
 800771c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007720:	0222      	lsls	r2, r4, #8
 8007722:	68f9      	ldr	r1, [r7, #12]
 8007724:	6849      	ldr	r1, [r1, #4]
 8007726:	0849      	lsrs	r1, r1, #1
 8007728:	2000      	movs	r0, #0
 800772a:	4688      	mov	r8, r1
 800772c:	4681      	mov	r9, r0
 800772e:	eb12 0a08 	adds.w	sl, r2, r8
 8007732:	eb43 0b09 	adc.w	fp, r3, r9
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	603b      	str	r3, [r7, #0]
 800773e:	607a      	str	r2, [r7, #4]
 8007740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007744:	4650      	mov	r0, sl
 8007746:	4659      	mov	r1, fp
 8007748:	f7f8 fde2 	bl	8000310 <__aeabi_uldivmod>
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	4613      	mov	r3, r2
 8007752:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800775a:	d308      	bcc.n	800776e <UART_SetConfig+0x2b2>
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007762:	d204      	bcs.n	800776e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	69ba      	ldr	r2, [r7, #24]
 800776a:	60da      	str	r2, [r3, #12]
 800776c:	e0c2      	b.n	80078f4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007774:	e0be      	b.n	80078f4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800777e:	d16a      	bne.n	8007856 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007780:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007784:	2b08      	cmp	r3, #8
 8007786:	d834      	bhi.n	80077f2 <UART_SetConfig+0x336>
 8007788:	a201      	add	r2, pc, #4	@ (adr r2, 8007790 <UART_SetConfig+0x2d4>)
 800778a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778e:	bf00      	nop
 8007790:	080077b5 	.word	0x080077b5
 8007794:	080077d5 	.word	0x080077d5
 8007798:	080077dd 	.word	0x080077dd
 800779c:	080077f3 	.word	0x080077f3
 80077a0:	080077e3 	.word	0x080077e3
 80077a4:	080077f3 	.word	0x080077f3
 80077a8:	080077f3 	.word	0x080077f3
 80077ac:	080077f3 	.word	0x080077f3
 80077b0:	080077eb 	.word	0x080077eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077b4:	f7fe fc62 	bl	800607c <HAL_RCC_GetPCLK1Freq>
 80077b8:	61f8      	str	r0, [r7, #28]
        break;
 80077ba:	e020      	b.n	80077fe <UART_SetConfig+0x342>
 80077bc:	efff69f3 	.word	0xefff69f3
 80077c0:	40008000 	.word	0x40008000
 80077c4:	40013800 	.word	0x40013800
 80077c8:	40021000 	.word	0x40021000
 80077cc:	40004400 	.word	0x40004400
 80077d0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077d4:	f7fe fc68 	bl	80060a8 <HAL_RCC_GetPCLK2Freq>
 80077d8:	61f8      	str	r0, [r7, #28]
        break;
 80077da:	e010      	b.n	80077fe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077dc:	4b4c      	ldr	r3, [pc, #304]	@ (8007910 <UART_SetConfig+0x454>)
 80077de:	61fb      	str	r3, [r7, #28]
        break;
 80077e0:	e00d      	b.n	80077fe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077e2:	f7fe fbb3 	bl	8005f4c <HAL_RCC_GetSysClockFreq>
 80077e6:	61f8      	str	r0, [r7, #28]
        break;
 80077e8:	e009      	b.n	80077fe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077ee:	61fb      	str	r3, [r7, #28]
        break;
 80077f0:	e005      	b.n	80077fe <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80077fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d077      	beq.n	80078f4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	005a      	lsls	r2, r3, #1
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	085b      	lsrs	r3, r3, #1
 800780e:	441a      	add	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	fbb2 f3f3 	udiv	r3, r2, r3
 8007818:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	2b0f      	cmp	r3, #15
 800781e:	d916      	bls.n	800784e <UART_SetConfig+0x392>
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007826:	d212      	bcs.n	800784e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	b29b      	uxth	r3, r3
 800782c:	f023 030f 	bic.w	r3, r3, #15
 8007830:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	085b      	lsrs	r3, r3, #1
 8007836:	b29b      	uxth	r3, r3
 8007838:	f003 0307 	and.w	r3, r3, #7
 800783c:	b29a      	uxth	r2, r3
 800783e:	8afb      	ldrh	r3, [r7, #22]
 8007840:	4313      	orrs	r3, r2
 8007842:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	8afa      	ldrh	r2, [r7, #22]
 800784a:	60da      	str	r2, [r3, #12]
 800784c:	e052      	b.n	80078f4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007854:	e04e      	b.n	80078f4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007856:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800785a:	2b08      	cmp	r3, #8
 800785c:	d827      	bhi.n	80078ae <UART_SetConfig+0x3f2>
 800785e:	a201      	add	r2, pc, #4	@ (adr r2, 8007864 <UART_SetConfig+0x3a8>)
 8007860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007864:	08007889 	.word	0x08007889
 8007868:	08007891 	.word	0x08007891
 800786c:	08007899 	.word	0x08007899
 8007870:	080078af 	.word	0x080078af
 8007874:	0800789f 	.word	0x0800789f
 8007878:	080078af 	.word	0x080078af
 800787c:	080078af 	.word	0x080078af
 8007880:	080078af 	.word	0x080078af
 8007884:	080078a7 	.word	0x080078a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007888:	f7fe fbf8 	bl	800607c <HAL_RCC_GetPCLK1Freq>
 800788c:	61f8      	str	r0, [r7, #28]
        break;
 800788e:	e014      	b.n	80078ba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007890:	f7fe fc0a 	bl	80060a8 <HAL_RCC_GetPCLK2Freq>
 8007894:	61f8      	str	r0, [r7, #28]
        break;
 8007896:	e010      	b.n	80078ba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007898:	4b1d      	ldr	r3, [pc, #116]	@ (8007910 <UART_SetConfig+0x454>)
 800789a:	61fb      	str	r3, [r7, #28]
        break;
 800789c:	e00d      	b.n	80078ba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800789e:	f7fe fb55 	bl	8005f4c <HAL_RCC_GetSysClockFreq>
 80078a2:	61f8      	str	r0, [r7, #28]
        break;
 80078a4:	e009      	b.n	80078ba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078aa:	61fb      	str	r3, [r7, #28]
        break;
 80078ac:	e005      	b.n	80078ba <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80078b8:	bf00      	nop
    }

    if (pclk != 0U)
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d019      	beq.n	80078f4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	085a      	lsrs	r2, r3, #1
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	441a      	add	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	2b0f      	cmp	r3, #15
 80078d8:	d909      	bls.n	80078ee <UART_SetConfig+0x432>
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078e0:	d205      	bcs.n	80078ee <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	60da      	str	r2, [r3, #12]
 80078ec:	e002      	b.n	80078f4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007900:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007904:	4618      	mov	r0, r3
 8007906:	3728      	adds	r7, #40	@ 0x28
 8007908:	46bd      	mov	sp, r7
 800790a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800790e:	bf00      	nop
 8007910:	00f42400 	.word	0x00f42400

08007914 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007920:	f003 0308 	and.w	r3, r3, #8
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00a      	beq.n	800793e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	430a      	orrs	r2, r1
 800793c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007964:	f003 0302 	and.w	r3, r3, #2
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00a      	beq.n	8007982 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007986:	f003 0304 	and.w	r3, r3, #4
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00a      	beq.n	80079a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a8:	f003 0310 	and.w	r3, r3, #16
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00a      	beq.n	80079c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ca:	f003 0320 	and.w	r3, r3, #32
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00a      	beq.n	80079e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	430a      	orrs	r2, r1
 80079e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d01a      	beq.n	8007a2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a12:	d10a      	bne.n	8007a2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00a      	beq.n	8007a4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	605a      	str	r2, [r3, #4]
  }
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b098      	sub	sp, #96	@ 0x60
 8007a5c:	af02      	add	r7, sp, #8
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a68:	f7fb fd4c 	bl	8003504 <HAL_GetTick>
 8007a6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0308 	and.w	r3, r3, #8
 8007a78:	2b08      	cmp	r3, #8
 8007a7a:	d12e      	bne.n	8007ada <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a84:	2200      	movs	r2, #0
 8007a86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f88c 	bl	8007ba8 <UART_WaitOnFlagUntilTimeout>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d021      	beq.n	8007ada <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007aaa:	653b      	str	r3, [r7, #80]	@ 0x50
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ab6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007aba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007abc:	e841 2300 	strex	r3, r2, [r1]
 8007ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e6      	bne.n	8007a96 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2220      	movs	r2, #32
 8007acc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e062      	b.n	8007ba0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0304 	and.w	r3, r3, #4
 8007ae4:	2b04      	cmp	r3, #4
 8007ae6:	d149      	bne.n	8007b7c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ae8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007af0:	2200      	movs	r2, #0
 8007af2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f856 	bl	8007ba8 <UART_WaitOnFlagUntilTimeout>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d03c      	beq.n	8007b7c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0a:	e853 3f00 	ldrex	r3, [r3]
 8007b0e:	623b      	str	r3, [r7, #32]
   return(result);
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b20:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b22:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b28:	e841 2300 	strex	r3, r2, [r1]
 8007b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1e6      	bne.n	8007b02 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3308      	adds	r3, #8
 8007b3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	e853 3f00 	ldrex	r3, [r3]
 8007b42:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f023 0301 	bic.w	r3, r3, #1
 8007b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	3308      	adds	r3, #8
 8007b52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b54:	61fa      	str	r2, [r7, #28]
 8007b56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b58:	69b9      	ldr	r1, [r7, #24]
 8007b5a:	69fa      	ldr	r2, [r7, #28]
 8007b5c:	e841 2300 	strex	r3, r2, [r1]
 8007b60:	617b      	str	r3, [r7, #20]
   return(result);
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1e5      	bne.n	8007b34 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e011      	b.n	8007ba0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2220      	movs	r2, #32
 8007b80:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2220      	movs	r2, #32
 8007b86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3758      	adds	r7, #88	@ 0x58
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	603b      	str	r3, [r7, #0]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bb8:	e04f      	b.n	8007c5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bc0:	d04b      	beq.n	8007c5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bc2:	f7fb fc9f 	bl	8003504 <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d302      	bcc.n	8007bd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e04e      	b.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0304 	and.w	r3, r3, #4
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d037      	beq.n	8007c5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2b80      	cmp	r3, #128	@ 0x80
 8007bee:	d034      	beq.n	8007c5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b40      	cmp	r3, #64	@ 0x40
 8007bf4:	d031      	beq.n	8007c5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	f003 0308 	and.w	r3, r3, #8
 8007c00:	2b08      	cmp	r3, #8
 8007c02:	d110      	bne.n	8007c26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2208      	movs	r2, #8
 8007c0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 f8ff 	bl	8007e10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2208      	movs	r2, #8
 8007c16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e029      	b.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	69db      	ldr	r3, [r3, #28]
 8007c2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c34:	d111      	bne.n	8007c5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 f8e5 	bl	8007e10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e00f      	b.n	8007c7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	69da      	ldr	r2, [r3, #28]
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	4013      	ands	r3, r2
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	bf0c      	ite	eq
 8007c6a:	2301      	moveq	r3, #1
 8007c6c:	2300      	movne	r3, #0
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	461a      	mov	r2, r3
 8007c72:	79fb      	ldrb	r3, [r7, #7]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d0a0      	beq.n	8007bba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
	...

08007c84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b096      	sub	sp, #88	@ 0x58
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	88fa      	ldrh	r2, [r7, #6]
 8007c9c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2222      	movs	r2, #34	@ 0x22
 8007cac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d028      	beq.n	8007d0a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cbc:	4a3e      	ldr	r2, [pc, #248]	@ (8007db8 <UART_Start_Receive_DMA+0x134>)
 8007cbe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cc4:	4a3d      	ldr	r2, [pc, #244]	@ (8007dbc <UART_Start_Receive_DMA+0x138>)
 8007cc6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ccc:	4a3c      	ldr	r2, [pc, #240]	@ (8007dc0 <UART_Start_Receive_DMA+0x13c>)
 8007cce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3324      	adds	r3, #36	@ 0x24
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ce8:	461a      	mov	r2, r3
 8007cea:	88fb      	ldrh	r3, [r7, #6]
 8007cec:	f7fb ffa0 	bl	8003c30 <HAL_DMA_Start_IT>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d009      	beq.n	8007d0a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2210      	movs	r2, #16
 8007cfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2220      	movs	r2, #32
 8007d02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e051      	b.n	8007dae <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d018      	beq.n	8007d44 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d26:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d32:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007d36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e6      	bne.n	8007d12 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3308      	adds	r3, #8
 8007d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4e:	e853 3f00 	ldrex	r3, [r3]
 8007d52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d56:	f043 0301 	orr.w	r3, r3, #1
 8007d5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3308      	adds	r3, #8
 8007d62:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007d64:	637a      	str	r2, [r7, #52]	@ 0x34
 8007d66:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d6c:	e841 2300 	strex	r3, r2, [r1]
 8007d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1e5      	bne.n	8007d44 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3308      	adds	r3, #8
 8007d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	e853 3f00 	ldrex	r3, [r3]
 8007d86:	613b      	str	r3, [r7, #16]
   return(result);
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3308      	adds	r3, #8
 8007d96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d98:	623a      	str	r2, [r7, #32]
 8007d9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9c:	69f9      	ldr	r1, [r7, #28]
 8007d9e:	6a3a      	ldr	r2, [r7, #32]
 8007da0:	e841 2300 	strex	r3, r2, [r1]
 8007da4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1e5      	bne.n	8007d78 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3758      	adds	r7, #88	@ 0x58
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	08007ed9 	.word	0x08007ed9
 8007dbc:	08008005 	.word	0x08008005
 8007dc0:	08008043 	.word	0x08008043

08007dc4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b089      	sub	sp, #36	@ 0x24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007de0:	61fb      	str	r3, [r7, #28]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	61bb      	str	r3, [r7, #24]
 8007dec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	6979      	ldr	r1, [r7, #20]
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	613b      	str	r3, [r7, #16]
   return(result);
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e6      	bne.n	8007dcc <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2220      	movs	r2, #32
 8007e02:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007e04:	bf00      	nop
 8007e06:	3724      	adds	r7, #36	@ 0x24
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b095      	sub	sp, #84	@ 0x54
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e20:	e853 3f00 	ldrex	r3, [r3]
 8007e24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e36:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e38:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e3e:	e841 2300 	strex	r3, r2, [r1]
 8007e42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1e6      	bne.n	8007e18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3308      	adds	r3, #8
 8007e50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	6a3b      	ldr	r3, [r7, #32]
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	f023 0301 	bic.w	r3, r3, #1
 8007e60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3308      	adds	r3, #8
 8007e68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e72:	e841 2300 	strex	r3, r2, [r1]
 8007e76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1e5      	bne.n	8007e4a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d118      	bne.n	8007eb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	f023 0310 	bic.w	r3, r3, #16
 8007e9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ea4:	61bb      	str	r3, [r7, #24]
 8007ea6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	6979      	ldr	r1, [r7, #20]
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e6      	bne.n	8007e86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007ecc:	bf00      	nop
 8007ece:	3754      	adds	r7, #84	@ 0x54
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b09c      	sub	sp, #112	@ 0x70
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 0320 	and.w	r3, r3, #32
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d171      	bne.n	8007fd8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007ef4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007efc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f04:	e853 3f00 	ldrex	r3, [r3]
 8007f08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	461a      	mov	r2, r3
 8007f18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f1c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f22:	e841 2300 	strex	r3, r2, [r1]
 8007f26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1e6      	bne.n	8007efc <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	3308      	adds	r3, #8
 8007f34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f38:	e853 3f00 	ldrex	r3, [r3]
 8007f3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f40:	f023 0301 	bic.w	r3, r3, #1
 8007f44:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3308      	adds	r3, #8
 8007f4c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007f4e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007f50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f56:	e841 2300 	strex	r3, r2, [r1]
 8007f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1e5      	bne.n	8007f2e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3308      	adds	r3, #8
 8007f68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	623b      	str	r3, [r7, #32]
   return(result);
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f78:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3308      	adds	r3, #8
 8007f80:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007f82:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f8a:	e841 2300 	strex	r3, r2, [r1]
 8007f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1e5      	bne.n	8007f62 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f98:	2220      	movs	r2, #32
 8007f9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d118      	bne.n	8007fd8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	e853 3f00 	ldrex	r3, [r3]
 8007fb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f023 0310 	bic.w	r3, r3, #16
 8007fba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fc4:	61fb      	str	r3, [r7, #28]
 8007fc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc8:	69b9      	ldr	r1, [r7, #24]
 8007fca:	69fa      	ldr	r2, [r7, #28]
 8007fcc:	e841 2300 	strex	r3, r2, [r1]
 8007fd0:	617b      	str	r3, [r7, #20]
   return(result);
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e6      	bne.n	8007fa6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fda:	2200      	movs	r2, #0
 8007fdc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d107      	bne.n	8007ff6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fe6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fe8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007fec:	4619      	mov	r1, r3
 8007fee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007ff0:	f7fb f888 	bl	8003104 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ff4:	e002      	b.n	8007ffc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007ff6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007ff8:	f7ff fa42 	bl	8007480 <HAL_UART_RxCpltCallback>
}
 8007ffc:	bf00      	nop
 8007ffe:	3770      	adds	r7, #112	@ 0x70
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008010:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2201      	movs	r2, #1
 8008016:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800801c:	2b01      	cmp	r3, #1
 800801e:	d109      	bne.n	8008034 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008026:	085b      	lsrs	r3, r3, #1
 8008028:	b29b      	uxth	r3, r3
 800802a:	4619      	mov	r1, r3
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f7fb f869 	bl	8003104 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008032:	e002      	b.n	800803a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f7ff fa2d 	bl	8007494 <HAL_UART_RxHalfCpltCallback>
}
 800803a:	bf00      	nop
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b086      	sub	sp, #24
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800804e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008054:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800805c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008068:	2b80      	cmp	r3, #128	@ 0x80
 800806a:	d109      	bne.n	8008080 <UART_DMAError+0x3e>
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	2b21      	cmp	r3, #33	@ 0x21
 8008070:	d106      	bne.n	8008080 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	2200      	movs	r2, #0
 8008076:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800807a:	6978      	ldr	r0, [r7, #20]
 800807c:	f7ff fea2 	bl	8007dc4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800808a:	2b40      	cmp	r3, #64	@ 0x40
 800808c:	d109      	bne.n	80080a2 <UART_DMAError+0x60>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b22      	cmp	r3, #34	@ 0x22
 8008092:	d106      	bne.n	80080a2 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	2200      	movs	r2, #0
 8008098:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800809c:	6978      	ldr	r0, [r7, #20]
 800809e:	f7ff feb7 	bl	8007e10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080a8:	f043 0210 	orr.w	r2, r3, #16
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080b2:	6978      	ldr	r0, [r7, #20]
 80080b4:	f7ff f9f8 	bl	80074a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080b8:	bf00      	nop
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f7ff f9e2 	bl	80074a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080e4:	bf00      	nop
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b088      	sub	sp, #32
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	60bb      	str	r3, [r7, #8]
   return(result);
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008108:	61fb      	str	r3, [r7, #28]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	61bb      	str	r3, [r7, #24]
 8008114:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008116:	6979      	ldr	r1, [r7, #20]
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	e841 2300 	strex	r3, r2, [r1]
 800811e:	613b      	str	r3, [r7, #16]
   return(result);
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1e6      	bne.n	80080f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2220      	movs	r2, #32
 800812a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7ff f99a 	bl	800746c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008138:	bf00      	nop
 800813a:	3720      	adds	r7, #32
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b08c      	sub	sp, #48	@ 0x30
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	4613      	mov	r3, r2
 8008160:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008168:	2b20      	cmp	r3, #32
 800816a:	d142      	bne.n	80081f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008172:	88fb      	ldrh	r3, [r7, #6]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e03b      	b.n	80081f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2201      	movs	r2, #1
 8008180:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008188:	88fb      	ldrh	r3, [r7, #6]
 800818a:	461a      	mov	r2, r3
 800818c:	68b9      	ldr	r1, [r7, #8]
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f7ff fd78 	bl	8007c84 <UART_Start_Receive_DMA>
 8008194:	4603      	mov	r3, r0
 8008196:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800819a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d124      	bne.n	80081ec <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d11d      	bne.n	80081e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2210      	movs	r2, #16
 80081b0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	e853 3f00 	ldrex	r3, [r3]
 80081be:	617b      	str	r3, [r7, #20]
   return(result);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f043 0310 	orr.w	r3, r3, #16
 80081c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	461a      	mov	r2, r3
 80081ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80081d2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d4:	6a39      	ldr	r1, [r7, #32]
 80081d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081d8:	e841 2300 	strex	r3, r2, [r1]
 80081dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1e6      	bne.n	80081b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80081e4:	e002      	b.n	80081ec <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80081ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80081f0:	e000      	b.n	80081f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80081f2:	2302      	movs	r3, #2
  }
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3730      	adds	r7, #48	@ 0x30
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	4603      	mov	r3, r0
 8008204:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008206:	2300      	movs	r3, #0
 8008208:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800820a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800820e:	2b84      	cmp	r3, #132	@ 0x84
 8008210:	d005      	beq.n	800821e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008212:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	4413      	add	r3, r2
 800821a:	3303      	adds	r3, #3
 800821c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800821e:	68fb      	ldr	r3, [r7, #12]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008230:	f000 fafc 	bl	800882c <vTaskStartScheduler>
  
  return osOK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	bd80      	pop	{r7, pc}

0800823a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800823a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800823c:	b089      	sub	sp, #36	@ 0x24
 800823e:	af04      	add	r7, sp, #16
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d020      	beq.n	800828e <osThreadCreate+0x54>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d01c      	beq.n	800828e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685c      	ldr	r4, [r3, #4]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	691e      	ldr	r6, [r3, #16]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008266:	4618      	mov	r0, r3
 8008268:	f7ff ffc8 	bl	80081fc <makeFreeRtosPriority>
 800826c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008276:	9202      	str	r2, [sp, #8]
 8008278:	9301      	str	r3, [sp, #4]
 800827a:	9100      	str	r1, [sp, #0]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	4632      	mov	r2, r6
 8008280:	4629      	mov	r1, r5
 8008282:	4620      	mov	r0, r4
 8008284:	f000 f8ed 	bl	8008462 <xTaskCreateStatic>
 8008288:	4603      	mov	r3, r0
 800828a:	60fb      	str	r3, [r7, #12]
 800828c:	e01c      	b.n	80082c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685c      	ldr	r4, [r3, #4]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800829a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7ff ffaa 	bl	80081fc <makeFreeRtosPriority>
 80082a8:	4602      	mov	r2, r0
 80082aa:	f107 030c 	add.w	r3, r7, #12
 80082ae:	9301      	str	r3, [sp, #4]
 80082b0:	9200      	str	r2, [sp, #0]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	4632      	mov	r2, r6
 80082b6:	4629      	mov	r1, r5
 80082b8:	4620      	mov	r0, r4
 80082ba:	f000 f932 	bl	8008522 <xTaskCreate>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d001      	beq.n	80082c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80082c4:	2300      	movs	r3, #0
 80082c6:	e000      	b.n	80082ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80082c8:	68fb      	ldr	r3, [r7, #12]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080082d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d001      	beq.n	80082e8 <osDelay+0x16>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	e000      	b.n	80082ea <osDelay+0x18>
 80082e8:	2301      	movs	r3, #1
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 fa68 	bl	80087c0 <vTaskDelay>
  
  return osOK;
 80082f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80082fa:	b480      	push	{r7}
 80082fc:	b083      	sub	sp, #12
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f103 0208 	add.w	r2, r3, #8
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008312:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f103 0208 	add.w	r2, r3, #8
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f103 0208 	add.w	r2, r3, #8
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800832e:	bf00      	nop
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800833a:	b480      	push	{r7}
 800833c:	b083      	sub	sp, #12
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	689a      	ldr	r2, [r3, #8]
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	1c5a      	adds	r2, r3, #1
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	601a      	str	r2, [r3, #0]
}
 8008390:	bf00      	nop
 8008392:	3714      	adds	r7, #20
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083b2:	d103      	bne.n	80083bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	e00c      	b.n	80083d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	3308      	adds	r3, #8
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	e002      	b.n	80083ca <vListInsert+0x2e>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	60fb      	str	r3, [r7, #12]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d2f6      	bcs.n	80083c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	685a      	ldr	r2, [r3, #4]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	1c5a      	adds	r2, r3, #1
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	601a      	str	r2, [r3, #0]
}
 8008402:	bf00      	nop
 8008404:	3714      	adds	r7, #20
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800840e:	b480      	push	{r7}
 8008410:	b085      	sub	sp, #20
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	6892      	ldr	r2, [r2, #8]
 8008424:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	6852      	ldr	r2, [r2, #4]
 800842e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	429a      	cmp	r2, r3
 8008438:	d103      	bne.n	8008442 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	689a      	ldr	r2, [r3, #8]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	1e5a      	subs	r2, r3, #1
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008462:	b580      	push	{r7, lr}
 8008464:	b08e      	sub	sp, #56	@ 0x38
 8008466:	af04      	add	r7, sp, #16
 8008468:	60f8      	str	r0, [r7, #12]
 800846a:	60b9      	str	r1, [r7, #8]
 800846c:	607a      	str	r2, [r7, #4]
 800846e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10b      	bne.n	800848e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008488:	bf00      	nop
 800848a:	bf00      	nop
 800848c:	e7fd      	b.n	800848a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800848e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10b      	bne.n	80084ac <xTaskCreateStatic+0x4a>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	61fb      	str	r3, [r7, #28]
}
 80084a6:	bf00      	nop
 80084a8:	bf00      	nop
 80084aa:	e7fd      	b.n	80084a8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084ac:	23a0      	movs	r3, #160	@ 0xa0
 80084ae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80084b4:	d00b      	beq.n	80084ce <xTaskCreateStatic+0x6c>
	__asm volatile
 80084b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	61bb      	str	r3, [r7, #24]
}
 80084c8:	bf00      	nop
 80084ca:	bf00      	nop
 80084cc:	e7fd      	b.n	80084ca <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d01e      	beq.n	8008514 <xTaskCreateStatic+0xb2>
 80084d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d01b      	beq.n	8008514 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084de:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084e4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e8:	2202      	movs	r2, #2
 80084ea:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084ee:	2300      	movs	r3, #0
 80084f0:	9303      	str	r3, [sp, #12]
 80084f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f4:	9302      	str	r3, [sp, #8]
 80084f6:	f107 0314 	add.w	r3, r7, #20
 80084fa:	9301      	str	r3, [sp, #4]
 80084fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	68b9      	ldr	r1, [r7, #8]
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 f850 	bl	80085ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800850c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800850e:	f000 f8ed 	bl	80086ec <prvAddNewTaskToReadyList>
 8008512:	e001      	b.n	8008518 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008514:	2300      	movs	r3, #0
 8008516:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008518:	697b      	ldr	r3, [r7, #20]
	}
 800851a:	4618      	mov	r0, r3
 800851c:	3728      	adds	r7, #40	@ 0x28
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008522:	b580      	push	{r7, lr}
 8008524:	b08c      	sub	sp, #48	@ 0x30
 8008526:	af04      	add	r7, sp, #16
 8008528:	60f8      	str	r0, [r7, #12]
 800852a:	60b9      	str	r1, [r7, #8]
 800852c:	603b      	str	r3, [r7, #0]
 800852e:	4613      	mov	r3, r2
 8008530:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008532:	88fb      	ldrh	r3, [r7, #6]
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4618      	mov	r0, r3
 8008538:	f000 fefe 	bl	8009338 <pvPortMalloc>
 800853c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00e      	beq.n	8008562 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008544:	20a0      	movs	r0, #160	@ 0xa0
 8008546:	f000 fef7 	bl	8009338 <pvPortMalloc>
 800854a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	631a      	str	r2, [r3, #48]	@ 0x30
 8008558:	e005      	b.n	8008566 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800855a:	6978      	ldr	r0, [r7, #20]
 800855c:	f000 ffba 	bl	80094d4 <vPortFree>
 8008560:	e001      	b.n	8008566 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008562:	2300      	movs	r3, #0
 8008564:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d017      	beq.n	800859c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008574:	88fa      	ldrh	r2, [r7, #6]
 8008576:	2300      	movs	r3, #0
 8008578:	9303      	str	r3, [sp, #12]
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	9302      	str	r3, [sp, #8]
 800857e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008580:	9301      	str	r3, [sp, #4]
 8008582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f000 f80e 	bl	80085ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008590:	69f8      	ldr	r0, [r7, #28]
 8008592:	f000 f8ab 	bl	80086ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008596:	2301      	movs	r3, #1
 8008598:	61bb      	str	r3, [r7, #24]
 800859a:	e002      	b.n	80085a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800859c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085a2:	69bb      	ldr	r3, [r7, #24]
	}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3720      	adds	r7, #32
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80085c4:	3b01      	subs	r3, #1
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	f023 0307 	bic.w	r3, r3, #7
 80085d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00b      	beq.n	80085f6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	617b      	str	r3, [r7, #20]
}
 80085f0:	bf00      	nop
 80085f2:	bf00      	nop
 80085f4:	e7fd      	b.n	80085f2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d01f      	beq.n	800863c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085fc:	2300      	movs	r3, #0
 80085fe:	61fb      	str	r3, [r7, #28]
 8008600:	e012      	b.n	8008628 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	4413      	add	r3, r2
 8008608:	7819      	ldrb	r1, [r3, #0]
 800860a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	4413      	add	r3, r2
 8008610:	3334      	adds	r3, #52	@ 0x34
 8008612:	460a      	mov	r2, r1
 8008614:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	4413      	add	r3, r2
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d006      	beq.n	8008630 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	3301      	adds	r3, #1
 8008626:	61fb      	str	r3, [r7, #28]
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	2b0f      	cmp	r3, #15
 800862c:	d9e9      	bls.n	8008602 <prvInitialiseNewTask+0x56>
 800862e:	e000      	b.n	8008632 <prvInitialiseNewTask+0x86>
			{
				break;
 8008630:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800863a:	e003      	b.n	8008644 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800863c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863e:	2200      	movs	r2, #0
 8008640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008646:	2b06      	cmp	r3, #6
 8008648:	d901      	bls.n	800864e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800864a:	2306      	movs	r3, #6
 800864c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800864e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008650:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008652:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008656:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008658:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800865a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865c:	2200      	movs	r2, #0
 800865e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008662:	3304      	adds	r3, #4
 8008664:	4618      	mov	r0, r3
 8008666:	f7ff fe68 	bl	800833a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800866a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866c:	3318      	adds	r3, #24
 800866e:	4618      	mov	r0, r3
 8008670:	f7ff fe63 	bl	800833a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008678:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800867a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867c:	f1c3 0207 	rsb	r2, r3, #7
 8008680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008682:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008688:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800868a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868c:	2200      	movs	r2, #0
 800868e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008694:	2200      	movs	r2, #0
 8008696:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800869a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869c:	334c      	adds	r3, #76	@ 0x4c
 800869e:	224c      	movs	r2, #76	@ 0x4c
 80086a0:	2100      	movs	r1, #0
 80086a2:	4618      	mov	r0, r3
 80086a4:	f001 f87c 	bl	80097a0 <memset>
 80086a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086aa:	4a0d      	ldr	r2, [pc, #52]	@ (80086e0 <prvInitialiseNewTask+0x134>)
 80086ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80086ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b0:	4a0c      	ldr	r2, [pc, #48]	@ (80086e4 <prvInitialiseNewTask+0x138>)
 80086b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80086b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b6:	4a0c      	ldr	r2, [pc, #48]	@ (80086e8 <prvInitialiseNewTask+0x13c>)
 80086b8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	68f9      	ldr	r1, [r7, #12]
 80086be:	69b8      	ldr	r0, [r7, #24]
 80086c0:	f000 fc2a 	bl	8008f18 <pxPortInitialiseStack>
 80086c4:	4602      	mov	r2, r0
 80086c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086d6:	bf00      	nop
 80086d8:	3720      	adds	r7, #32
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	20001318 	.word	0x20001318
 80086e4:	20001380 	.word	0x20001380
 80086e8:	200013e8 	.word	0x200013e8

080086ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086f4:	f000 fd40 	bl	8009178 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086f8:	4b2a      	ldr	r3, [pc, #168]	@ (80087a4 <prvAddNewTaskToReadyList+0xb8>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	3301      	adds	r3, #1
 80086fe:	4a29      	ldr	r2, [pc, #164]	@ (80087a4 <prvAddNewTaskToReadyList+0xb8>)
 8008700:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008702:	4b29      	ldr	r3, [pc, #164]	@ (80087a8 <prvAddNewTaskToReadyList+0xbc>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d109      	bne.n	800871e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800870a:	4a27      	ldr	r2, [pc, #156]	@ (80087a8 <prvAddNewTaskToReadyList+0xbc>)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008710:	4b24      	ldr	r3, [pc, #144]	@ (80087a4 <prvAddNewTaskToReadyList+0xb8>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d110      	bne.n	800873a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008718:	f000 fad4 	bl	8008cc4 <prvInitialiseTaskLists>
 800871c:	e00d      	b.n	800873a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800871e:	4b23      	ldr	r3, [pc, #140]	@ (80087ac <prvAddNewTaskToReadyList+0xc0>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d109      	bne.n	800873a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008726:	4b20      	ldr	r3, [pc, #128]	@ (80087a8 <prvAddNewTaskToReadyList+0xbc>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008730:	429a      	cmp	r2, r3
 8008732:	d802      	bhi.n	800873a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008734:	4a1c      	ldr	r2, [pc, #112]	@ (80087a8 <prvAddNewTaskToReadyList+0xbc>)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800873a:	4b1d      	ldr	r3, [pc, #116]	@ (80087b0 <prvAddNewTaskToReadyList+0xc4>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3301      	adds	r3, #1
 8008740:	4a1b      	ldr	r2, [pc, #108]	@ (80087b0 <prvAddNewTaskToReadyList+0xc4>)
 8008742:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008748:	2201      	movs	r2, #1
 800874a:	409a      	lsls	r2, r3
 800874c:	4b19      	ldr	r3, [pc, #100]	@ (80087b4 <prvAddNewTaskToReadyList+0xc8>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4313      	orrs	r3, r2
 8008752:	4a18      	ldr	r2, [pc, #96]	@ (80087b4 <prvAddNewTaskToReadyList+0xc8>)
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800875a:	4613      	mov	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4a15      	ldr	r2, [pc, #84]	@ (80087b8 <prvAddNewTaskToReadyList+0xcc>)
 8008764:	441a      	add	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	3304      	adds	r3, #4
 800876a:	4619      	mov	r1, r3
 800876c:	4610      	mov	r0, r2
 800876e:	f7ff fdf1 	bl	8008354 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008772:	f000 fd33 	bl	80091dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008776:	4b0d      	ldr	r3, [pc, #52]	@ (80087ac <prvAddNewTaskToReadyList+0xc0>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00e      	beq.n	800879c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800877e:	4b0a      	ldr	r3, [pc, #40]	@ (80087a8 <prvAddNewTaskToReadyList+0xbc>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008788:	429a      	cmp	r2, r3
 800878a:	d207      	bcs.n	800879c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800878c:	4b0b      	ldr	r3, [pc, #44]	@ (80087bc <prvAddNewTaskToReadyList+0xd0>)
 800878e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008792:	601a      	str	r2, [r3, #0]
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800879c:	bf00      	nop
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	2000070c 	.word	0x2000070c
 80087a8:	2000060c 	.word	0x2000060c
 80087ac:	20000718 	.word	0x20000718
 80087b0:	20000728 	.word	0x20000728
 80087b4:	20000714 	.word	0x20000714
 80087b8:	20000610 	.word	0x20000610
 80087bc:	e000ed04 	.word	0xe000ed04

080087c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087c8:	2300      	movs	r3, #0
 80087ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d018      	beq.n	8008804 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087d2:	4b14      	ldr	r3, [pc, #80]	@ (8008824 <vTaskDelay+0x64>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00b      	beq.n	80087f2 <vTaskDelay+0x32>
	__asm volatile
 80087da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	60bb      	str	r3, [r7, #8]
}
 80087ec:	bf00      	nop
 80087ee:	bf00      	nop
 80087f0:	e7fd      	b.n	80087ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80087f2:	f000 f885 	bl	8008900 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087f6:	2100      	movs	r1, #0
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fb27 	bl	8008e4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087fe:	f000 f88d 	bl	800891c <xTaskResumeAll>
 8008802:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d107      	bne.n	800881a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800880a:	4b07      	ldr	r3, [pc, #28]	@ (8008828 <vTaskDelay+0x68>)
 800880c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008810:	601a      	str	r2, [r3, #0]
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800881a:	bf00      	nop
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	20000734 	.word	0x20000734
 8008828:	e000ed04 	.word	0xe000ed04

0800882c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b08a      	sub	sp, #40	@ 0x28
 8008830:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008832:	2300      	movs	r3, #0
 8008834:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008836:	2300      	movs	r3, #0
 8008838:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800883a:	463a      	mov	r2, r7
 800883c:	1d39      	adds	r1, r7, #4
 800883e:	f107 0308 	add.w	r3, r7, #8
 8008842:	4618      	mov	r0, r3
 8008844:	f7f8 ff28 	bl	8001698 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	9202      	str	r2, [sp, #8]
 8008850:	9301      	str	r3, [sp, #4]
 8008852:	2300      	movs	r3, #0
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	2300      	movs	r3, #0
 8008858:	460a      	mov	r2, r1
 800885a:	4921      	ldr	r1, [pc, #132]	@ (80088e0 <vTaskStartScheduler+0xb4>)
 800885c:	4821      	ldr	r0, [pc, #132]	@ (80088e4 <vTaskStartScheduler+0xb8>)
 800885e:	f7ff fe00 	bl	8008462 <xTaskCreateStatic>
 8008862:	4603      	mov	r3, r0
 8008864:	4a20      	ldr	r2, [pc, #128]	@ (80088e8 <vTaskStartScheduler+0xbc>)
 8008866:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008868:	4b1f      	ldr	r3, [pc, #124]	@ (80088e8 <vTaskStartScheduler+0xbc>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008870:	2301      	movs	r3, #1
 8008872:	617b      	str	r3, [r7, #20]
 8008874:	e001      	b.n	800887a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008876:	2300      	movs	r3, #0
 8008878:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d11b      	bne.n	80088b8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008884:	f383 8811 	msr	BASEPRI, r3
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	613b      	str	r3, [r7, #16]
}
 8008892:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008894:	4b15      	ldr	r3, [pc, #84]	@ (80088ec <vTaskStartScheduler+0xc0>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	334c      	adds	r3, #76	@ 0x4c
 800889a:	4a15      	ldr	r2, [pc, #84]	@ (80088f0 <vTaskStartScheduler+0xc4>)
 800889c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800889e:	4b15      	ldr	r3, [pc, #84]	@ (80088f4 <vTaskStartScheduler+0xc8>)
 80088a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80088a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088a6:	4b14      	ldr	r3, [pc, #80]	@ (80088f8 <vTaskStartScheduler+0xcc>)
 80088a8:	2201      	movs	r2, #1
 80088aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088ac:	4b13      	ldr	r3, [pc, #76]	@ (80088fc <vTaskStartScheduler+0xd0>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088b2:	f000 fbbd 	bl	8009030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088b6:	e00f      	b.n	80088d8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088be:	d10b      	bne.n	80088d8 <vTaskStartScheduler+0xac>
	__asm volatile
 80088c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	60fb      	str	r3, [r7, #12]
}
 80088d2:	bf00      	nop
 80088d4:	bf00      	nop
 80088d6:	e7fd      	b.n	80088d4 <vTaskStartScheduler+0xa8>
}
 80088d8:	bf00      	nop
 80088da:	3718      	adds	r7, #24
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	0800a404 	.word	0x0800a404
 80088e4:	08008c95 	.word	0x08008c95
 80088e8:	20000730 	.word	0x20000730
 80088ec:	2000060c 	.word	0x2000060c
 80088f0:	20000010 	.word	0x20000010
 80088f4:	2000072c 	.word	0x2000072c
 80088f8:	20000718 	.word	0x20000718
 80088fc:	20000710 	.word	0x20000710

08008900 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008900:	b480      	push	{r7}
 8008902:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008904:	4b04      	ldr	r3, [pc, #16]	@ (8008918 <vTaskSuspendAll+0x18>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3301      	adds	r3, #1
 800890a:	4a03      	ldr	r2, [pc, #12]	@ (8008918 <vTaskSuspendAll+0x18>)
 800890c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800890e:	bf00      	nop
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	20000734 	.word	0x20000734

0800891c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008922:	2300      	movs	r3, #0
 8008924:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008926:	2300      	movs	r3, #0
 8008928:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800892a:	4b42      	ldr	r3, [pc, #264]	@ (8008a34 <xTaskResumeAll+0x118>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10b      	bne.n	800894a <xTaskResumeAll+0x2e>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	603b      	str	r3, [r7, #0]
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop
 8008948:	e7fd      	b.n	8008946 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800894a:	f000 fc15 	bl	8009178 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800894e:	4b39      	ldr	r3, [pc, #228]	@ (8008a34 <xTaskResumeAll+0x118>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3b01      	subs	r3, #1
 8008954:	4a37      	ldr	r2, [pc, #220]	@ (8008a34 <xTaskResumeAll+0x118>)
 8008956:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008958:	4b36      	ldr	r3, [pc, #216]	@ (8008a34 <xTaskResumeAll+0x118>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d161      	bne.n	8008a24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008960:	4b35      	ldr	r3, [pc, #212]	@ (8008a38 <xTaskResumeAll+0x11c>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d05d      	beq.n	8008a24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008968:	e02e      	b.n	80089c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800896a:	4b34      	ldr	r3, [pc, #208]	@ (8008a3c <xTaskResumeAll+0x120>)
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	3318      	adds	r3, #24
 8008976:	4618      	mov	r0, r3
 8008978:	f7ff fd49 	bl	800840e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	3304      	adds	r3, #4
 8008980:	4618      	mov	r0, r3
 8008982:	f7ff fd44 	bl	800840e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898a:	2201      	movs	r2, #1
 800898c:	409a      	lsls	r2, r3
 800898e:	4b2c      	ldr	r3, [pc, #176]	@ (8008a40 <xTaskResumeAll+0x124>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4313      	orrs	r3, r2
 8008994:	4a2a      	ldr	r2, [pc, #168]	@ (8008a40 <xTaskResumeAll+0x124>)
 8008996:	6013      	str	r3, [r2, #0]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800899c:	4613      	mov	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4a27      	ldr	r2, [pc, #156]	@ (8008a44 <xTaskResumeAll+0x128>)
 80089a6:	441a      	add	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	3304      	adds	r3, #4
 80089ac:	4619      	mov	r1, r3
 80089ae:	4610      	mov	r0, r2
 80089b0:	f7ff fcd0 	bl	8008354 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089b8:	4b23      	ldr	r3, [pc, #140]	@ (8008a48 <xTaskResumeAll+0x12c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089be:	429a      	cmp	r2, r3
 80089c0:	d302      	bcc.n	80089c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80089c2:	4b22      	ldr	r3, [pc, #136]	@ (8008a4c <xTaskResumeAll+0x130>)
 80089c4:	2201      	movs	r2, #1
 80089c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089c8:	4b1c      	ldr	r3, [pc, #112]	@ (8008a3c <xTaskResumeAll+0x120>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1cc      	bne.n	800896a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089d6:	f000 fa19 	bl	8008e0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80089da:	4b1d      	ldr	r3, [pc, #116]	@ (8008a50 <xTaskResumeAll+0x134>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d010      	beq.n	8008a08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089e6:	f000 f837 	bl	8008a58 <xTaskIncrementTick>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80089f0:	4b16      	ldr	r3, [pc, #88]	@ (8008a4c <xTaskResumeAll+0x130>)
 80089f2:	2201      	movs	r2, #1
 80089f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	3b01      	subs	r3, #1
 80089fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1f1      	bne.n	80089e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008a02:	4b13      	ldr	r3, [pc, #76]	@ (8008a50 <xTaskResumeAll+0x134>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a08:	4b10      	ldr	r3, [pc, #64]	@ (8008a4c <xTaskResumeAll+0x130>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d009      	beq.n	8008a24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a10:	2301      	movs	r3, #1
 8008a12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a14:	4b0f      	ldr	r3, [pc, #60]	@ (8008a54 <xTaskResumeAll+0x138>)
 8008a16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a24:	f000 fbda 	bl	80091dc <vPortExitCritical>

	return xAlreadyYielded;
 8008a28:	68bb      	ldr	r3, [r7, #8]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	20000734 	.word	0x20000734
 8008a38:	2000070c 	.word	0x2000070c
 8008a3c:	200006cc 	.word	0x200006cc
 8008a40:	20000714 	.word	0x20000714
 8008a44:	20000610 	.word	0x20000610
 8008a48:	2000060c 	.word	0x2000060c
 8008a4c:	20000720 	.word	0x20000720
 8008a50:	2000071c 	.word	0x2000071c
 8008a54:	e000ed04 	.word	0xe000ed04

08008a58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a62:	4b4f      	ldr	r3, [pc, #316]	@ (8008ba0 <xTaskIncrementTick+0x148>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f040 808f 	bne.w	8008b8a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a6c:	4b4d      	ldr	r3, [pc, #308]	@ (8008ba4 <xTaskIncrementTick+0x14c>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	3301      	adds	r3, #1
 8008a72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a74:	4a4b      	ldr	r2, [pc, #300]	@ (8008ba4 <xTaskIncrementTick+0x14c>)
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d121      	bne.n	8008ac4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a80:	4b49      	ldr	r3, [pc, #292]	@ (8008ba8 <xTaskIncrementTick+0x150>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00b      	beq.n	8008aa2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	603b      	str	r3, [r7, #0]
}
 8008a9c:	bf00      	nop
 8008a9e:	bf00      	nop
 8008aa0:	e7fd      	b.n	8008a9e <xTaskIncrementTick+0x46>
 8008aa2:	4b41      	ldr	r3, [pc, #260]	@ (8008ba8 <xTaskIncrementTick+0x150>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	60fb      	str	r3, [r7, #12]
 8008aa8:	4b40      	ldr	r3, [pc, #256]	@ (8008bac <xTaskIncrementTick+0x154>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a3e      	ldr	r2, [pc, #248]	@ (8008ba8 <xTaskIncrementTick+0x150>)
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	4a3e      	ldr	r2, [pc, #248]	@ (8008bac <xTaskIncrementTick+0x154>)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6013      	str	r3, [r2, #0]
 8008ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8008bb0 <xTaskIncrementTick+0x158>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3301      	adds	r3, #1
 8008abc:	4a3c      	ldr	r2, [pc, #240]	@ (8008bb0 <xTaskIncrementTick+0x158>)
 8008abe:	6013      	str	r3, [r2, #0]
 8008ac0:	f000 f9a4 	bl	8008e0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8008bb4 <xTaskIncrementTick+0x15c>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d348      	bcc.n	8008b60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ace:	4b36      	ldr	r3, [pc, #216]	@ (8008ba8 <xTaskIncrementTick+0x150>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d104      	bne.n	8008ae2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ad8:	4b36      	ldr	r3, [pc, #216]	@ (8008bb4 <xTaskIncrementTick+0x15c>)
 8008ada:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ade:	601a      	str	r2, [r3, #0]
					break;
 8008ae0:	e03e      	b.n	8008b60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ae2:	4b31      	ldr	r3, [pc, #196]	@ (8008ba8 <xTaskIncrementTick+0x150>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d203      	bcs.n	8008b02 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008afa:	4a2e      	ldr	r2, [pc, #184]	@ (8008bb4 <xTaskIncrementTick+0x15c>)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b00:	e02e      	b.n	8008b60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	3304      	adds	r3, #4
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7ff fc81 	bl	800840e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d004      	beq.n	8008b1e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	3318      	adds	r3, #24
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7ff fc78 	bl	800840e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b22:	2201      	movs	r2, #1
 8008b24:	409a      	lsls	r2, r3
 8008b26:	4b24      	ldr	r3, [pc, #144]	@ (8008bb8 <xTaskIncrementTick+0x160>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	4a22      	ldr	r2, [pc, #136]	@ (8008bb8 <xTaskIncrementTick+0x160>)
 8008b2e:	6013      	str	r3, [r2, #0]
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b34:	4613      	mov	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8008bbc <xTaskIncrementTick+0x164>)
 8008b3e:	441a      	add	r2, r3
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	3304      	adds	r3, #4
 8008b44:	4619      	mov	r1, r3
 8008b46:	4610      	mov	r0, r2
 8008b48:	f7ff fc04 	bl	8008354 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b50:	4b1b      	ldr	r3, [pc, #108]	@ (8008bc0 <xTaskIncrementTick+0x168>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d3b9      	bcc.n	8008ace <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b5e:	e7b6      	b.n	8008ace <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b60:	4b17      	ldr	r3, [pc, #92]	@ (8008bc0 <xTaskIncrementTick+0x168>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b66:	4915      	ldr	r1, [pc, #84]	@ (8008bbc <xTaskIncrementTick+0x164>)
 8008b68:	4613      	mov	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4413      	add	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	440b      	add	r3, r1
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d901      	bls.n	8008b7c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b7c:	4b11      	ldr	r3, [pc, #68]	@ (8008bc4 <xTaskIncrementTick+0x16c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d007      	beq.n	8008b94 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008b84:	2301      	movs	r3, #1
 8008b86:	617b      	str	r3, [r7, #20]
 8008b88:	e004      	b.n	8008b94 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8008bc8 <xTaskIncrementTick+0x170>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	4a0d      	ldr	r2, [pc, #52]	@ (8008bc8 <xTaskIncrementTick+0x170>)
 8008b92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b94:	697b      	ldr	r3, [r7, #20]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3718      	adds	r7, #24
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	20000734 	.word	0x20000734
 8008ba4:	20000710 	.word	0x20000710
 8008ba8:	200006c4 	.word	0x200006c4
 8008bac:	200006c8 	.word	0x200006c8
 8008bb0:	20000724 	.word	0x20000724
 8008bb4:	2000072c 	.word	0x2000072c
 8008bb8:	20000714 	.word	0x20000714
 8008bbc:	20000610 	.word	0x20000610
 8008bc0:	2000060c 	.word	0x2000060c
 8008bc4:	20000720 	.word	0x20000720
 8008bc8:	2000071c 	.word	0x2000071c

08008bcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b087      	sub	sp, #28
 8008bd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8008c7c <vTaskSwitchContext+0xb0>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d003      	beq.n	8008be2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008bda:	4b29      	ldr	r3, [pc, #164]	@ (8008c80 <vTaskSwitchContext+0xb4>)
 8008bdc:	2201      	movs	r2, #1
 8008bde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008be0:	e045      	b.n	8008c6e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8008be2:	4b27      	ldr	r3, [pc, #156]	@ (8008c80 <vTaskSwitchContext+0xb4>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008be8:	4b26      	ldr	r3, [pc, #152]	@ (8008c84 <vTaskSwitchContext+0xb8>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	fab3 f383 	clz	r3, r3
 8008bf4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008bf6:	7afb      	ldrb	r3, [r7, #11]
 8008bf8:	f1c3 031f 	rsb	r3, r3, #31
 8008bfc:	617b      	str	r3, [r7, #20]
 8008bfe:	4922      	ldr	r1, [pc, #136]	@ (8008c88 <vTaskSwitchContext+0xbc>)
 8008c00:	697a      	ldr	r2, [r7, #20]
 8008c02:	4613      	mov	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	440b      	add	r3, r1
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10b      	bne.n	8008c2a <vTaskSwitchContext+0x5e>
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	607b      	str	r3, [r7, #4]
}
 8008c24:	bf00      	nop
 8008c26:	bf00      	nop
 8008c28:	e7fd      	b.n	8008c26 <vTaskSwitchContext+0x5a>
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4a14      	ldr	r2, [pc, #80]	@ (8008c88 <vTaskSwitchContext+0xbc>)
 8008c36:	4413      	add	r3, r2
 8008c38:	613b      	str	r3, [r7, #16]
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	685a      	ldr	r2, [r3, #4]
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	605a      	str	r2, [r3, #4]
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	3308      	adds	r3, #8
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d104      	bne.n	8008c5a <vTaskSwitchContext+0x8e>
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	685a      	ldr	r2, [r3, #4]
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	605a      	str	r2, [r3, #4]
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	4a0a      	ldr	r2, [pc, #40]	@ (8008c8c <vTaskSwitchContext+0xc0>)
 8008c62:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c64:	4b09      	ldr	r3, [pc, #36]	@ (8008c8c <vTaskSwitchContext+0xc0>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	334c      	adds	r3, #76	@ 0x4c
 8008c6a:	4a09      	ldr	r2, [pc, #36]	@ (8008c90 <vTaskSwitchContext+0xc4>)
 8008c6c:	6013      	str	r3, [r2, #0]
}
 8008c6e:	bf00      	nop
 8008c70:	371c      	adds	r7, #28
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	20000734 	.word	0x20000734
 8008c80:	20000720 	.word	0x20000720
 8008c84:	20000714 	.word	0x20000714
 8008c88:	20000610 	.word	0x20000610
 8008c8c:	2000060c 	.word	0x2000060c
 8008c90:	20000010 	.word	0x20000010

08008c94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c9c:	f000 f852 	bl	8008d44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ca0:	4b06      	ldr	r3, [pc, #24]	@ (8008cbc <prvIdleTask+0x28>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d9f9      	bls.n	8008c9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ca8:	4b05      	ldr	r3, [pc, #20]	@ (8008cc0 <prvIdleTask+0x2c>)
 8008caa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cae:	601a      	str	r2, [r3, #0]
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008cb8:	e7f0      	b.n	8008c9c <prvIdleTask+0x8>
 8008cba:	bf00      	nop
 8008cbc:	20000610 	.word	0x20000610
 8008cc0:	e000ed04 	.word	0xe000ed04

08008cc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cca:	2300      	movs	r3, #0
 8008ccc:	607b      	str	r3, [r7, #4]
 8008cce:	e00c      	b.n	8008cea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4a12      	ldr	r2, [pc, #72]	@ (8008d24 <prvInitialiseTaskLists+0x60>)
 8008cdc:	4413      	add	r3, r2
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7ff fb0b 	bl	80082fa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	607b      	str	r3, [r7, #4]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2b06      	cmp	r3, #6
 8008cee:	d9ef      	bls.n	8008cd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008cf0:	480d      	ldr	r0, [pc, #52]	@ (8008d28 <prvInitialiseTaskLists+0x64>)
 8008cf2:	f7ff fb02 	bl	80082fa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008cf6:	480d      	ldr	r0, [pc, #52]	@ (8008d2c <prvInitialiseTaskLists+0x68>)
 8008cf8:	f7ff faff 	bl	80082fa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008cfc:	480c      	ldr	r0, [pc, #48]	@ (8008d30 <prvInitialiseTaskLists+0x6c>)
 8008cfe:	f7ff fafc 	bl	80082fa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d02:	480c      	ldr	r0, [pc, #48]	@ (8008d34 <prvInitialiseTaskLists+0x70>)
 8008d04:	f7ff faf9 	bl	80082fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d08:	480b      	ldr	r0, [pc, #44]	@ (8008d38 <prvInitialiseTaskLists+0x74>)
 8008d0a:	f7ff faf6 	bl	80082fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8008d3c <prvInitialiseTaskLists+0x78>)
 8008d10:	4a05      	ldr	r2, [pc, #20]	@ (8008d28 <prvInitialiseTaskLists+0x64>)
 8008d12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d14:	4b0a      	ldr	r3, [pc, #40]	@ (8008d40 <prvInitialiseTaskLists+0x7c>)
 8008d16:	4a05      	ldr	r2, [pc, #20]	@ (8008d2c <prvInitialiseTaskLists+0x68>)
 8008d18:	601a      	str	r2, [r3, #0]
}
 8008d1a:	bf00      	nop
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	20000610 	.word	0x20000610
 8008d28:	2000069c 	.word	0x2000069c
 8008d2c:	200006b0 	.word	0x200006b0
 8008d30:	200006cc 	.word	0x200006cc
 8008d34:	200006e0 	.word	0x200006e0
 8008d38:	200006f8 	.word	0x200006f8
 8008d3c:	200006c4 	.word	0x200006c4
 8008d40:	200006c8 	.word	0x200006c8

08008d44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d4a:	e019      	b.n	8008d80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d4c:	f000 fa14 	bl	8009178 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d50:	4b10      	ldr	r3, [pc, #64]	@ (8008d94 <prvCheckTasksWaitingTermination+0x50>)
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7ff fb56 	bl	800840e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d62:	4b0d      	ldr	r3, [pc, #52]	@ (8008d98 <prvCheckTasksWaitingTermination+0x54>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	4a0b      	ldr	r2, [pc, #44]	@ (8008d98 <prvCheckTasksWaitingTermination+0x54>)
 8008d6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8008d9c <prvCheckTasksWaitingTermination+0x58>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3b01      	subs	r3, #1
 8008d72:	4a0a      	ldr	r2, [pc, #40]	@ (8008d9c <prvCheckTasksWaitingTermination+0x58>)
 8008d74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d76:	f000 fa31 	bl	80091dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f810 	bl	8008da0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d80:	4b06      	ldr	r3, [pc, #24]	@ (8008d9c <prvCheckTasksWaitingTermination+0x58>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1e1      	bne.n	8008d4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d88:	bf00      	nop
 8008d8a:	bf00      	nop
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	200006e0 	.word	0x200006e0
 8008d98:	2000070c 	.word	0x2000070c
 8008d9c:	200006f4 	.word	0x200006f4

08008da0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	334c      	adds	r3, #76	@ 0x4c
 8008dac:	4618      	mov	r0, r3
 8008dae:	f000 fcff 	bl	80097b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d108      	bne.n	8008dce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 fb87 	bl	80094d4 <vPortFree>
				vPortFree( pxTCB );
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fb84 	bl	80094d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008dcc:	e019      	b.n	8008e02 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d103      	bne.n	8008de0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fb7b 	bl	80094d4 <vPortFree>
	}
 8008dde:	e010      	b.n	8008e02 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d00b      	beq.n	8008e02 <prvDeleteTCB+0x62>
	__asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	60fb      	str	r3, [r7, #12]
}
 8008dfc:	bf00      	nop
 8008dfe:	bf00      	nop
 8008e00:	e7fd      	b.n	8008dfe <prvDeleteTCB+0x5e>
	}
 8008e02:	bf00      	nop
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
	...

08008e0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e12:	4b0c      	ldr	r3, [pc, #48]	@ (8008e44 <prvResetNextTaskUnblockTime+0x38>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d104      	bne.n	8008e26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e48 <prvResetNextTaskUnblockTime+0x3c>)
 8008e1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e24:	e008      	b.n	8008e38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e26:	4b07      	ldr	r3, [pc, #28]	@ (8008e44 <prvResetNextTaskUnblockTime+0x38>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	4a04      	ldr	r2, [pc, #16]	@ (8008e48 <prvResetNextTaskUnblockTime+0x3c>)
 8008e36:	6013      	str	r3, [r2, #0]
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	200006c4 	.word	0x200006c4
 8008e48:	2000072c 	.word	0x2000072c

08008e4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e56:	4b29      	ldr	r3, [pc, #164]	@ (8008efc <prvAddCurrentTaskToDelayedList+0xb0>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e5c:	4b28      	ldr	r3, [pc, #160]	@ (8008f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3304      	adds	r3, #4
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7ff fad3 	bl	800840e <uxListRemove>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10b      	bne.n	8008e86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008e6e:	4b24      	ldr	r3, [pc, #144]	@ (8008f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e74:	2201      	movs	r2, #1
 8008e76:	fa02 f303 	lsl.w	r3, r2, r3
 8008e7a:	43da      	mvns	r2, r3
 8008e7c:	4b21      	ldr	r3, [pc, #132]	@ (8008f04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4013      	ands	r3, r2
 8008e82:	4a20      	ldr	r2, [pc, #128]	@ (8008f04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008e84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e8c:	d10a      	bne.n	8008ea4 <prvAddCurrentTaskToDelayedList+0x58>
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d007      	beq.n	8008ea4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e94:	4b1a      	ldr	r3, [pc, #104]	@ (8008f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3304      	adds	r3, #4
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	481a      	ldr	r0, [pc, #104]	@ (8008f08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008e9e:	f7ff fa59 	bl	8008354 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ea2:	e026      	b.n	8008ef2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008eac:	4b14      	ldr	r3, [pc, #80]	@ (8008f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d209      	bcs.n	8008ed0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ebc:	4b13      	ldr	r3, [pc, #76]	@ (8008f0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8008f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	4610      	mov	r0, r2
 8008eca:	f7ff fa67 	bl	800839c <vListInsert>
}
 8008ece:	e010      	b.n	8008ef2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8008f10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8008f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3304      	adds	r3, #4
 8008eda:	4619      	mov	r1, r3
 8008edc:	4610      	mov	r0, r2
 8008ede:	f7ff fa5d 	bl	800839c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8008f14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d202      	bcs.n	8008ef2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008eec:	4a09      	ldr	r2, [pc, #36]	@ (8008f14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	6013      	str	r3, [r2, #0]
}
 8008ef2:	bf00      	nop
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20000710 	.word	0x20000710
 8008f00:	2000060c 	.word	0x2000060c
 8008f04:	20000714 	.word	0x20000714
 8008f08:	200006f8 	.word	0x200006f8
 8008f0c:	200006c8 	.word	0x200006c8
 8008f10:	200006c4 	.word	0x200006c4
 8008f14:	2000072c 	.word	0x2000072c

08008f18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	3b04      	subs	r3, #4
 8008f28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008f30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	3b04      	subs	r3, #4
 8008f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	f023 0201 	bic.w	r2, r3, #1
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3b04      	subs	r3, #4
 8008f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f48:	4a0c      	ldr	r2, [pc, #48]	@ (8008f7c <pxPortInitialiseStack+0x64>)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	3b14      	subs	r3, #20
 8008f52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	3b04      	subs	r3, #4
 8008f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f06f 0202 	mvn.w	r2, #2
 8008f66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	3b20      	subs	r3, #32
 8008f6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	08008f81 	.word	0x08008f81

08008f80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008f86:	2300      	movs	r3, #0
 8008f88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f8a:	4b13      	ldr	r3, [pc, #76]	@ (8008fd8 <prvTaskExitError+0x58>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f92:	d00b      	beq.n	8008fac <prvTaskExitError+0x2c>
	__asm volatile
 8008f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	60fb      	str	r3, [r7, #12]
}
 8008fa6:	bf00      	nop
 8008fa8:	bf00      	nop
 8008faa:	e7fd      	b.n	8008fa8 <prvTaskExitError+0x28>
	__asm volatile
 8008fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb0:	f383 8811 	msr	BASEPRI, r3
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	60bb      	str	r3, [r7, #8]
}
 8008fbe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008fc0:	bf00      	nop
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0fc      	beq.n	8008fc2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008fc8:	bf00      	nop
 8008fca:	bf00      	nop
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	2000000c 	.word	0x2000000c
 8008fdc:	00000000 	.word	0x00000000

08008fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008fe0:	4b07      	ldr	r3, [pc, #28]	@ (8009000 <pxCurrentTCBConst2>)
 8008fe2:	6819      	ldr	r1, [r3, #0]
 8008fe4:	6808      	ldr	r0, [r1, #0]
 8008fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fea:	f380 8809 	msr	PSP, r0
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f04f 0000 	mov.w	r0, #0
 8008ff6:	f380 8811 	msr	BASEPRI, r0
 8008ffa:	4770      	bx	lr
 8008ffc:	f3af 8000 	nop.w

08009000 <pxCurrentTCBConst2>:
 8009000:	2000060c 	.word	0x2000060c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009004:	bf00      	nop
 8009006:	bf00      	nop

08009008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009008:	4808      	ldr	r0, [pc, #32]	@ (800902c <prvPortStartFirstTask+0x24>)
 800900a:	6800      	ldr	r0, [r0, #0]
 800900c:	6800      	ldr	r0, [r0, #0]
 800900e:	f380 8808 	msr	MSP, r0
 8009012:	f04f 0000 	mov.w	r0, #0
 8009016:	f380 8814 	msr	CONTROL, r0
 800901a:	b662      	cpsie	i
 800901c:	b661      	cpsie	f
 800901e:	f3bf 8f4f 	dsb	sy
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	df00      	svc	0
 8009028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800902a:	bf00      	nop
 800902c:	e000ed08 	.word	0xe000ed08

08009030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009036:	4b47      	ldr	r3, [pc, #284]	@ (8009154 <xPortStartScheduler+0x124>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a47      	ldr	r2, [pc, #284]	@ (8009158 <xPortStartScheduler+0x128>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d10b      	bne.n	8009058 <xPortStartScheduler+0x28>
	__asm volatile
 8009040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009044:	f383 8811 	msr	BASEPRI, r3
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	60fb      	str	r3, [r7, #12]
}
 8009052:	bf00      	nop
 8009054:	bf00      	nop
 8009056:	e7fd      	b.n	8009054 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009058:	4b3e      	ldr	r3, [pc, #248]	@ (8009154 <xPortStartScheduler+0x124>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a3f      	ldr	r2, [pc, #252]	@ (800915c <xPortStartScheduler+0x12c>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d10b      	bne.n	800907a <xPortStartScheduler+0x4a>
	__asm volatile
 8009062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009066:	f383 8811 	msr	BASEPRI, r3
 800906a:	f3bf 8f6f 	isb	sy
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	613b      	str	r3, [r7, #16]
}
 8009074:	bf00      	nop
 8009076:	bf00      	nop
 8009078:	e7fd      	b.n	8009076 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800907a:	4b39      	ldr	r3, [pc, #228]	@ (8009160 <xPortStartScheduler+0x130>)
 800907c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	b2db      	uxtb	r3, r3
 8009084:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	22ff      	movs	r2, #255	@ 0xff
 800908a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	b2db      	uxtb	r3, r3
 8009092:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009094:	78fb      	ldrb	r3, [r7, #3]
 8009096:	b2db      	uxtb	r3, r3
 8009098:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800909c:	b2da      	uxtb	r2, r3
 800909e:	4b31      	ldr	r3, [pc, #196]	@ (8009164 <xPortStartScheduler+0x134>)
 80090a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80090a2:	4b31      	ldr	r3, [pc, #196]	@ (8009168 <xPortStartScheduler+0x138>)
 80090a4:	2207      	movs	r2, #7
 80090a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090a8:	e009      	b.n	80090be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80090aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009168 <xPortStartScheduler+0x138>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3b01      	subs	r3, #1
 80090b0:	4a2d      	ldr	r2, [pc, #180]	@ (8009168 <xPortStartScheduler+0x138>)
 80090b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80090b4:	78fb      	ldrb	r3, [r7, #3]
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	005b      	lsls	r3, r3, #1
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090be:	78fb      	ldrb	r3, [r7, #3]
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090c6:	2b80      	cmp	r3, #128	@ 0x80
 80090c8:	d0ef      	beq.n	80090aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80090ca:	4b27      	ldr	r3, [pc, #156]	@ (8009168 <xPortStartScheduler+0x138>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f1c3 0307 	rsb	r3, r3, #7
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	d00b      	beq.n	80090ee <xPortStartScheduler+0xbe>
	__asm volatile
 80090d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	60bb      	str	r3, [r7, #8]
}
 80090e8:	bf00      	nop
 80090ea:	bf00      	nop
 80090ec:	e7fd      	b.n	80090ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80090ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009168 <xPortStartScheduler+0x138>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	021b      	lsls	r3, r3, #8
 80090f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009168 <xPortStartScheduler+0x138>)
 80090f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80090f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009168 <xPortStartScheduler+0x138>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009100:	4a19      	ldr	r2, [pc, #100]	@ (8009168 <xPortStartScheduler+0x138>)
 8009102:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	b2da      	uxtb	r2, r3
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800910c:	4b17      	ldr	r3, [pc, #92]	@ (800916c <xPortStartScheduler+0x13c>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a16      	ldr	r2, [pc, #88]	@ (800916c <xPortStartScheduler+0x13c>)
 8009112:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009116:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009118:	4b14      	ldr	r3, [pc, #80]	@ (800916c <xPortStartScheduler+0x13c>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a13      	ldr	r2, [pc, #76]	@ (800916c <xPortStartScheduler+0x13c>)
 800911e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009122:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009124:	f000 f8da 	bl	80092dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009128:	4b11      	ldr	r3, [pc, #68]	@ (8009170 <xPortStartScheduler+0x140>)
 800912a:	2200      	movs	r2, #0
 800912c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800912e:	f000 f8f9 	bl	8009324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009132:	4b10      	ldr	r3, [pc, #64]	@ (8009174 <xPortStartScheduler+0x144>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a0f      	ldr	r2, [pc, #60]	@ (8009174 <xPortStartScheduler+0x144>)
 8009138:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800913c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800913e:	f7ff ff63 	bl	8009008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009142:	f7ff fd43 	bl	8008bcc <vTaskSwitchContext>
	prvTaskExitError();
 8009146:	f7ff ff1b 	bl	8008f80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3718      	adds	r7, #24
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	e000ed00 	.word	0xe000ed00
 8009158:	410fc271 	.word	0x410fc271
 800915c:	410fc270 	.word	0x410fc270
 8009160:	e000e400 	.word	0xe000e400
 8009164:	20000738 	.word	0x20000738
 8009168:	2000073c 	.word	0x2000073c
 800916c:	e000ed20 	.word	0xe000ed20
 8009170:	2000000c 	.word	0x2000000c
 8009174:	e000ef34 	.word	0xe000ef34

08009178 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	607b      	str	r3, [r7, #4]
}
 8009190:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009192:	4b10      	ldr	r3, [pc, #64]	@ (80091d4 <vPortEnterCritical+0x5c>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3301      	adds	r3, #1
 8009198:	4a0e      	ldr	r2, [pc, #56]	@ (80091d4 <vPortEnterCritical+0x5c>)
 800919a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800919c:	4b0d      	ldr	r3, [pc, #52]	@ (80091d4 <vPortEnterCritical+0x5c>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d110      	bne.n	80091c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80091a4:	4b0c      	ldr	r3, [pc, #48]	@ (80091d8 <vPortEnterCritical+0x60>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00b      	beq.n	80091c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80091ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b2:	f383 8811 	msr	BASEPRI, r3
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	603b      	str	r3, [r7, #0]
}
 80091c0:	bf00      	nop
 80091c2:	bf00      	nop
 80091c4:	e7fd      	b.n	80091c2 <vPortEnterCritical+0x4a>
	}
}
 80091c6:	bf00      	nop
 80091c8:	370c      	adds	r7, #12
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	2000000c 	.word	0x2000000c
 80091d8:	e000ed04 	.word	0xe000ed04

080091dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80091e2:	4b12      	ldr	r3, [pc, #72]	@ (800922c <vPortExitCritical+0x50>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10b      	bne.n	8009202 <vPortExitCritical+0x26>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	607b      	str	r3, [r7, #4]
}
 80091fc:	bf00      	nop
 80091fe:	bf00      	nop
 8009200:	e7fd      	b.n	80091fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009202:	4b0a      	ldr	r3, [pc, #40]	@ (800922c <vPortExitCritical+0x50>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	3b01      	subs	r3, #1
 8009208:	4a08      	ldr	r2, [pc, #32]	@ (800922c <vPortExitCritical+0x50>)
 800920a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800920c:	4b07      	ldr	r3, [pc, #28]	@ (800922c <vPortExitCritical+0x50>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d105      	bne.n	8009220 <vPortExitCritical+0x44>
 8009214:	2300      	movs	r3, #0
 8009216:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800921e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	2000000c 	.word	0x2000000c

08009230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009230:	f3ef 8009 	mrs	r0, PSP
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	4b15      	ldr	r3, [pc, #84]	@ (8009290 <pxCurrentTCBConst>)
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	f01e 0f10 	tst.w	lr, #16
 8009240:	bf08      	it	eq
 8009242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924a:	6010      	str	r0, [r2, #0]
 800924c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009250:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009254:	f380 8811 	msr	BASEPRI, r0
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f7ff fcb4 	bl	8008bcc <vTaskSwitchContext>
 8009264:	f04f 0000 	mov.w	r0, #0
 8009268:	f380 8811 	msr	BASEPRI, r0
 800926c:	bc09      	pop	{r0, r3}
 800926e:	6819      	ldr	r1, [r3, #0]
 8009270:	6808      	ldr	r0, [r1, #0]
 8009272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009276:	f01e 0f10 	tst.w	lr, #16
 800927a:	bf08      	it	eq
 800927c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009280:	f380 8809 	msr	PSP, r0
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	f3af 8000 	nop.w

08009290 <pxCurrentTCBConst>:
 8009290:	2000060c 	.word	0x2000060c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009294:	bf00      	nop
 8009296:	bf00      	nop

08009298 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
	__asm volatile
 800929e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a2:	f383 8811 	msr	BASEPRI, r3
 80092a6:	f3bf 8f6f 	isb	sy
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	607b      	str	r3, [r7, #4]
}
 80092b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80092b2:	f7ff fbd1 	bl	8008a58 <xTaskIncrementTick>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d003      	beq.n	80092c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80092bc:	4b06      	ldr	r3, [pc, #24]	@ (80092d8 <SysTick_Handler+0x40>)
 80092be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	2300      	movs	r3, #0
 80092c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	f383 8811 	msr	BASEPRI, r3
}
 80092ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80092d0:	bf00      	nop
 80092d2:	3708      	adds	r7, #8
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	e000ed04 	.word	0xe000ed04

080092dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80092dc:	b480      	push	{r7}
 80092de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80092e0:	4b0b      	ldr	r3, [pc, #44]	@ (8009310 <vPortSetupTimerInterrupt+0x34>)
 80092e2:	2200      	movs	r2, #0
 80092e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80092e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009314 <vPortSetupTimerInterrupt+0x38>)
 80092e8:	2200      	movs	r2, #0
 80092ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80092ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009318 <vPortSetupTimerInterrupt+0x3c>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a0a      	ldr	r2, [pc, #40]	@ (800931c <vPortSetupTimerInterrupt+0x40>)
 80092f2:	fba2 2303 	umull	r2, r3, r2, r3
 80092f6:	099b      	lsrs	r3, r3, #6
 80092f8:	4a09      	ldr	r2, [pc, #36]	@ (8009320 <vPortSetupTimerInterrupt+0x44>)
 80092fa:	3b01      	subs	r3, #1
 80092fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80092fe:	4b04      	ldr	r3, [pc, #16]	@ (8009310 <vPortSetupTimerInterrupt+0x34>)
 8009300:	2207      	movs	r2, #7
 8009302:	601a      	str	r2, [r3, #0]
}
 8009304:	bf00      	nop
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	e000e010 	.word	0xe000e010
 8009314:	e000e018 	.word	0xe000e018
 8009318:	20000000 	.word	0x20000000
 800931c:	10624dd3 	.word	0x10624dd3
 8009320:	e000e014 	.word	0xe000e014

08009324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009324:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009334 <vPortEnableVFP+0x10>
 8009328:	6801      	ldr	r1, [r0, #0]
 800932a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800932e:	6001      	str	r1, [r0, #0]
 8009330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009332:	bf00      	nop
 8009334:	e000ed88 	.word	0xe000ed88

08009338 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b08a      	sub	sp, #40	@ 0x28
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009340:	2300      	movs	r3, #0
 8009342:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009344:	f7ff fadc 	bl	8008900 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009348:	4b5c      	ldr	r3, [pc, #368]	@ (80094bc <pvPortMalloc+0x184>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d101      	bne.n	8009354 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009350:	f000 f924 	bl	800959c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009354:	4b5a      	ldr	r3, [pc, #360]	@ (80094c0 <pvPortMalloc+0x188>)
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4013      	ands	r3, r2
 800935c:	2b00      	cmp	r3, #0
 800935e:	f040 8095 	bne.w	800948c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d01e      	beq.n	80093a6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009368:	2208      	movs	r2, #8
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4413      	add	r3, r2
 800936e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f003 0307 	and.w	r3, r3, #7
 8009376:	2b00      	cmp	r3, #0
 8009378:	d015      	beq.n	80093a6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f023 0307 	bic.w	r3, r3, #7
 8009380:	3308      	adds	r3, #8
 8009382:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f003 0307 	and.w	r3, r3, #7
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00b      	beq.n	80093a6 <pvPortMalloc+0x6e>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	617b      	str	r3, [r7, #20]
}
 80093a0:	bf00      	nop
 80093a2:	bf00      	nop
 80093a4:	e7fd      	b.n	80093a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d06f      	beq.n	800948c <pvPortMalloc+0x154>
 80093ac:	4b45      	ldr	r3, [pc, #276]	@ (80094c4 <pvPortMalloc+0x18c>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d86a      	bhi.n	800948c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80093b6:	4b44      	ldr	r3, [pc, #272]	@ (80094c8 <pvPortMalloc+0x190>)
 80093b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80093ba:	4b43      	ldr	r3, [pc, #268]	@ (80094c8 <pvPortMalloc+0x190>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093c0:	e004      	b.n	80093cc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80093c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80093c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d903      	bls.n	80093de <pvPortMalloc+0xa6>
 80093d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1f1      	bne.n	80093c2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80093de:	4b37      	ldr	r3, [pc, #220]	@ (80094bc <pvPortMalloc+0x184>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d051      	beq.n	800948c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80093e8:	6a3b      	ldr	r3, [r7, #32]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2208      	movs	r2, #8
 80093ee:	4413      	add	r3, r2
 80093f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80093f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	6a3b      	ldr	r3, [r7, #32]
 80093f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80093fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fc:	685a      	ldr	r2, [r3, #4]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	1ad2      	subs	r2, r2, r3
 8009402:	2308      	movs	r3, #8
 8009404:	005b      	lsls	r3, r3, #1
 8009406:	429a      	cmp	r2, r3
 8009408:	d920      	bls.n	800944c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800940a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4413      	add	r3, r2
 8009410:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	f003 0307 	and.w	r3, r3, #7
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00b      	beq.n	8009434 <pvPortMalloc+0xfc>
	__asm volatile
 800941c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009420:	f383 8811 	msr	BASEPRI, r3
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	613b      	str	r3, [r7, #16]
}
 800942e:	bf00      	nop
 8009430:	bf00      	nop
 8009432:	e7fd      	b.n	8009430 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009436:	685a      	ldr	r2, [r3, #4]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	1ad2      	subs	r2, r2, r3
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009446:	69b8      	ldr	r0, [r7, #24]
 8009448:	f000 f90a 	bl	8009660 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800944c:	4b1d      	ldr	r3, [pc, #116]	@ (80094c4 <pvPortMalloc+0x18c>)
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	1ad3      	subs	r3, r2, r3
 8009456:	4a1b      	ldr	r2, [pc, #108]	@ (80094c4 <pvPortMalloc+0x18c>)
 8009458:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800945a:	4b1a      	ldr	r3, [pc, #104]	@ (80094c4 <pvPortMalloc+0x18c>)
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	4b1b      	ldr	r3, [pc, #108]	@ (80094cc <pvPortMalloc+0x194>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	429a      	cmp	r2, r3
 8009464:	d203      	bcs.n	800946e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009466:	4b17      	ldr	r3, [pc, #92]	@ (80094c4 <pvPortMalloc+0x18c>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a18      	ldr	r2, [pc, #96]	@ (80094cc <pvPortMalloc+0x194>)
 800946c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800946e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009470:	685a      	ldr	r2, [r3, #4]
 8009472:	4b13      	ldr	r3, [pc, #76]	@ (80094c0 <pvPortMalloc+0x188>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	431a      	orrs	r2, r3
 8009478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800947c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947e:	2200      	movs	r2, #0
 8009480:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009482:	4b13      	ldr	r3, [pc, #76]	@ (80094d0 <pvPortMalloc+0x198>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3301      	adds	r3, #1
 8009488:	4a11      	ldr	r2, [pc, #68]	@ (80094d0 <pvPortMalloc+0x198>)
 800948a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800948c:	f7ff fa46 	bl	800891c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	f003 0307 	and.w	r3, r3, #7
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00b      	beq.n	80094b2 <pvPortMalloc+0x17a>
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	60fb      	str	r3, [r7, #12]
}
 80094ac:	bf00      	nop
 80094ae:	bf00      	nop
 80094b0:	e7fd      	b.n	80094ae <pvPortMalloc+0x176>
	return pvReturn;
 80094b2:	69fb      	ldr	r3, [r7, #28]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3728      	adds	r7, #40	@ 0x28
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	20001300 	.word	0x20001300
 80094c0:	20001314 	.word	0x20001314
 80094c4:	20001304 	.word	0x20001304
 80094c8:	200012f8 	.word	0x200012f8
 80094cc:	20001308 	.word	0x20001308
 80094d0:	2000130c 	.word	0x2000130c

080094d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d04f      	beq.n	8009586 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80094e6:	2308      	movs	r3, #8
 80094e8:	425b      	negs	r3, r3
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	4413      	add	r3, r2
 80094ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	685a      	ldr	r2, [r3, #4]
 80094f8:	4b25      	ldr	r3, [pc, #148]	@ (8009590 <vPortFree+0xbc>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4013      	ands	r3, r2
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10b      	bne.n	800951a <vPortFree+0x46>
	__asm volatile
 8009502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	60fb      	str	r3, [r7, #12]
}
 8009514:	bf00      	nop
 8009516:	bf00      	nop
 8009518:	e7fd      	b.n	8009516 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00b      	beq.n	800953a <vPortFree+0x66>
	__asm volatile
 8009522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009526:	f383 8811 	msr	BASEPRI, r3
 800952a:	f3bf 8f6f 	isb	sy
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	60bb      	str	r3, [r7, #8]
}
 8009534:	bf00      	nop
 8009536:	bf00      	nop
 8009538:	e7fd      	b.n	8009536 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	685a      	ldr	r2, [r3, #4]
 800953e:	4b14      	ldr	r3, [pc, #80]	@ (8009590 <vPortFree+0xbc>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4013      	ands	r3, r2
 8009544:	2b00      	cmp	r3, #0
 8009546:	d01e      	beq.n	8009586 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d11a      	bne.n	8009586 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	4b0e      	ldr	r3, [pc, #56]	@ (8009590 <vPortFree+0xbc>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	43db      	mvns	r3, r3
 800955a:	401a      	ands	r2, r3
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009560:	f7ff f9ce 	bl	8008900 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	4b0a      	ldr	r3, [pc, #40]	@ (8009594 <vPortFree+0xc0>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4413      	add	r3, r2
 800956e:	4a09      	ldr	r2, [pc, #36]	@ (8009594 <vPortFree+0xc0>)
 8009570:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009572:	6938      	ldr	r0, [r7, #16]
 8009574:	f000 f874 	bl	8009660 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009578:	4b07      	ldr	r3, [pc, #28]	@ (8009598 <vPortFree+0xc4>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3301      	adds	r3, #1
 800957e:	4a06      	ldr	r2, [pc, #24]	@ (8009598 <vPortFree+0xc4>)
 8009580:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009582:	f7ff f9cb 	bl	800891c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009586:	bf00      	nop
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20001314 	.word	0x20001314
 8009594:	20001304 	.word	0x20001304
 8009598:	20001310 	.word	0x20001310

0800959c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80095a2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80095a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80095a8:	4b27      	ldr	r3, [pc, #156]	@ (8009648 <prvHeapInit+0xac>)
 80095aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f003 0307 	and.w	r3, r3, #7
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00c      	beq.n	80095d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	3307      	adds	r3, #7
 80095ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f023 0307 	bic.w	r3, r3, #7
 80095c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	4a1f      	ldr	r2, [pc, #124]	@ (8009648 <prvHeapInit+0xac>)
 80095cc:	4413      	add	r3, r2
 80095ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80095d4:	4a1d      	ldr	r2, [pc, #116]	@ (800964c <prvHeapInit+0xb0>)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80095da:	4b1c      	ldr	r3, [pc, #112]	@ (800964c <prvHeapInit+0xb0>)
 80095dc:	2200      	movs	r2, #0
 80095de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	4413      	add	r3, r2
 80095e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80095e8:	2208      	movs	r2, #8
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	1a9b      	subs	r3, r3, r2
 80095ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f023 0307 	bic.w	r3, r3, #7
 80095f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	4a15      	ldr	r2, [pc, #84]	@ (8009650 <prvHeapInit+0xb4>)
 80095fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80095fe:	4b14      	ldr	r3, [pc, #80]	@ (8009650 <prvHeapInit+0xb4>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2200      	movs	r2, #0
 8009604:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009606:	4b12      	ldr	r3, [pc, #72]	@ (8009650 <prvHeapInit+0xb4>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2200      	movs	r2, #0
 800960c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	1ad2      	subs	r2, r2, r3
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800961c:	4b0c      	ldr	r3, [pc, #48]	@ (8009650 <prvHeapInit+0xb4>)
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	4a0a      	ldr	r2, [pc, #40]	@ (8009654 <prvHeapInit+0xb8>)
 800962a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	4a09      	ldr	r2, [pc, #36]	@ (8009658 <prvHeapInit+0xbc>)
 8009632:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009634:	4b09      	ldr	r3, [pc, #36]	@ (800965c <prvHeapInit+0xc0>)
 8009636:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800963a:	601a      	str	r2, [r3, #0]
}
 800963c:	bf00      	nop
 800963e:	3714      	adds	r7, #20
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr
 8009648:	20000740 	.word	0x20000740
 800964c:	200012f8 	.word	0x200012f8
 8009650:	20001300 	.word	0x20001300
 8009654:	20001308 	.word	0x20001308
 8009658:	20001304 	.word	0x20001304
 800965c:	20001314 	.word	0x20001314

08009660 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009668:	4b28      	ldr	r3, [pc, #160]	@ (800970c <prvInsertBlockIntoFreeList+0xac>)
 800966a:	60fb      	str	r3, [r7, #12]
 800966c:	e002      	b.n	8009674 <prvInsertBlockIntoFreeList+0x14>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	60fb      	str	r3, [r7, #12]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	429a      	cmp	r2, r3
 800967c:	d8f7      	bhi.n	800966e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	4413      	add	r3, r2
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	429a      	cmp	r2, r3
 800968e:	d108      	bne.n	80096a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	685a      	ldr	r2, [r3, #4]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	441a      	add	r2, r3
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	68ba      	ldr	r2, [r7, #8]
 80096ac:	441a      	add	r2, r3
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d118      	bne.n	80096e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	4b15      	ldr	r3, [pc, #84]	@ (8009710 <prvInsertBlockIntoFreeList+0xb0>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d00d      	beq.n	80096de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	685a      	ldr	r2, [r3, #4]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	441a      	add	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	601a      	str	r2, [r3, #0]
 80096dc:	e008      	b.n	80096f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80096de:	4b0c      	ldr	r3, [pc, #48]	@ (8009710 <prvInsertBlockIntoFreeList+0xb0>)
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	601a      	str	r2, [r3, #0]
 80096e6:	e003      	b.n	80096f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d002      	beq.n	80096fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096fe:	bf00      	nop
 8009700:	3714      	adds	r7, #20
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	200012f8 	.word	0x200012f8
 8009710:	20001300 	.word	0x20001300

08009714 <sniprintf>:
 8009714:	b40c      	push	{r2, r3}
 8009716:	b530      	push	{r4, r5, lr}
 8009718:	4b18      	ldr	r3, [pc, #96]	@ (800977c <sniprintf+0x68>)
 800971a:	1e0c      	subs	r4, r1, #0
 800971c:	681d      	ldr	r5, [r3, #0]
 800971e:	b09d      	sub	sp, #116	@ 0x74
 8009720:	da08      	bge.n	8009734 <sniprintf+0x20>
 8009722:	238b      	movs	r3, #139	@ 0x8b
 8009724:	602b      	str	r3, [r5, #0]
 8009726:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800972a:	b01d      	add	sp, #116	@ 0x74
 800972c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009730:	b002      	add	sp, #8
 8009732:	4770      	bx	lr
 8009734:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009738:	f8ad 3014 	strh.w	r3, [sp, #20]
 800973c:	f04f 0300 	mov.w	r3, #0
 8009740:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009742:	bf14      	ite	ne
 8009744:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009748:	4623      	moveq	r3, r4
 800974a:	9304      	str	r3, [sp, #16]
 800974c:	9307      	str	r3, [sp, #28]
 800974e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009752:	9002      	str	r0, [sp, #8]
 8009754:	9006      	str	r0, [sp, #24]
 8009756:	f8ad 3016 	strh.w	r3, [sp, #22]
 800975a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800975c:	ab21      	add	r3, sp, #132	@ 0x84
 800975e:	a902      	add	r1, sp, #8
 8009760:	4628      	mov	r0, r5
 8009762:	9301      	str	r3, [sp, #4]
 8009764:	f000 fa10 	bl	8009b88 <_svfiprintf_r>
 8009768:	1c43      	adds	r3, r0, #1
 800976a:	bfbc      	itt	lt
 800976c:	238b      	movlt	r3, #139	@ 0x8b
 800976e:	602b      	strlt	r3, [r5, #0]
 8009770:	2c00      	cmp	r4, #0
 8009772:	d0da      	beq.n	800972a <sniprintf+0x16>
 8009774:	9b02      	ldr	r3, [sp, #8]
 8009776:	2200      	movs	r2, #0
 8009778:	701a      	strb	r2, [r3, #0]
 800977a:	e7d6      	b.n	800972a <sniprintf+0x16>
 800977c:	20000010 	.word	0x20000010

08009780 <memcmp>:
 8009780:	b510      	push	{r4, lr}
 8009782:	3901      	subs	r1, #1
 8009784:	4402      	add	r2, r0
 8009786:	4290      	cmp	r0, r2
 8009788:	d101      	bne.n	800978e <memcmp+0xe>
 800978a:	2000      	movs	r0, #0
 800978c:	e005      	b.n	800979a <memcmp+0x1a>
 800978e:	7803      	ldrb	r3, [r0, #0]
 8009790:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009794:	42a3      	cmp	r3, r4
 8009796:	d001      	beq.n	800979c <memcmp+0x1c>
 8009798:	1b18      	subs	r0, r3, r4
 800979a:	bd10      	pop	{r4, pc}
 800979c:	3001      	adds	r0, #1
 800979e:	e7f2      	b.n	8009786 <memcmp+0x6>

080097a0 <memset>:
 80097a0:	4402      	add	r2, r0
 80097a2:	4603      	mov	r3, r0
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d100      	bne.n	80097aa <memset+0xa>
 80097a8:	4770      	bx	lr
 80097aa:	f803 1b01 	strb.w	r1, [r3], #1
 80097ae:	e7f9      	b.n	80097a4 <memset+0x4>

080097b0 <_reclaim_reent>:
 80097b0:	4b2d      	ldr	r3, [pc, #180]	@ (8009868 <_reclaim_reent+0xb8>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4283      	cmp	r3, r0
 80097b6:	b570      	push	{r4, r5, r6, lr}
 80097b8:	4604      	mov	r4, r0
 80097ba:	d053      	beq.n	8009864 <_reclaim_reent+0xb4>
 80097bc:	69c3      	ldr	r3, [r0, #28]
 80097be:	b31b      	cbz	r3, 8009808 <_reclaim_reent+0x58>
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	b163      	cbz	r3, 80097de <_reclaim_reent+0x2e>
 80097c4:	2500      	movs	r5, #0
 80097c6:	69e3      	ldr	r3, [r4, #28]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	5959      	ldr	r1, [r3, r5]
 80097cc:	b9b1      	cbnz	r1, 80097fc <_reclaim_reent+0x4c>
 80097ce:	3504      	adds	r5, #4
 80097d0:	2d80      	cmp	r5, #128	@ 0x80
 80097d2:	d1f8      	bne.n	80097c6 <_reclaim_reent+0x16>
 80097d4:	69e3      	ldr	r3, [r4, #28]
 80097d6:	4620      	mov	r0, r4
 80097d8:	68d9      	ldr	r1, [r3, #12]
 80097da:	f000 f881 	bl	80098e0 <_free_r>
 80097de:	69e3      	ldr	r3, [r4, #28]
 80097e0:	6819      	ldr	r1, [r3, #0]
 80097e2:	b111      	cbz	r1, 80097ea <_reclaim_reent+0x3a>
 80097e4:	4620      	mov	r0, r4
 80097e6:	f000 f87b 	bl	80098e0 <_free_r>
 80097ea:	69e3      	ldr	r3, [r4, #28]
 80097ec:	689d      	ldr	r5, [r3, #8]
 80097ee:	b15d      	cbz	r5, 8009808 <_reclaim_reent+0x58>
 80097f0:	4629      	mov	r1, r5
 80097f2:	4620      	mov	r0, r4
 80097f4:	682d      	ldr	r5, [r5, #0]
 80097f6:	f000 f873 	bl	80098e0 <_free_r>
 80097fa:	e7f8      	b.n	80097ee <_reclaim_reent+0x3e>
 80097fc:	680e      	ldr	r6, [r1, #0]
 80097fe:	4620      	mov	r0, r4
 8009800:	f000 f86e 	bl	80098e0 <_free_r>
 8009804:	4631      	mov	r1, r6
 8009806:	e7e1      	b.n	80097cc <_reclaim_reent+0x1c>
 8009808:	6961      	ldr	r1, [r4, #20]
 800980a:	b111      	cbz	r1, 8009812 <_reclaim_reent+0x62>
 800980c:	4620      	mov	r0, r4
 800980e:	f000 f867 	bl	80098e0 <_free_r>
 8009812:	69e1      	ldr	r1, [r4, #28]
 8009814:	b111      	cbz	r1, 800981c <_reclaim_reent+0x6c>
 8009816:	4620      	mov	r0, r4
 8009818:	f000 f862 	bl	80098e0 <_free_r>
 800981c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800981e:	b111      	cbz	r1, 8009826 <_reclaim_reent+0x76>
 8009820:	4620      	mov	r0, r4
 8009822:	f000 f85d 	bl	80098e0 <_free_r>
 8009826:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009828:	b111      	cbz	r1, 8009830 <_reclaim_reent+0x80>
 800982a:	4620      	mov	r0, r4
 800982c:	f000 f858 	bl	80098e0 <_free_r>
 8009830:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009832:	b111      	cbz	r1, 800983a <_reclaim_reent+0x8a>
 8009834:	4620      	mov	r0, r4
 8009836:	f000 f853 	bl	80098e0 <_free_r>
 800983a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800983c:	b111      	cbz	r1, 8009844 <_reclaim_reent+0x94>
 800983e:	4620      	mov	r0, r4
 8009840:	f000 f84e 	bl	80098e0 <_free_r>
 8009844:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009846:	b111      	cbz	r1, 800984e <_reclaim_reent+0x9e>
 8009848:	4620      	mov	r0, r4
 800984a:	f000 f849 	bl	80098e0 <_free_r>
 800984e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009850:	b111      	cbz	r1, 8009858 <_reclaim_reent+0xa8>
 8009852:	4620      	mov	r0, r4
 8009854:	f000 f844 	bl	80098e0 <_free_r>
 8009858:	6a23      	ldr	r3, [r4, #32]
 800985a:	b11b      	cbz	r3, 8009864 <_reclaim_reent+0xb4>
 800985c:	4620      	mov	r0, r4
 800985e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009862:	4718      	bx	r3
 8009864:	bd70      	pop	{r4, r5, r6, pc}
 8009866:	bf00      	nop
 8009868:	20000010 	.word	0x20000010

0800986c <__errno>:
 800986c:	4b01      	ldr	r3, [pc, #4]	@ (8009874 <__errno+0x8>)
 800986e:	6818      	ldr	r0, [r3, #0]
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	20000010 	.word	0x20000010

08009878 <__libc_init_array>:
 8009878:	b570      	push	{r4, r5, r6, lr}
 800987a:	4d0d      	ldr	r5, [pc, #52]	@ (80098b0 <__libc_init_array+0x38>)
 800987c:	4c0d      	ldr	r4, [pc, #52]	@ (80098b4 <__libc_init_array+0x3c>)
 800987e:	1b64      	subs	r4, r4, r5
 8009880:	10a4      	asrs	r4, r4, #2
 8009882:	2600      	movs	r6, #0
 8009884:	42a6      	cmp	r6, r4
 8009886:	d109      	bne.n	800989c <__libc_init_array+0x24>
 8009888:	4d0b      	ldr	r5, [pc, #44]	@ (80098b8 <__libc_init_array+0x40>)
 800988a:	4c0c      	ldr	r4, [pc, #48]	@ (80098bc <__libc_init_array+0x44>)
 800988c:	f000 fc64 	bl	800a158 <_init>
 8009890:	1b64      	subs	r4, r4, r5
 8009892:	10a4      	asrs	r4, r4, #2
 8009894:	2600      	movs	r6, #0
 8009896:	42a6      	cmp	r6, r4
 8009898:	d105      	bne.n	80098a6 <__libc_init_array+0x2e>
 800989a:	bd70      	pop	{r4, r5, r6, pc}
 800989c:	f855 3b04 	ldr.w	r3, [r5], #4
 80098a0:	4798      	blx	r3
 80098a2:	3601      	adds	r6, #1
 80098a4:	e7ee      	b.n	8009884 <__libc_init_array+0xc>
 80098a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80098aa:	4798      	blx	r3
 80098ac:	3601      	adds	r6, #1
 80098ae:	e7f2      	b.n	8009896 <__libc_init_array+0x1e>
 80098b0:	0800a490 	.word	0x0800a490
 80098b4:	0800a490 	.word	0x0800a490
 80098b8:	0800a490 	.word	0x0800a490
 80098bc:	0800a494 	.word	0x0800a494

080098c0 <__retarget_lock_acquire_recursive>:
 80098c0:	4770      	bx	lr

080098c2 <__retarget_lock_release_recursive>:
 80098c2:	4770      	bx	lr

080098c4 <memcpy>:
 80098c4:	440a      	add	r2, r1
 80098c6:	4291      	cmp	r1, r2
 80098c8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80098cc:	d100      	bne.n	80098d0 <memcpy+0xc>
 80098ce:	4770      	bx	lr
 80098d0:	b510      	push	{r4, lr}
 80098d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098da:	4291      	cmp	r1, r2
 80098dc:	d1f9      	bne.n	80098d2 <memcpy+0xe>
 80098de:	bd10      	pop	{r4, pc}

080098e0 <_free_r>:
 80098e0:	b538      	push	{r3, r4, r5, lr}
 80098e2:	4605      	mov	r5, r0
 80098e4:	2900      	cmp	r1, #0
 80098e6:	d041      	beq.n	800996c <_free_r+0x8c>
 80098e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098ec:	1f0c      	subs	r4, r1, #4
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	bfb8      	it	lt
 80098f2:	18e4      	addlt	r4, r4, r3
 80098f4:	f000 f8e0 	bl	8009ab8 <__malloc_lock>
 80098f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009970 <_free_r+0x90>)
 80098fa:	6813      	ldr	r3, [r2, #0]
 80098fc:	b933      	cbnz	r3, 800990c <_free_r+0x2c>
 80098fe:	6063      	str	r3, [r4, #4]
 8009900:	6014      	str	r4, [r2, #0]
 8009902:	4628      	mov	r0, r5
 8009904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009908:	f000 b8dc 	b.w	8009ac4 <__malloc_unlock>
 800990c:	42a3      	cmp	r3, r4
 800990e:	d908      	bls.n	8009922 <_free_r+0x42>
 8009910:	6820      	ldr	r0, [r4, #0]
 8009912:	1821      	adds	r1, r4, r0
 8009914:	428b      	cmp	r3, r1
 8009916:	bf01      	itttt	eq
 8009918:	6819      	ldreq	r1, [r3, #0]
 800991a:	685b      	ldreq	r3, [r3, #4]
 800991c:	1809      	addeq	r1, r1, r0
 800991e:	6021      	streq	r1, [r4, #0]
 8009920:	e7ed      	b.n	80098fe <_free_r+0x1e>
 8009922:	461a      	mov	r2, r3
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	b10b      	cbz	r3, 800992c <_free_r+0x4c>
 8009928:	42a3      	cmp	r3, r4
 800992a:	d9fa      	bls.n	8009922 <_free_r+0x42>
 800992c:	6811      	ldr	r1, [r2, #0]
 800992e:	1850      	adds	r0, r2, r1
 8009930:	42a0      	cmp	r0, r4
 8009932:	d10b      	bne.n	800994c <_free_r+0x6c>
 8009934:	6820      	ldr	r0, [r4, #0]
 8009936:	4401      	add	r1, r0
 8009938:	1850      	adds	r0, r2, r1
 800993a:	4283      	cmp	r3, r0
 800993c:	6011      	str	r1, [r2, #0]
 800993e:	d1e0      	bne.n	8009902 <_free_r+0x22>
 8009940:	6818      	ldr	r0, [r3, #0]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	6053      	str	r3, [r2, #4]
 8009946:	4408      	add	r0, r1
 8009948:	6010      	str	r0, [r2, #0]
 800994a:	e7da      	b.n	8009902 <_free_r+0x22>
 800994c:	d902      	bls.n	8009954 <_free_r+0x74>
 800994e:	230c      	movs	r3, #12
 8009950:	602b      	str	r3, [r5, #0]
 8009952:	e7d6      	b.n	8009902 <_free_r+0x22>
 8009954:	6820      	ldr	r0, [r4, #0]
 8009956:	1821      	adds	r1, r4, r0
 8009958:	428b      	cmp	r3, r1
 800995a:	bf04      	itt	eq
 800995c:	6819      	ldreq	r1, [r3, #0]
 800995e:	685b      	ldreq	r3, [r3, #4]
 8009960:	6063      	str	r3, [r4, #4]
 8009962:	bf04      	itt	eq
 8009964:	1809      	addeq	r1, r1, r0
 8009966:	6021      	streq	r1, [r4, #0]
 8009968:	6054      	str	r4, [r2, #4]
 800996a:	e7ca      	b.n	8009902 <_free_r+0x22>
 800996c:	bd38      	pop	{r3, r4, r5, pc}
 800996e:	bf00      	nop
 8009970:	2000145c 	.word	0x2000145c

08009974 <sbrk_aligned>:
 8009974:	b570      	push	{r4, r5, r6, lr}
 8009976:	4e0f      	ldr	r6, [pc, #60]	@ (80099b4 <sbrk_aligned+0x40>)
 8009978:	460c      	mov	r4, r1
 800997a:	6831      	ldr	r1, [r6, #0]
 800997c:	4605      	mov	r5, r0
 800997e:	b911      	cbnz	r1, 8009986 <sbrk_aligned+0x12>
 8009980:	f000 fba4 	bl	800a0cc <_sbrk_r>
 8009984:	6030      	str	r0, [r6, #0]
 8009986:	4621      	mov	r1, r4
 8009988:	4628      	mov	r0, r5
 800998a:	f000 fb9f 	bl	800a0cc <_sbrk_r>
 800998e:	1c43      	adds	r3, r0, #1
 8009990:	d103      	bne.n	800999a <sbrk_aligned+0x26>
 8009992:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009996:	4620      	mov	r0, r4
 8009998:	bd70      	pop	{r4, r5, r6, pc}
 800999a:	1cc4      	adds	r4, r0, #3
 800999c:	f024 0403 	bic.w	r4, r4, #3
 80099a0:	42a0      	cmp	r0, r4
 80099a2:	d0f8      	beq.n	8009996 <sbrk_aligned+0x22>
 80099a4:	1a21      	subs	r1, r4, r0
 80099a6:	4628      	mov	r0, r5
 80099a8:	f000 fb90 	bl	800a0cc <_sbrk_r>
 80099ac:	3001      	adds	r0, #1
 80099ae:	d1f2      	bne.n	8009996 <sbrk_aligned+0x22>
 80099b0:	e7ef      	b.n	8009992 <sbrk_aligned+0x1e>
 80099b2:	bf00      	nop
 80099b4:	20001458 	.word	0x20001458

080099b8 <_malloc_r>:
 80099b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099bc:	1ccd      	adds	r5, r1, #3
 80099be:	f025 0503 	bic.w	r5, r5, #3
 80099c2:	3508      	adds	r5, #8
 80099c4:	2d0c      	cmp	r5, #12
 80099c6:	bf38      	it	cc
 80099c8:	250c      	movcc	r5, #12
 80099ca:	2d00      	cmp	r5, #0
 80099cc:	4606      	mov	r6, r0
 80099ce:	db01      	blt.n	80099d4 <_malloc_r+0x1c>
 80099d0:	42a9      	cmp	r1, r5
 80099d2:	d904      	bls.n	80099de <_malloc_r+0x26>
 80099d4:	230c      	movs	r3, #12
 80099d6:	6033      	str	r3, [r6, #0]
 80099d8:	2000      	movs	r0, #0
 80099da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ab4 <_malloc_r+0xfc>
 80099e2:	f000 f869 	bl	8009ab8 <__malloc_lock>
 80099e6:	f8d8 3000 	ldr.w	r3, [r8]
 80099ea:	461c      	mov	r4, r3
 80099ec:	bb44      	cbnz	r4, 8009a40 <_malloc_r+0x88>
 80099ee:	4629      	mov	r1, r5
 80099f0:	4630      	mov	r0, r6
 80099f2:	f7ff ffbf 	bl	8009974 <sbrk_aligned>
 80099f6:	1c43      	adds	r3, r0, #1
 80099f8:	4604      	mov	r4, r0
 80099fa:	d158      	bne.n	8009aae <_malloc_r+0xf6>
 80099fc:	f8d8 4000 	ldr.w	r4, [r8]
 8009a00:	4627      	mov	r7, r4
 8009a02:	2f00      	cmp	r7, #0
 8009a04:	d143      	bne.n	8009a8e <_malloc_r+0xd6>
 8009a06:	2c00      	cmp	r4, #0
 8009a08:	d04b      	beq.n	8009aa2 <_malloc_r+0xea>
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	4639      	mov	r1, r7
 8009a0e:	4630      	mov	r0, r6
 8009a10:	eb04 0903 	add.w	r9, r4, r3
 8009a14:	f000 fb5a 	bl	800a0cc <_sbrk_r>
 8009a18:	4581      	cmp	r9, r0
 8009a1a:	d142      	bne.n	8009aa2 <_malloc_r+0xea>
 8009a1c:	6821      	ldr	r1, [r4, #0]
 8009a1e:	1a6d      	subs	r5, r5, r1
 8009a20:	4629      	mov	r1, r5
 8009a22:	4630      	mov	r0, r6
 8009a24:	f7ff ffa6 	bl	8009974 <sbrk_aligned>
 8009a28:	3001      	adds	r0, #1
 8009a2a:	d03a      	beq.n	8009aa2 <_malloc_r+0xea>
 8009a2c:	6823      	ldr	r3, [r4, #0]
 8009a2e:	442b      	add	r3, r5
 8009a30:	6023      	str	r3, [r4, #0]
 8009a32:	f8d8 3000 	ldr.w	r3, [r8]
 8009a36:	685a      	ldr	r2, [r3, #4]
 8009a38:	bb62      	cbnz	r2, 8009a94 <_malloc_r+0xdc>
 8009a3a:	f8c8 7000 	str.w	r7, [r8]
 8009a3e:	e00f      	b.n	8009a60 <_malloc_r+0xa8>
 8009a40:	6822      	ldr	r2, [r4, #0]
 8009a42:	1b52      	subs	r2, r2, r5
 8009a44:	d420      	bmi.n	8009a88 <_malloc_r+0xd0>
 8009a46:	2a0b      	cmp	r2, #11
 8009a48:	d917      	bls.n	8009a7a <_malloc_r+0xc2>
 8009a4a:	1961      	adds	r1, r4, r5
 8009a4c:	42a3      	cmp	r3, r4
 8009a4e:	6025      	str	r5, [r4, #0]
 8009a50:	bf18      	it	ne
 8009a52:	6059      	strne	r1, [r3, #4]
 8009a54:	6863      	ldr	r3, [r4, #4]
 8009a56:	bf08      	it	eq
 8009a58:	f8c8 1000 	streq.w	r1, [r8]
 8009a5c:	5162      	str	r2, [r4, r5]
 8009a5e:	604b      	str	r3, [r1, #4]
 8009a60:	4630      	mov	r0, r6
 8009a62:	f000 f82f 	bl	8009ac4 <__malloc_unlock>
 8009a66:	f104 000b 	add.w	r0, r4, #11
 8009a6a:	1d23      	adds	r3, r4, #4
 8009a6c:	f020 0007 	bic.w	r0, r0, #7
 8009a70:	1ac2      	subs	r2, r0, r3
 8009a72:	bf1c      	itt	ne
 8009a74:	1a1b      	subne	r3, r3, r0
 8009a76:	50a3      	strne	r3, [r4, r2]
 8009a78:	e7af      	b.n	80099da <_malloc_r+0x22>
 8009a7a:	6862      	ldr	r2, [r4, #4]
 8009a7c:	42a3      	cmp	r3, r4
 8009a7e:	bf0c      	ite	eq
 8009a80:	f8c8 2000 	streq.w	r2, [r8]
 8009a84:	605a      	strne	r2, [r3, #4]
 8009a86:	e7eb      	b.n	8009a60 <_malloc_r+0xa8>
 8009a88:	4623      	mov	r3, r4
 8009a8a:	6864      	ldr	r4, [r4, #4]
 8009a8c:	e7ae      	b.n	80099ec <_malloc_r+0x34>
 8009a8e:	463c      	mov	r4, r7
 8009a90:	687f      	ldr	r7, [r7, #4]
 8009a92:	e7b6      	b.n	8009a02 <_malloc_r+0x4a>
 8009a94:	461a      	mov	r2, r3
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	42a3      	cmp	r3, r4
 8009a9a:	d1fb      	bne.n	8009a94 <_malloc_r+0xdc>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	6053      	str	r3, [r2, #4]
 8009aa0:	e7de      	b.n	8009a60 <_malloc_r+0xa8>
 8009aa2:	230c      	movs	r3, #12
 8009aa4:	6033      	str	r3, [r6, #0]
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	f000 f80c 	bl	8009ac4 <__malloc_unlock>
 8009aac:	e794      	b.n	80099d8 <_malloc_r+0x20>
 8009aae:	6005      	str	r5, [r0, #0]
 8009ab0:	e7d6      	b.n	8009a60 <_malloc_r+0xa8>
 8009ab2:	bf00      	nop
 8009ab4:	2000145c 	.word	0x2000145c

08009ab8 <__malloc_lock>:
 8009ab8:	4801      	ldr	r0, [pc, #4]	@ (8009ac0 <__malloc_lock+0x8>)
 8009aba:	f7ff bf01 	b.w	80098c0 <__retarget_lock_acquire_recursive>
 8009abe:	bf00      	nop
 8009ac0:	20001454 	.word	0x20001454

08009ac4 <__malloc_unlock>:
 8009ac4:	4801      	ldr	r0, [pc, #4]	@ (8009acc <__malloc_unlock+0x8>)
 8009ac6:	f7ff befc 	b.w	80098c2 <__retarget_lock_release_recursive>
 8009aca:	bf00      	nop
 8009acc:	20001454 	.word	0x20001454

08009ad0 <__ssputs_r>:
 8009ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad4:	688e      	ldr	r6, [r1, #8]
 8009ad6:	461f      	mov	r7, r3
 8009ad8:	42be      	cmp	r6, r7
 8009ada:	680b      	ldr	r3, [r1, #0]
 8009adc:	4682      	mov	sl, r0
 8009ade:	460c      	mov	r4, r1
 8009ae0:	4690      	mov	r8, r2
 8009ae2:	d82d      	bhi.n	8009b40 <__ssputs_r+0x70>
 8009ae4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ae8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009aec:	d026      	beq.n	8009b3c <__ssputs_r+0x6c>
 8009aee:	6965      	ldr	r5, [r4, #20]
 8009af0:	6909      	ldr	r1, [r1, #16]
 8009af2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009af6:	eba3 0901 	sub.w	r9, r3, r1
 8009afa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009afe:	1c7b      	adds	r3, r7, #1
 8009b00:	444b      	add	r3, r9
 8009b02:	106d      	asrs	r5, r5, #1
 8009b04:	429d      	cmp	r5, r3
 8009b06:	bf38      	it	cc
 8009b08:	461d      	movcc	r5, r3
 8009b0a:	0553      	lsls	r3, r2, #21
 8009b0c:	d527      	bpl.n	8009b5e <__ssputs_r+0x8e>
 8009b0e:	4629      	mov	r1, r5
 8009b10:	f7ff ff52 	bl	80099b8 <_malloc_r>
 8009b14:	4606      	mov	r6, r0
 8009b16:	b360      	cbz	r0, 8009b72 <__ssputs_r+0xa2>
 8009b18:	6921      	ldr	r1, [r4, #16]
 8009b1a:	464a      	mov	r2, r9
 8009b1c:	f7ff fed2 	bl	80098c4 <memcpy>
 8009b20:	89a3      	ldrh	r3, [r4, #12]
 8009b22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b2a:	81a3      	strh	r3, [r4, #12]
 8009b2c:	6126      	str	r6, [r4, #16]
 8009b2e:	6165      	str	r5, [r4, #20]
 8009b30:	444e      	add	r6, r9
 8009b32:	eba5 0509 	sub.w	r5, r5, r9
 8009b36:	6026      	str	r6, [r4, #0]
 8009b38:	60a5      	str	r5, [r4, #8]
 8009b3a:	463e      	mov	r6, r7
 8009b3c:	42be      	cmp	r6, r7
 8009b3e:	d900      	bls.n	8009b42 <__ssputs_r+0x72>
 8009b40:	463e      	mov	r6, r7
 8009b42:	6820      	ldr	r0, [r4, #0]
 8009b44:	4632      	mov	r2, r6
 8009b46:	4641      	mov	r1, r8
 8009b48:	f000 faa6 	bl	800a098 <memmove>
 8009b4c:	68a3      	ldr	r3, [r4, #8]
 8009b4e:	1b9b      	subs	r3, r3, r6
 8009b50:	60a3      	str	r3, [r4, #8]
 8009b52:	6823      	ldr	r3, [r4, #0]
 8009b54:	4433      	add	r3, r6
 8009b56:	6023      	str	r3, [r4, #0]
 8009b58:	2000      	movs	r0, #0
 8009b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b5e:	462a      	mov	r2, r5
 8009b60:	f000 fac4 	bl	800a0ec <_realloc_r>
 8009b64:	4606      	mov	r6, r0
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d1e0      	bne.n	8009b2c <__ssputs_r+0x5c>
 8009b6a:	6921      	ldr	r1, [r4, #16]
 8009b6c:	4650      	mov	r0, sl
 8009b6e:	f7ff feb7 	bl	80098e0 <_free_r>
 8009b72:	230c      	movs	r3, #12
 8009b74:	f8ca 3000 	str.w	r3, [sl]
 8009b78:	89a3      	ldrh	r3, [r4, #12]
 8009b7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b7e:	81a3      	strh	r3, [r4, #12]
 8009b80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b84:	e7e9      	b.n	8009b5a <__ssputs_r+0x8a>
	...

08009b88 <_svfiprintf_r>:
 8009b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b8c:	4698      	mov	r8, r3
 8009b8e:	898b      	ldrh	r3, [r1, #12]
 8009b90:	061b      	lsls	r3, r3, #24
 8009b92:	b09d      	sub	sp, #116	@ 0x74
 8009b94:	4607      	mov	r7, r0
 8009b96:	460d      	mov	r5, r1
 8009b98:	4614      	mov	r4, r2
 8009b9a:	d510      	bpl.n	8009bbe <_svfiprintf_r+0x36>
 8009b9c:	690b      	ldr	r3, [r1, #16]
 8009b9e:	b973      	cbnz	r3, 8009bbe <_svfiprintf_r+0x36>
 8009ba0:	2140      	movs	r1, #64	@ 0x40
 8009ba2:	f7ff ff09 	bl	80099b8 <_malloc_r>
 8009ba6:	6028      	str	r0, [r5, #0]
 8009ba8:	6128      	str	r0, [r5, #16]
 8009baa:	b930      	cbnz	r0, 8009bba <_svfiprintf_r+0x32>
 8009bac:	230c      	movs	r3, #12
 8009bae:	603b      	str	r3, [r7, #0]
 8009bb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bb4:	b01d      	add	sp, #116	@ 0x74
 8009bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bba:	2340      	movs	r3, #64	@ 0x40
 8009bbc:	616b      	str	r3, [r5, #20]
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bc2:	2320      	movs	r3, #32
 8009bc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009bc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bcc:	2330      	movs	r3, #48	@ 0x30
 8009bce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009d6c <_svfiprintf_r+0x1e4>
 8009bd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009bd6:	f04f 0901 	mov.w	r9, #1
 8009bda:	4623      	mov	r3, r4
 8009bdc:	469a      	mov	sl, r3
 8009bde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009be2:	b10a      	cbz	r2, 8009be8 <_svfiprintf_r+0x60>
 8009be4:	2a25      	cmp	r2, #37	@ 0x25
 8009be6:	d1f9      	bne.n	8009bdc <_svfiprintf_r+0x54>
 8009be8:	ebba 0b04 	subs.w	fp, sl, r4
 8009bec:	d00b      	beq.n	8009c06 <_svfiprintf_r+0x7e>
 8009bee:	465b      	mov	r3, fp
 8009bf0:	4622      	mov	r2, r4
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	4638      	mov	r0, r7
 8009bf6:	f7ff ff6b 	bl	8009ad0 <__ssputs_r>
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	f000 80a7 	beq.w	8009d4e <_svfiprintf_r+0x1c6>
 8009c00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c02:	445a      	add	r2, fp
 8009c04:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c06:	f89a 3000 	ldrb.w	r3, [sl]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f000 809f 	beq.w	8009d4e <_svfiprintf_r+0x1c6>
 8009c10:	2300      	movs	r3, #0
 8009c12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c1a:	f10a 0a01 	add.w	sl, sl, #1
 8009c1e:	9304      	str	r3, [sp, #16]
 8009c20:	9307      	str	r3, [sp, #28]
 8009c22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c26:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c28:	4654      	mov	r4, sl
 8009c2a:	2205      	movs	r2, #5
 8009c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c30:	484e      	ldr	r0, [pc, #312]	@ (8009d6c <_svfiprintf_r+0x1e4>)
 8009c32:	f7f6 facd 	bl	80001d0 <memchr>
 8009c36:	9a04      	ldr	r2, [sp, #16]
 8009c38:	b9d8      	cbnz	r0, 8009c72 <_svfiprintf_r+0xea>
 8009c3a:	06d0      	lsls	r0, r2, #27
 8009c3c:	bf44      	itt	mi
 8009c3e:	2320      	movmi	r3, #32
 8009c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c44:	0711      	lsls	r1, r2, #28
 8009c46:	bf44      	itt	mi
 8009c48:	232b      	movmi	r3, #43	@ 0x2b
 8009c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8009c52:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c54:	d015      	beq.n	8009c82 <_svfiprintf_r+0xfa>
 8009c56:	9a07      	ldr	r2, [sp, #28]
 8009c58:	4654      	mov	r4, sl
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	f04f 0c0a 	mov.w	ip, #10
 8009c60:	4621      	mov	r1, r4
 8009c62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c66:	3b30      	subs	r3, #48	@ 0x30
 8009c68:	2b09      	cmp	r3, #9
 8009c6a:	d94b      	bls.n	8009d04 <_svfiprintf_r+0x17c>
 8009c6c:	b1b0      	cbz	r0, 8009c9c <_svfiprintf_r+0x114>
 8009c6e:	9207      	str	r2, [sp, #28]
 8009c70:	e014      	b.n	8009c9c <_svfiprintf_r+0x114>
 8009c72:	eba0 0308 	sub.w	r3, r0, r8
 8009c76:	fa09 f303 	lsl.w	r3, r9, r3
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	9304      	str	r3, [sp, #16]
 8009c7e:	46a2      	mov	sl, r4
 8009c80:	e7d2      	b.n	8009c28 <_svfiprintf_r+0xa0>
 8009c82:	9b03      	ldr	r3, [sp, #12]
 8009c84:	1d19      	adds	r1, r3, #4
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	9103      	str	r1, [sp, #12]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	bfbb      	ittet	lt
 8009c8e:	425b      	neglt	r3, r3
 8009c90:	f042 0202 	orrlt.w	r2, r2, #2
 8009c94:	9307      	strge	r3, [sp, #28]
 8009c96:	9307      	strlt	r3, [sp, #28]
 8009c98:	bfb8      	it	lt
 8009c9a:	9204      	strlt	r2, [sp, #16]
 8009c9c:	7823      	ldrb	r3, [r4, #0]
 8009c9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ca0:	d10a      	bne.n	8009cb8 <_svfiprintf_r+0x130>
 8009ca2:	7863      	ldrb	r3, [r4, #1]
 8009ca4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ca6:	d132      	bne.n	8009d0e <_svfiprintf_r+0x186>
 8009ca8:	9b03      	ldr	r3, [sp, #12]
 8009caa:	1d1a      	adds	r2, r3, #4
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	9203      	str	r2, [sp, #12]
 8009cb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cb4:	3402      	adds	r4, #2
 8009cb6:	9305      	str	r3, [sp, #20]
 8009cb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009d7c <_svfiprintf_r+0x1f4>
 8009cbc:	7821      	ldrb	r1, [r4, #0]
 8009cbe:	2203      	movs	r2, #3
 8009cc0:	4650      	mov	r0, sl
 8009cc2:	f7f6 fa85 	bl	80001d0 <memchr>
 8009cc6:	b138      	cbz	r0, 8009cd8 <_svfiprintf_r+0x150>
 8009cc8:	9b04      	ldr	r3, [sp, #16]
 8009cca:	eba0 000a 	sub.w	r0, r0, sl
 8009cce:	2240      	movs	r2, #64	@ 0x40
 8009cd0:	4082      	lsls	r2, r0
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	3401      	adds	r4, #1
 8009cd6:	9304      	str	r3, [sp, #16]
 8009cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cdc:	4824      	ldr	r0, [pc, #144]	@ (8009d70 <_svfiprintf_r+0x1e8>)
 8009cde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ce2:	2206      	movs	r2, #6
 8009ce4:	f7f6 fa74 	bl	80001d0 <memchr>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	d036      	beq.n	8009d5a <_svfiprintf_r+0x1d2>
 8009cec:	4b21      	ldr	r3, [pc, #132]	@ (8009d74 <_svfiprintf_r+0x1ec>)
 8009cee:	bb1b      	cbnz	r3, 8009d38 <_svfiprintf_r+0x1b0>
 8009cf0:	9b03      	ldr	r3, [sp, #12]
 8009cf2:	3307      	adds	r3, #7
 8009cf4:	f023 0307 	bic.w	r3, r3, #7
 8009cf8:	3308      	adds	r3, #8
 8009cfa:	9303      	str	r3, [sp, #12]
 8009cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cfe:	4433      	add	r3, r6
 8009d00:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d02:	e76a      	b.n	8009bda <_svfiprintf_r+0x52>
 8009d04:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d08:	460c      	mov	r4, r1
 8009d0a:	2001      	movs	r0, #1
 8009d0c:	e7a8      	b.n	8009c60 <_svfiprintf_r+0xd8>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	3401      	adds	r4, #1
 8009d12:	9305      	str	r3, [sp, #20]
 8009d14:	4619      	mov	r1, r3
 8009d16:	f04f 0c0a 	mov.w	ip, #10
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d20:	3a30      	subs	r2, #48	@ 0x30
 8009d22:	2a09      	cmp	r2, #9
 8009d24:	d903      	bls.n	8009d2e <_svfiprintf_r+0x1a6>
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d0c6      	beq.n	8009cb8 <_svfiprintf_r+0x130>
 8009d2a:	9105      	str	r1, [sp, #20]
 8009d2c:	e7c4      	b.n	8009cb8 <_svfiprintf_r+0x130>
 8009d2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d32:	4604      	mov	r4, r0
 8009d34:	2301      	movs	r3, #1
 8009d36:	e7f0      	b.n	8009d1a <_svfiprintf_r+0x192>
 8009d38:	ab03      	add	r3, sp, #12
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	462a      	mov	r2, r5
 8009d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8009d78 <_svfiprintf_r+0x1f0>)
 8009d40:	a904      	add	r1, sp, #16
 8009d42:	4638      	mov	r0, r7
 8009d44:	f3af 8000 	nop.w
 8009d48:	1c42      	adds	r2, r0, #1
 8009d4a:	4606      	mov	r6, r0
 8009d4c:	d1d6      	bne.n	8009cfc <_svfiprintf_r+0x174>
 8009d4e:	89ab      	ldrh	r3, [r5, #12]
 8009d50:	065b      	lsls	r3, r3, #25
 8009d52:	f53f af2d 	bmi.w	8009bb0 <_svfiprintf_r+0x28>
 8009d56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d58:	e72c      	b.n	8009bb4 <_svfiprintf_r+0x2c>
 8009d5a:	ab03      	add	r3, sp, #12
 8009d5c:	9300      	str	r3, [sp, #0]
 8009d5e:	462a      	mov	r2, r5
 8009d60:	4b05      	ldr	r3, [pc, #20]	@ (8009d78 <_svfiprintf_r+0x1f0>)
 8009d62:	a904      	add	r1, sp, #16
 8009d64:	4638      	mov	r0, r7
 8009d66:	f000 f879 	bl	8009e5c <_printf_i>
 8009d6a:	e7ed      	b.n	8009d48 <_svfiprintf_r+0x1c0>
 8009d6c:	0800a454 	.word	0x0800a454
 8009d70:	0800a45e 	.word	0x0800a45e
 8009d74:	00000000 	.word	0x00000000
 8009d78:	08009ad1 	.word	0x08009ad1
 8009d7c:	0800a45a 	.word	0x0800a45a

08009d80 <_printf_common>:
 8009d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d84:	4616      	mov	r6, r2
 8009d86:	4698      	mov	r8, r3
 8009d88:	688a      	ldr	r2, [r1, #8]
 8009d8a:	690b      	ldr	r3, [r1, #16]
 8009d8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d90:	4293      	cmp	r3, r2
 8009d92:	bfb8      	it	lt
 8009d94:	4613      	movlt	r3, r2
 8009d96:	6033      	str	r3, [r6, #0]
 8009d98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d9c:	4607      	mov	r7, r0
 8009d9e:	460c      	mov	r4, r1
 8009da0:	b10a      	cbz	r2, 8009da6 <_printf_common+0x26>
 8009da2:	3301      	adds	r3, #1
 8009da4:	6033      	str	r3, [r6, #0]
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	0699      	lsls	r1, r3, #26
 8009daa:	bf42      	ittt	mi
 8009dac:	6833      	ldrmi	r3, [r6, #0]
 8009dae:	3302      	addmi	r3, #2
 8009db0:	6033      	strmi	r3, [r6, #0]
 8009db2:	6825      	ldr	r5, [r4, #0]
 8009db4:	f015 0506 	ands.w	r5, r5, #6
 8009db8:	d106      	bne.n	8009dc8 <_printf_common+0x48>
 8009dba:	f104 0a19 	add.w	sl, r4, #25
 8009dbe:	68e3      	ldr	r3, [r4, #12]
 8009dc0:	6832      	ldr	r2, [r6, #0]
 8009dc2:	1a9b      	subs	r3, r3, r2
 8009dc4:	42ab      	cmp	r3, r5
 8009dc6:	dc26      	bgt.n	8009e16 <_printf_common+0x96>
 8009dc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009dcc:	6822      	ldr	r2, [r4, #0]
 8009dce:	3b00      	subs	r3, #0
 8009dd0:	bf18      	it	ne
 8009dd2:	2301      	movne	r3, #1
 8009dd4:	0692      	lsls	r2, r2, #26
 8009dd6:	d42b      	bmi.n	8009e30 <_printf_common+0xb0>
 8009dd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009ddc:	4641      	mov	r1, r8
 8009dde:	4638      	mov	r0, r7
 8009de0:	47c8      	blx	r9
 8009de2:	3001      	adds	r0, #1
 8009de4:	d01e      	beq.n	8009e24 <_printf_common+0xa4>
 8009de6:	6823      	ldr	r3, [r4, #0]
 8009de8:	6922      	ldr	r2, [r4, #16]
 8009dea:	f003 0306 	and.w	r3, r3, #6
 8009dee:	2b04      	cmp	r3, #4
 8009df0:	bf02      	ittt	eq
 8009df2:	68e5      	ldreq	r5, [r4, #12]
 8009df4:	6833      	ldreq	r3, [r6, #0]
 8009df6:	1aed      	subeq	r5, r5, r3
 8009df8:	68a3      	ldr	r3, [r4, #8]
 8009dfa:	bf0c      	ite	eq
 8009dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e00:	2500      	movne	r5, #0
 8009e02:	4293      	cmp	r3, r2
 8009e04:	bfc4      	itt	gt
 8009e06:	1a9b      	subgt	r3, r3, r2
 8009e08:	18ed      	addgt	r5, r5, r3
 8009e0a:	2600      	movs	r6, #0
 8009e0c:	341a      	adds	r4, #26
 8009e0e:	42b5      	cmp	r5, r6
 8009e10:	d11a      	bne.n	8009e48 <_printf_common+0xc8>
 8009e12:	2000      	movs	r0, #0
 8009e14:	e008      	b.n	8009e28 <_printf_common+0xa8>
 8009e16:	2301      	movs	r3, #1
 8009e18:	4652      	mov	r2, sl
 8009e1a:	4641      	mov	r1, r8
 8009e1c:	4638      	mov	r0, r7
 8009e1e:	47c8      	blx	r9
 8009e20:	3001      	adds	r0, #1
 8009e22:	d103      	bne.n	8009e2c <_printf_common+0xac>
 8009e24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e2c:	3501      	adds	r5, #1
 8009e2e:	e7c6      	b.n	8009dbe <_printf_common+0x3e>
 8009e30:	18e1      	adds	r1, r4, r3
 8009e32:	1c5a      	adds	r2, r3, #1
 8009e34:	2030      	movs	r0, #48	@ 0x30
 8009e36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e3a:	4422      	add	r2, r4
 8009e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e44:	3302      	adds	r3, #2
 8009e46:	e7c7      	b.n	8009dd8 <_printf_common+0x58>
 8009e48:	2301      	movs	r3, #1
 8009e4a:	4622      	mov	r2, r4
 8009e4c:	4641      	mov	r1, r8
 8009e4e:	4638      	mov	r0, r7
 8009e50:	47c8      	blx	r9
 8009e52:	3001      	adds	r0, #1
 8009e54:	d0e6      	beq.n	8009e24 <_printf_common+0xa4>
 8009e56:	3601      	adds	r6, #1
 8009e58:	e7d9      	b.n	8009e0e <_printf_common+0x8e>
	...

08009e5c <_printf_i>:
 8009e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e60:	7e0f      	ldrb	r7, [r1, #24]
 8009e62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e64:	2f78      	cmp	r7, #120	@ 0x78
 8009e66:	4691      	mov	r9, r2
 8009e68:	4680      	mov	r8, r0
 8009e6a:	460c      	mov	r4, r1
 8009e6c:	469a      	mov	sl, r3
 8009e6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e72:	d807      	bhi.n	8009e84 <_printf_i+0x28>
 8009e74:	2f62      	cmp	r7, #98	@ 0x62
 8009e76:	d80a      	bhi.n	8009e8e <_printf_i+0x32>
 8009e78:	2f00      	cmp	r7, #0
 8009e7a:	f000 80d1 	beq.w	800a020 <_printf_i+0x1c4>
 8009e7e:	2f58      	cmp	r7, #88	@ 0x58
 8009e80:	f000 80b8 	beq.w	8009ff4 <_printf_i+0x198>
 8009e84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e8c:	e03a      	b.n	8009f04 <_printf_i+0xa8>
 8009e8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e92:	2b15      	cmp	r3, #21
 8009e94:	d8f6      	bhi.n	8009e84 <_printf_i+0x28>
 8009e96:	a101      	add	r1, pc, #4	@ (adr r1, 8009e9c <_printf_i+0x40>)
 8009e98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e9c:	08009ef5 	.word	0x08009ef5
 8009ea0:	08009f09 	.word	0x08009f09
 8009ea4:	08009e85 	.word	0x08009e85
 8009ea8:	08009e85 	.word	0x08009e85
 8009eac:	08009e85 	.word	0x08009e85
 8009eb0:	08009e85 	.word	0x08009e85
 8009eb4:	08009f09 	.word	0x08009f09
 8009eb8:	08009e85 	.word	0x08009e85
 8009ebc:	08009e85 	.word	0x08009e85
 8009ec0:	08009e85 	.word	0x08009e85
 8009ec4:	08009e85 	.word	0x08009e85
 8009ec8:	0800a007 	.word	0x0800a007
 8009ecc:	08009f33 	.word	0x08009f33
 8009ed0:	08009fc1 	.word	0x08009fc1
 8009ed4:	08009e85 	.word	0x08009e85
 8009ed8:	08009e85 	.word	0x08009e85
 8009edc:	0800a029 	.word	0x0800a029
 8009ee0:	08009e85 	.word	0x08009e85
 8009ee4:	08009f33 	.word	0x08009f33
 8009ee8:	08009e85 	.word	0x08009e85
 8009eec:	08009e85 	.word	0x08009e85
 8009ef0:	08009fc9 	.word	0x08009fc9
 8009ef4:	6833      	ldr	r3, [r6, #0]
 8009ef6:	1d1a      	adds	r2, r3, #4
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	6032      	str	r2, [r6, #0]
 8009efc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f04:	2301      	movs	r3, #1
 8009f06:	e09c      	b.n	800a042 <_printf_i+0x1e6>
 8009f08:	6833      	ldr	r3, [r6, #0]
 8009f0a:	6820      	ldr	r0, [r4, #0]
 8009f0c:	1d19      	adds	r1, r3, #4
 8009f0e:	6031      	str	r1, [r6, #0]
 8009f10:	0606      	lsls	r6, r0, #24
 8009f12:	d501      	bpl.n	8009f18 <_printf_i+0xbc>
 8009f14:	681d      	ldr	r5, [r3, #0]
 8009f16:	e003      	b.n	8009f20 <_printf_i+0xc4>
 8009f18:	0645      	lsls	r5, r0, #25
 8009f1a:	d5fb      	bpl.n	8009f14 <_printf_i+0xb8>
 8009f1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f20:	2d00      	cmp	r5, #0
 8009f22:	da03      	bge.n	8009f2c <_printf_i+0xd0>
 8009f24:	232d      	movs	r3, #45	@ 0x2d
 8009f26:	426d      	negs	r5, r5
 8009f28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f2c:	4858      	ldr	r0, [pc, #352]	@ (800a090 <_printf_i+0x234>)
 8009f2e:	230a      	movs	r3, #10
 8009f30:	e011      	b.n	8009f56 <_printf_i+0xfa>
 8009f32:	6821      	ldr	r1, [r4, #0]
 8009f34:	6833      	ldr	r3, [r6, #0]
 8009f36:	0608      	lsls	r0, r1, #24
 8009f38:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f3c:	d402      	bmi.n	8009f44 <_printf_i+0xe8>
 8009f3e:	0649      	lsls	r1, r1, #25
 8009f40:	bf48      	it	mi
 8009f42:	b2ad      	uxthmi	r5, r5
 8009f44:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f46:	4852      	ldr	r0, [pc, #328]	@ (800a090 <_printf_i+0x234>)
 8009f48:	6033      	str	r3, [r6, #0]
 8009f4a:	bf14      	ite	ne
 8009f4c:	230a      	movne	r3, #10
 8009f4e:	2308      	moveq	r3, #8
 8009f50:	2100      	movs	r1, #0
 8009f52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f56:	6866      	ldr	r6, [r4, #4]
 8009f58:	60a6      	str	r6, [r4, #8]
 8009f5a:	2e00      	cmp	r6, #0
 8009f5c:	db05      	blt.n	8009f6a <_printf_i+0x10e>
 8009f5e:	6821      	ldr	r1, [r4, #0]
 8009f60:	432e      	orrs	r6, r5
 8009f62:	f021 0104 	bic.w	r1, r1, #4
 8009f66:	6021      	str	r1, [r4, #0]
 8009f68:	d04b      	beq.n	800a002 <_printf_i+0x1a6>
 8009f6a:	4616      	mov	r6, r2
 8009f6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f70:	fb03 5711 	mls	r7, r3, r1, r5
 8009f74:	5dc7      	ldrb	r7, [r0, r7]
 8009f76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f7a:	462f      	mov	r7, r5
 8009f7c:	42bb      	cmp	r3, r7
 8009f7e:	460d      	mov	r5, r1
 8009f80:	d9f4      	bls.n	8009f6c <_printf_i+0x110>
 8009f82:	2b08      	cmp	r3, #8
 8009f84:	d10b      	bne.n	8009f9e <_printf_i+0x142>
 8009f86:	6823      	ldr	r3, [r4, #0]
 8009f88:	07df      	lsls	r7, r3, #31
 8009f8a:	d508      	bpl.n	8009f9e <_printf_i+0x142>
 8009f8c:	6923      	ldr	r3, [r4, #16]
 8009f8e:	6861      	ldr	r1, [r4, #4]
 8009f90:	4299      	cmp	r1, r3
 8009f92:	bfde      	ittt	le
 8009f94:	2330      	movle	r3, #48	@ 0x30
 8009f96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f9a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009f9e:	1b92      	subs	r2, r2, r6
 8009fa0:	6122      	str	r2, [r4, #16]
 8009fa2:	f8cd a000 	str.w	sl, [sp]
 8009fa6:	464b      	mov	r3, r9
 8009fa8:	aa03      	add	r2, sp, #12
 8009faa:	4621      	mov	r1, r4
 8009fac:	4640      	mov	r0, r8
 8009fae:	f7ff fee7 	bl	8009d80 <_printf_common>
 8009fb2:	3001      	adds	r0, #1
 8009fb4:	d14a      	bne.n	800a04c <_printf_i+0x1f0>
 8009fb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009fba:	b004      	add	sp, #16
 8009fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc0:	6823      	ldr	r3, [r4, #0]
 8009fc2:	f043 0320 	orr.w	r3, r3, #32
 8009fc6:	6023      	str	r3, [r4, #0]
 8009fc8:	4832      	ldr	r0, [pc, #200]	@ (800a094 <_printf_i+0x238>)
 8009fca:	2778      	movs	r7, #120	@ 0x78
 8009fcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009fd0:	6823      	ldr	r3, [r4, #0]
 8009fd2:	6831      	ldr	r1, [r6, #0]
 8009fd4:	061f      	lsls	r7, r3, #24
 8009fd6:	f851 5b04 	ldr.w	r5, [r1], #4
 8009fda:	d402      	bmi.n	8009fe2 <_printf_i+0x186>
 8009fdc:	065f      	lsls	r7, r3, #25
 8009fde:	bf48      	it	mi
 8009fe0:	b2ad      	uxthmi	r5, r5
 8009fe2:	6031      	str	r1, [r6, #0]
 8009fe4:	07d9      	lsls	r1, r3, #31
 8009fe6:	bf44      	itt	mi
 8009fe8:	f043 0320 	orrmi.w	r3, r3, #32
 8009fec:	6023      	strmi	r3, [r4, #0]
 8009fee:	b11d      	cbz	r5, 8009ff8 <_printf_i+0x19c>
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	e7ad      	b.n	8009f50 <_printf_i+0xf4>
 8009ff4:	4826      	ldr	r0, [pc, #152]	@ (800a090 <_printf_i+0x234>)
 8009ff6:	e7e9      	b.n	8009fcc <_printf_i+0x170>
 8009ff8:	6823      	ldr	r3, [r4, #0]
 8009ffa:	f023 0320 	bic.w	r3, r3, #32
 8009ffe:	6023      	str	r3, [r4, #0]
 800a000:	e7f6      	b.n	8009ff0 <_printf_i+0x194>
 800a002:	4616      	mov	r6, r2
 800a004:	e7bd      	b.n	8009f82 <_printf_i+0x126>
 800a006:	6833      	ldr	r3, [r6, #0]
 800a008:	6825      	ldr	r5, [r4, #0]
 800a00a:	6961      	ldr	r1, [r4, #20]
 800a00c:	1d18      	adds	r0, r3, #4
 800a00e:	6030      	str	r0, [r6, #0]
 800a010:	062e      	lsls	r6, r5, #24
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	d501      	bpl.n	800a01a <_printf_i+0x1be>
 800a016:	6019      	str	r1, [r3, #0]
 800a018:	e002      	b.n	800a020 <_printf_i+0x1c4>
 800a01a:	0668      	lsls	r0, r5, #25
 800a01c:	d5fb      	bpl.n	800a016 <_printf_i+0x1ba>
 800a01e:	8019      	strh	r1, [r3, #0]
 800a020:	2300      	movs	r3, #0
 800a022:	6123      	str	r3, [r4, #16]
 800a024:	4616      	mov	r6, r2
 800a026:	e7bc      	b.n	8009fa2 <_printf_i+0x146>
 800a028:	6833      	ldr	r3, [r6, #0]
 800a02a:	1d1a      	adds	r2, r3, #4
 800a02c:	6032      	str	r2, [r6, #0]
 800a02e:	681e      	ldr	r6, [r3, #0]
 800a030:	6862      	ldr	r2, [r4, #4]
 800a032:	2100      	movs	r1, #0
 800a034:	4630      	mov	r0, r6
 800a036:	f7f6 f8cb 	bl	80001d0 <memchr>
 800a03a:	b108      	cbz	r0, 800a040 <_printf_i+0x1e4>
 800a03c:	1b80      	subs	r0, r0, r6
 800a03e:	6060      	str	r0, [r4, #4]
 800a040:	6863      	ldr	r3, [r4, #4]
 800a042:	6123      	str	r3, [r4, #16]
 800a044:	2300      	movs	r3, #0
 800a046:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a04a:	e7aa      	b.n	8009fa2 <_printf_i+0x146>
 800a04c:	6923      	ldr	r3, [r4, #16]
 800a04e:	4632      	mov	r2, r6
 800a050:	4649      	mov	r1, r9
 800a052:	4640      	mov	r0, r8
 800a054:	47d0      	blx	sl
 800a056:	3001      	adds	r0, #1
 800a058:	d0ad      	beq.n	8009fb6 <_printf_i+0x15a>
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	079b      	lsls	r3, r3, #30
 800a05e:	d413      	bmi.n	800a088 <_printf_i+0x22c>
 800a060:	68e0      	ldr	r0, [r4, #12]
 800a062:	9b03      	ldr	r3, [sp, #12]
 800a064:	4298      	cmp	r0, r3
 800a066:	bfb8      	it	lt
 800a068:	4618      	movlt	r0, r3
 800a06a:	e7a6      	b.n	8009fba <_printf_i+0x15e>
 800a06c:	2301      	movs	r3, #1
 800a06e:	4632      	mov	r2, r6
 800a070:	4649      	mov	r1, r9
 800a072:	4640      	mov	r0, r8
 800a074:	47d0      	blx	sl
 800a076:	3001      	adds	r0, #1
 800a078:	d09d      	beq.n	8009fb6 <_printf_i+0x15a>
 800a07a:	3501      	adds	r5, #1
 800a07c:	68e3      	ldr	r3, [r4, #12]
 800a07e:	9903      	ldr	r1, [sp, #12]
 800a080:	1a5b      	subs	r3, r3, r1
 800a082:	42ab      	cmp	r3, r5
 800a084:	dcf2      	bgt.n	800a06c <_printf_i+0x210>
 800a086:	e7eb      	b.n	800a060 <_printf_i+0x204>
 800a088:	2500      	movs	r5, #0
 800a08a:	f104 0619 	add.w	r6, r4, #25
 800a08e:	e7f5      	b.n	800a07c <_printf_i+0x220>
 800a090:	0800a465 	.word	0x0800a465
 800a094:	0800a476 	.word	0x0800a476

0800a098 <memmove>:
 800a098:	4288      	cmp	r0, r1
 800a09a:	b510      	push	{r4, lr}
 800a09c:	eb01 0402 	add.w	r4, r1, r2
 800a0a0:	d902      	bls.n	800a0a8 <memmove+0x10>
 800a0a2:	4284      	cmp	r4, r0
 800a0a4:	4623      	mov	r3, r4
 800a0a6:	d807      	bhi.n	800a0b8 <memmove+0x20>
 800a0a8:	1e43      	subs	r3, r0, #1
 800a0aa:	42a1      	cmp	r1, r4
 800a0ac:	d008      	beq.n	800a0c0 <memmove+0x28>
 800a0ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0b6:	e7f8      	b.n	800a0aa <memmove+0x12>
 800a0b8:	4402      	add	r2, r0
 800a0ba:	4601      	mov	r1, r0
 800a0bc:	428a      	cmp	r2, r1
 800a0be:	d100      	bne.n	800a0c2 <memmove+0x2a>
 800a0c0:	bd10      	pop	{r4, pc}
 800a0c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0ca:	e7f7      	b.n	800a0bc <memmove+0x24>

0800a0cc <_sbrk_r>:
 800a0cc:	b538      	push	{r3, r4, r5, lr}
 800a0ce:	4d06      	ldr	r5, [pc, #24]	@ (800a0e8 <_sbrk_r+0x1c>)
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	4608      	mov	r0, r1
 800a0d6:	602b      	str	r3, [r5, #0]
 800a0d8:	f7f8 fc64 	bl	80029a4 <_sbrk>
 800a0dc:	1c43      	adds	r3, r0, #1
 800a0de:	d102      	bne.n	800a0e6 <_sbrk_r+0x1a>
 800a0e0:	682b      	ldr	r3, [r5, #0]
 800a0e2:	b103      	cbz	r3, 800a0e6 <_sbrk_r+0x1a>
 800a0e4:	6023      	str	r3, [r4, #0]
 800a0e6:	bd38      	pop	{r3, r4, r5, pc}
 800a0e8:	20001450 	.word	0x20001450

0800a0ec <_realloc_r>:
 800a0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f0:	4607      	mov	r7, r0
 800a0f2:	4614      	mov	r4, r2
 800a0f4:	460d      	mov	r5, r1
 800a0f6:	b921      	cbnz	r1, 800a102 <_realloc_r+0x16>
 800a0f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0fc:	4611      	mov	r1, r2
 800a0fe:	f7ff bc5b 	b.w	80099b8 <_malloc_r>
 800a102:	b92a      	cbnz	r2, 800a110 <_realloc_r+0x24>
 800a104:	f7ff fbec 	bl	80098e0 <_free_r>
 800a108:	4625      	mov	r5, r4
 800a10a:	4628      	mov	r0, r5
 800a10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a110:	f000 f81a 	bl	800a148 <_malloc_usable_size_r>
 800a114:	4284      	cmp	r4, r0
 800a116:	4606      	mov	r6, r0
 800a118:	d802      	bhi.n	800a120 <_realloc_r+0x34>
 800a11a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a11e:	d8f4      	bhi.n	800a10a <_realloc_r+0x1e>
 800a120:	4621      	mov	r1, r4
 800a122:	4638      	mov	r0, r7
 800a124:	f7ff fc48 	bl	80099b8 <_malloc_r>
 800a128:	4680      	mov	r8, r0
 800a12a:	b908      	cbnz	r0, 800a130 <_realloc_r+0x44>
 800a12c:	4645      	mov	r5, r8
 800a12e:	e7ec      	b.n	800a10a <_realloc_r+0x1e>
 800a130:	42b4      	cmp	r4, r6
 800a132:	4622      	mov	r2, r4
 800a134:	4629      	mov	r1, r5
 800a136:	bf28      	it	cs
 800a138:	4632      	movcs	r2, r6
 800a13a:	f7ff fbc3 	bl	80098c4 <memcpy>
 800a13e:	4629      	mov	r1, r5
 800a140:	4638      	mov	r0, r7
 800a142:	f7ff fbcd 	bl	80098e0 <_free_r>
 800a146:	e7f1      	b.n	800a12c <_realloc_r+0x40>

0800a148 <_malloc_usable_size_r>:
 800a148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a14c:	1f18      	subs	r0, r3, #4
 800a14e:	2b00      	cmp	r3, #0
 800a150:	bfbc      	itt	lt
 800a152:	580b      	ldrlt	r3, [r1, r0]
 800a154:	18c0      	addlt	r0, r0, r3
 800a156:	4770      	bx	lr

0800a158 <_init>:
 800a158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15a:	bf00      	nop
 800a15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a15e:	bc08      	pop	{r3}
 800a160:	469e      	mov	lr, r3
 800a162:	4770      	bx	lr

0800a164 <_fini>:
 800a164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a166:	bf00      	nop
 800a168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a16a:	bc08      	pop	{r3}
 800a16c:	469e      	mov	lr, r3
 800a16e:	4770      	bx	lr
